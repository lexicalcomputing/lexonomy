{"structure": {"tab": "custom", "DMLexSettings": {"modules": [], "xlingual_langs": [], "etymology_langs": [], "showMoreSettings": false, "selectedElements": []}, "newEntryTemplate": null, "elements": {"entry": {"name": "entry", "path": "entry", "children": ["entry.lemma", "entry.pos", "entry.postitle", "entry.url", "entry.form", "entry.skipped"], "indent": 0, "type": "string", "max": null, "min": 0, "re": ".+-.+", "values": null}, "entry.lemma": {"name": "lemma", "path": "entry.lemma", "children": [], "indent": 1, "type": "string", "max": 1, "min": 1, "re": ".+", "values": null}, "entry.pos": {"name": "pos", "path": "entry.pos", "children": [], "indent": 1, "type": "string", "max": 1, "min": 1, "re": ".", "values": null}, "entry.postitle": {"name": "postitle", "path": "entry.postitle", "children": [], "indent": 1, "type": "string", "max": 1, "min": 1, "re": ".+", "values": null}, "entry.url": {"name": "url", "path": "entry.url", "children": [], "indent": 1, "type": "url", "max": 1, "min": 1, "re": "", "values": null}, "entry.form": {"name": "form", "path": "entry.form", "children": ["entry.form.freq", "entry.form.url", "entry.form.state", "entry.form.nonstandard"], "indent": 1, "type": "string", "max": null, "min": 0, "re": ".+", "values": null}, "entry.form.freq": {"name": "freq", "path": "entry.form.freq", "children": [], "indent": 2, "type": "int", "max": 1, "min": 0, "re": "", "values": null}, "entry.form.url": {"name": "url", "path": "entry.form.url", "children": [], "indent": 2, "type": "url", "max": 1, "min": 1, "re": "", "values": null}, "entry.form.state": {"name": "state", "path": "entry.form.state", "children": [], "indent": 2, "type": "string", "max": 1, "min": 0, "re": "", "values": null}, "entry.form.nonstandard": {"name": "nonstandard", "path": "entry.form.nonstandard", "children": [], "indent": 2, "type": "bool", "max": 1, "min": 0, "re": "", "values": null}, "entry.skipped": {"name": "skipped", "path": "entry.skipped", "children": [], "indent": 1, "type": "bool", "max": 1, "min": 0, "re": "", "values": null}}, "root": "entry"}, "titling": {"headword": "entry", "headwordSorting": "entry", "sortDesc": false, "numberEntries": "2000", "locale": "cs", "headwordAnnotationsType": "advanced", "headwordAnnotationsAdvanced": "<span class=\"incompleteEntry%(entry.__lexonomy__complete)\">\n<span class=\"titlingHeadword\">\n    <b>%(entry.lemma)</b>\n    <small><i>%(entry.postitle)</i></small>\n</span>\n<span class=\"titlingCheck\">\u2714</span>\n</span>"}, "searchability": {"searchableElements": []}, "editing": {"_version": "2.118", "useOwnEditor": true, "js": "{\neditor: function(options) {\n  // options = {\n  //   node: the node into which you should render the editor\n  //   entry = JSON object representing the entry\n  //   readOnly = true if we want the entry to be uneditable\n  //   onChange = method to call if data changes\n  //   onValidChange - method to call if data state changes from valid to invalid or vice versa\n  // }\n  this.options = options\n  this.node = $(options.node)\n  this.entry = options.entry\n  this.contentNode = $('<div class=\"myEditorContentNode\"></div>').appendTo(this.node)\n  this.isValid = null\n  this.lang = \"en\"\n  this.disabledStr = this.options.readOnly ? 'disabled' : ''\n  this._render()\n  this._validate()\n  },\n\ngetValue: function() {\n  if(this.isValid && !this._getChildElement(this.entry, \"__lexonomy__complete\")) {\n    let lexonomyCompleteElement = this._createChildElement(this.entry, \"__lexonomy__complete\")\n    lexonomyCompleteElement.value = 1\n    }\n  return this.entry\n  },\n\nupdate: function(entry) {\n  this.entry = entry\n  this._render()\n  this._validate()\n  },\n\n_render: function() {\n  this.contentNode.empty()\n  this._renderErrorMessageBar()\n  this._renderHeader()\n  this._renderForms()\n  },\n\n_renderErrorMessageBar: function() {\n  if(!this.options.readOnly) {\n    $(`\n      <div id=\"errorMessageBar\"\n        class=\"errorMessageBar red lighten-4 pt-2 pb-2 pl-4 pr-4\"\n        style=\"${this.error ? '' : 'display: none;'}\">\n        <div id=\"errorMessage\"\n          class=\"errorMessage\">\n          ${this.error}\n        </div>\n      </div>`).appendTo(this.contentNode)\n    }\n  },\n\n_renderHeader: function() {\n  let lemma = this._getChildValue(this.entry, \"lemma\")\n  let pos = this._getChildValue(this.entry, \"pos\")\n  let postitle = this._getChildValue(this.entry, \"postitle\")\n  let url = this._getChildValue(this.entry, \"url\")\n  let skipped = this._getChildValue(this.entry, \"skipped\")\n  $(`\n    <div class=\"displayFlex alignCenter borderBottom positionRelative\">\n      <span>\n        <h1 class=\"inlineBlock\">${lemma}</h1>\n        <span class=\"ml-2 grey-text\">${this._('postitle_'+postitle)}</span>\n      </span>\n      <span class=\"ml-4\">\n        <span class=\"ml-4\">\n          <a href=\"${this._tracking(url, 'head')}\" target=\"ske\">\n            &#x1f517;\n            <!-- <img src=\"/customization/czech/favicon_ske.png\" width=\"16\" height=\"16\" alt=\"S\" title=\"Sketch Engine\"> -->\n          </a>\n        </span>\n      </span>\n      <div class=\"ml-auto ${this.options.readOnly ? 'hide' : ''}\">\n        <label>\n          <input id=\"skipped\"\n            type=\"checkbox\"\n            ${skipped == 'true' ? 'checked' : ''}\n            />\n          <span>${this._(\"skipped\")}</span>\n        </label>\n      </div>\n      <small class=\"langToggle ${this.options.readOnly ? 'hide' : ''}\">\n        ${this.lang == \"en\" ? \"<span id=\\\"langToggle\\\">cs</span>\" : \"cs\"}\n        |\n        ${this.lang == \"cs\" ? \"<span id=\\\"langToggle\\\">en</span>\" : \"en\"}\n      </small>\n    </div>`).appendTo(this.contentNode)\n  $(\"#skipped\").change(this._onSkippedChange.bind(this))\n  $(\"#langToggle\").click(this._onLangToggleClick.bind(this))\n  },\n\n_renderForms: function() {\n  let formContainer = $(`<div class=\"forms\"></div>`).appendTo(this.contentNode)\n  $(`<h3>${this._(\"forms\")}</h3>`).appendTo(formContainer)\n  let formTable = $(\"<table class=\\\"inf-form-table\\\">\").appendTo(formContainer)\n  $(`<thead>\n       <tr>\n         <th></th>\n         <th>${this._(\"form\")}</th>\n         <th>${this._(\"correct?\")}</th>\n         <th>${this._(\"non-standard?\")}</th>\n         <th></th>\n       </tr>\n     </thead>`).appendTo(formTable)\n  let lemma = this._getChildValue(this.entry, \"lemma\")\n  let forms = this._getChildElements(this.entry, \"form\")\n  forms.forEach((form, idx) => {\n    let state = this._getChildValue(form, \"state\")\n    let nonstandard = this._getChildValue(form, \"nonstandard\")\n    let freq = this._getChildValue(form, \"freq\")\n    let url = this._getChildValue(form, \"url\")\n    let valueEqualsLemma = (form.value == lemma)\n    let valueHighlighted = this._highlightCapitals(form.value);\n    var buttons = valueEqualsLemma ?\n      `<span class=\"equals_lemma\">${this._(\"=lemma\")}</span>`\n      : `<span class=\"state_btn state_btn_correct\" data-idx=${idx} data-state=\"correct\">&#10004;</span>\n         <span class=\"state_btn state_btn_wrong\" data-idx=${idx} data-state=\"wrong\">&#10008;</span>`\n    var toggle = valueEqualsLemma ?\n      `<span class=\"equals_lemma\">${this._(\"=lemma\")}</span>`\n      : `<span class=\"switch nonstandard\"><label><input type=\"checkbox\" class=\"nonstandard_tgl\" data-idx=${idx} ${nonstandard == 'true' ? 'checked' : ''}><span class=\"lever\"></span></label></span>`\n    let formNode = $(`<tr class=\"form ${state}\">\n      <td class=\"line-number\">${idx + 1}.</td>\n        <td>\n          ${valueHighlighted}\n        </td>\n        <td>\n          ${buttons}\n        </td>\n        <td>\n          ${toggle}\n        </td>\n        <td>\n          <a href=\"${this._tracking(url, 'form')}\" target=\"ske\">&#x1f517;</a>\n        </td>\n      </tr>`).appendTo(formTable)\n    formNode.find(\".state_btn\").on(\"click\", this._onStateClick.bind(this, form))\n    formNode.find(\".switch input\").on(\"change\", this._onNonstandardChange.bind(this, form))\n  })\n},\n\n_onLangToggleClick(){\n  this.lang = this.lang == \"en\" ? \"cs\" : \"en\"\n  this._render()\n  this._validate()\n},\n\n_onStateClick: function(parent, evt) {\n  let state = evt.target.dataset.state\n  evt.target.closest(\"tr\").classList.remove(\"correct\", \"wrong\")\n  evt.target.closest(\"tr\").classList.add(state)\n  let stateElement = this._getOrCreateChildElement(parent, \"state\")\n  stateElement.value = state\n  if(state == \"wrong\") {\n    evt.target.closest(\"tr\").querySelector(\".nonstandard_tgl\").checked = false\n    // no better way to just request triggerHandler('change') without JQuery?\n    this._onNonstandardChange(parent, {target: evt.target.closest(\"tr\").querySelector(\".nonstandard_tgl\")})\n    }\n  this._validate()\n},\n\n_onNonstandardChange: function(parent, evt) {\n  let nonstandardElement = this._getOrCreateChildElement(parent, \"nonstandard\")\n  nonstandardElement.value = evt.target.checked.toString()\n  this._validate()\n},\n\n_onSkippedChange: function(evt) {\n  if(evt.target.checked) {\n    let skippedElement = this._getOrCreateChildElement(this.entry, \"skipped\")\n    skippedElement.value = \"true\"\n    }\n  else {\n    let skippedElement = this._getChildElement(this.entry, \"skipped\")\n    if(skippedElement) skippedElement.parent.children = skippedElement.parent.children.filter(childElement => childElement != skippedElement)\n    }\n  this._validate()\n  },\n\n_getChildElement: function(parent, childName) {\n  return window.nvhStore.findElement(e => e.name == childName, parent)\n  },\n\n_getOrCreateChildElement: function(parent, childName) {\n  return this._getChildElement(parent, childName) || this._createChildElement(parent, childName)\n  },\n\n_getChildElements: function(parent, childName) {\n  return window.nvhStore.findElements(e => e.name == childName, parent)\n  },\n\n_getChildValue: function(parent, childName, defaultValue = \"\") {\n  let child = this._getChildElement(parent, childName)\n  return child ? child.value : defaultValue\n  },\n\n_createChildElement: function(parent, childElementName) {\n  let child = {\n    name: childElementName,\n    value: \"\",\n    parent: parent,\n    children: [],\n    path: `${parent.path}.${childElementName}`\n    }\n  parent.children.push(child)\n  return child\n  },\n\n_tracking: function(url, content = '') {\n  // this functions adds tracking parameters into a URL for the purpose of server-side logging of clicks performed by the user\n  // currently, it ONLY works for Sketch Engine URLs\n\n  let lemma = this._getChildValue(this.entry, \"lemma\")\n  let pos = this._getChildValue(this.entry, \"pos\")\n  let sense = '' // this widget's entries are not sense-specific\n\n  // the tracking parameters have been modeled and named according to the well-known UTM parameters, cf. https://en.wikipedia.org/wiki/UTM_parameters\n  timestamp = Date.now()\n  medium = 'lexonomy'\n  campaign = window.store.data.dictId // dictionary ID\n  content = content // what specifically has been clicked; provided as a parameter to the function\n  term = lemma + '-' + pos + (sense ? '#' + sense : '')\n\n  // the note field added into the URL fragment [sic!] contains the tracking parameters, delimited by a verbatim tilde\n  return url.replace('?', '?note=' + encodeURIComponent([timestamp, medium, campaign, content, term].join('~')) + '&')\n  },\n\n_highlightCapitals(text) {\n  return text.replaceAll(/\\p{Lu}+/gu, '<span class=\"cap\">$&</span>')\n  },\n\n_: function(id){\n  return this.texts[this.lang][id]\n    || this.texts.en[id]\n    || id\n  },\n\n_updateErrorMessage: function() {\n  $(\"#errorMessage\").html(this.error)\n  $(\"#errorMessageBar\").toggle(!!this.error)\n  },\n\n_validate: function() {\n  let wasValid = this.isValid\n  this.error = \"\"\n  if($(\".myEditorContentNode .form\").has(\".state_btn\").not(\".correct\").not(\".wrong\").length && !$(\"#skipped\").is(\":checked\")) {\n    this.error = this._(\"errorMissingState\")                  \n    }\n  this.isValid = !this.error\n  if(wasValid != this.isValid) {\n    this.options.onValidChange(this.isValid)\n    }\n  this._updateErrorMessage()\n },\n\n texts: {\n   en: {\n     errorMissingState: \"Some forms have not yet been evaluated.\",\n     skipped: 'I don\\'t know',\n     forms: 'Forms',\n     form: 'form',\n     'correct?': 'correct?',\n     'non-standard?': 'non-standard?',\n     '=lemma': '=lemma',\n     'postitle_noun': 'noun',\n     'postitle_adjective': 'adjective',\n     'postitle_verb': 'verb',\n     'postitle_adverb': 'adverb',\n     'postitle_numeral': 'numeral',\n     'postitle_interjection': 'interjection',\n     'postitle_pronoun': 'pronoun',\n     'postitle_preposition': 'preposition',\n     'postitle_conjunction': 'conjunction',\n     'postitle_special': 'special'\n   },\n   cs: {\n     errorMissingState: \"N\u011bkter\u00e9 tvary dosud nebyly hodnoceny.\",\n     skipped: 'Nev\u00edm',\n     forms: 'Tvary',\n     form: 'tvar',\n     'correct?': 'spr\u00e1vn\u00fd?',\n     'non-standard?': 'nestandardn\u00ed?',\n     '=lemma': '=lemma',\n     'postitle_noun': 'podstatn\u00e9 jm\u00e9no',\n     'postitle_adjective': 'p\u0159\u00eddavn\u00e9 jm\u00e9no',\n     'postitle_verb': 'sloveso',\n     'postitle_adverb': 'p\u0159\u00edslovce',\n     'postitle_numeral': '\u010d\u00edslovka',\n     'postitle_interjection': 'citoslovce',\n     'postitle_pronoun': 'z\u00e1jmeno',\n     'postitle_preposition': 'p\u0159edlo\u017eka',\n     'postitle_conjunction': 'spojka',\n     'postitle_special': 'zvl\u00e1\u0161tn\u00ed'\n     }\n  },\n\nconst: {\n  }\n}\n", "css": ".myEditorContentNode h1{\n   text-transform: none\n}\n.myEditorContentNode .input-field{\n   margin-bottom: 0;\n}\n.myEditorContentNode a{\n   text-decoration: none;\n}\n.errorMessageBar{\n   position: sticky;\n   top: 37px;\n   z-index: 100;\n}\nlabel{\n   white-space: nowrap;\n}\n.langToggle{\n   position: absolute;\n   right: 0;\n   top: 0;\n   cursor: pointer; \n   color: #000;\n   font-weight: bold;\n}\n.langToggle span{\n   color: grey;\n   font-weight: normal;\n}\n.langToggle span:hover{\n   text-decoration: underline;\n}\n\n#skipped + span:before{\n    border-color: #f44336;\n}\n#skipped:checked + span:before{\n    border-top-color: transparent;\n    border-left-color: transparent;\n}\n#skipped + span {\n  color: #f44336;\n}\n\n.myEditorContentNode .inflected-forms-header{\n    font-size: 20px;\n    margin-left: 15px;\n    margin-bottom: 10px;\n    color: #acacac;\n}\n\n.myEditorContentNode .inf-form-table{\n    margin: 15px 0;\n    background-color: #f2f2f2;\n    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.14), 0 3px 1px -2px rgba(0,0,0,0.12), 0 1px 5px 0 rgba(0,0,0,0.2);\n}\n\n.myEditorContentNode .inf-form-table td,\n.myEditorContentNode .inf-form-table th{\n    padding: 5px 20px;\n    text-align: left;\n}\n\n.myEditorContentNode .inf-form-table .line-number{\n    color: grey;\n}\n\n.myEditorContentNode .inf-form-table .cap {\n    color: sienna;\n}\n\n.myEditorContentNode .inf-form-table .state_btn{\n    font-size: 25px;\n    margin: 0 3px;\n    cursor: pointer;\n    width: 28px;\n    height: 28px;\n    display: inline-block;\n    text-align: center;\n    line-height: 28px;\n    border-radius: 50%;\n}\n\n.myEditorContentNode .inf-form-table .state_btn:hover{\n    box-shadow: 1px 1px 5px -1px #00000091;\n    background-color: #ebebcc;\n}\n\n.myEditorContentNode .inf-form-table .state_btn.disabled{\n    pointer-events: none;\n    cursor: default;\n}\n\n.myEditorContentNode .inf-form-table .state_btn_correct{\n    color: green;\n}\n\n.myEditorContentNode .inf-form-table .state_btn_wrong{\n    color: red;\n}\n\n.myEditorContentNode .inf-form-table tr.wrong .state_btn_correct:not(:hover),\n.myEditorContentNode .inf-form-table tr.correct .state_btn_wrong:not(:hover),\n.myEditorContentNode .inf-form-table tr:not(.wrong):not(.correct) .state_btn:not(:hover){\n    color: #d4d4d4;\n}\n\n/* fix for Firefox behavior which adds bottom space and jumps on checkbox change if the actual checkbox has been minimized but not truly hidden by the framework */\n/* see https://stackoverflow.com/questions/8570050/page-jumps-to-the-top-when-checkbox-is-clicked */\n.myEditorContentNode input[type=\"checkbox\"] {\n  position: initial;\n}\n\n.myEditorContentNode .inf-form-table tr.wrong .nonstandard {\n  visibility: hidden;\n}\n\n.myEditorContentNode .inf-form-table tr:not(:first-child):hover {\n  background-color: #ffffe0;\n}\n\n.myEditorContentNode .inf-form-table .equals_lemma{\n    font-style: italic;\n    opacity: 0.5;\n}\n"}, "flagging": {"all_additive_key": "", "all_additive_label": "", "sort_additive_flags_alphabetically": 0, "flags": []}, "styles": {"css": ".titlingHeadword {\n   text-shadow: none;\n}\n.incompleteEntry .titlingHeadword {\n   color: white;\n   background-color: red;\n   padding: 0px 5px;\n   margin-left: 22px;\n}\n.titlingCheck {\n   color: green;\n   float: left;\n   margin-right: 10px;\n}\n.incompleteEntry .titlingCheck {\n   display: none;\n}\n.randomEntryList a{\n    max-width: calc(100% - 16px)!important;\n    display: inline-block!important;\n    white-space: nowrap!important;\n    overflow: hidden!important;\n}"}}