{"structure": {"tab": "custom", "DMLexSettings": {"modules": [], "xlingual_langs": [], "etymology_langs": [], "showMoreSettings": false, "selectedElements": []}, "newEntryTemplate": null, "elements": {"entry": {"name": "entry", "path": "entry", "children": ["entry.lemma", "entry.pos", "entry.postitle", "entry.flag", "entry.conc"], "indent": 0, "type": "string", "max": null, "min": 0, "re": ".+-.+", "values": null}, "entry.lemma": {"name": "lemma", "path": "entry.lemma", "children": [], "indent": 1, "type": "string", "max": 1, "min": 1, "re": ".+", "values": null}, "entry.pos": {"name": "pos", "path": "entry.pos", "children": [], "indent": 1, "type": "string", "max": 1, "min": 1, "re": ".", "values": null}, "entry.postitle": {"name": "postitle", "path": "entry.postitle", "children": [], "indent": 1, "type": "string", "max": 1, "min": 1, "re": ".+", "values": null}, "entry.flag": {"name": "flag", "path": "entry.flag", "children": [], "indent": 1, "type": "string", "max": 1, "min": 0, "re": "", "values": null}, "entry.conc": {"name": "conc", "path": "entry.conc", "children": ["entry.conc.kwic"], "indent": 1, "type": "string", "max": null, "min": 0, "re": ".+", "values": null}, "entry.conc.kwic": {"name": "kwic", "path": "entry.conc.kwic", "children": [], "indent": 2, "type": "markup", "max": 1, "min": 1, "re": ".+", "values": null}}, "root": "entry"}, "formatting": {"entry": {"weight": "bold", "textsize": 6, "colour": "blue"}, "entry.lemma": {"lineBreak": "after"}, "entry.pos": {"colour": "grey", "weight": "bold", "lineBreak": "after"}, "entry.postitle": {"lineBreak": "after"}, "entry.flag": {"lineBreak": "after"}}, "titling": {"headword": "entry", "headwordSorting": "entry", "sortDesc": false, "numberEntries": "2000", "locale": "mt", "headwordAnnotationsType": "advanced", "headwordAnnotationsAdvanced": "<b>%(entry.lemma)</b> <small><i>%(entry.postitle)</i></small>"}, "searchability": {"searchableElements": []}, "editing": {"_version": "2.118", "useOwnEditor": true, "js": "{\n   editor: function(options) {\n      this.node = $(options.node)\n      this.entry = options.entry\n      this._render()\n      this.CONCORDANCE_ELEMENT_PATH = \"entry.conc\"\n      this.onEntryFlagChangedBound = this._onEntryFlagChanged.bind(this)\n      this.onDocumentKeyDownBound = this._onDocumentKeyDown.bind(this)\n\n      window.store.on(\"entryFlagChanged\", this.onEntryFlagChangedBound)\n   },\n\n   destroy: function() {\n      window.store.off(\"entryFlagChanged\", this.onEntryFlagChangedBound)\n      document.removeEventListener(\"keydown\", this.onDocumentKeyDownBound)\n   },\n\n   getValue: function() {\n      return this.entry\n   },\n\n   update: function() {\n      this._render()\n   },\n\n   _render: function() {\n      this.node.empty()\n      $(\"<img>\", {\n         src: \"/customization/maltese/headwords_diagram.png\",\n         id: \"img_instructions\",\n         style: \"max-height: calc(100vh - 200px)\"\n      }).appendTo(this.node)\n   },\n\n   _onEntryFlagChanged: function(entryId, flags) {\n      if(entryId != window.store.data.entryId){\n          window.store.one(\"entryChanged\", this._showDialog.bind(this, entryId, flags))\n          window.store.changeEntryId(entryId)\n      } else{\n         this._showDialog(entryId, flags)\n      }\n   },\n  \n   _showDialog(entryId, flags){\n      if (this.ignoreNextFlagUpdate) {\n         this.ignoreNextFlagUpdate = false\n         return // function was called after changing flag from this dialog, do not open it again\n      }\n      let concLines = window.nvhStore.findElements(el => el.path == this.CONCORDANCE_ELEMENT_PATH)\n      if (concLines.length == 0) {\n         return // no concordance lines, nothing to show\n      }\n      if (flags.length == 1 && ![\"ok\", \"name\"].includes(flags[0])) {\n         this.entryId = entryId\n         let concHtml = \"\"\n         let flagButtonsHtml = \"\"\n         concLines.forEach(el => {\n            line = el.value\n            kwicValue = this._getChildElement(el, \"kwic\").value\n            let [undefined, kwic, kwicOrder] = kwicValue.match(/^(.*?)(?:#([^#]*))?$/)\n            kwicOrder = kwicOrder ? parseInt(kwicOrder) : 1\n            kwicPos = this._indexOfNth(line, kwic, kwicOrder)\n            left = line.substring(0, kwicPos)\n            right = line.substring(kwicPos + kwic.length)\n            concHtml += `<li class=\"concLine\">${left}<strong>${kwic}</strong>${right}</li>`\n         })\n         if(concHtml){\n           concHtml = `<ul class=\"concLines browser-default\">${concHtml}</ul>`\n         }\n         let selectedFlagColor = \"\"\n         let selectedFlagTextColor = \"\"\n         window.store.data.config.flagging.flags.forEach(flag => {\n           if(flag.name != flags[0]){\n              let color = this._getContrastColor(flag.color)\n              flagButtonsHtml += `<button class=\"btnSetFlag btn\" style=\"background-color: ${flag.color}; color: ${color};\" data-flag=\"${flag.name}\">${flag.label} (${flag.key})</button>`\n           } else {\n             selectedFlagColor = flag.color\n             selectedFlagTextColor = this._getContrastColor(flag.color)\n           }\n         })\n         this.selectedEntry = document.querySelector(\".entry-list a.focused\")\n         let selectedFlagLabel = window.store.data.config.flagging.flags.find(flag => flag.name == flags[0])?.label || flags[0]\n         window.modal.open({\n            title: \"Are you sure?\",\n            tag: \"raw-html\",\n            props: {\n               content: `<div class=\"grey-text\">You have selected \"<span class=\"black-text\"><b>${selectedFlagLabel}</b></span>\".</div> <div class=\"grey-text\">Examples of headword usage are:</div>\n                  ${concHtml}\n                  <div class=\"mt-2 grey-text\">You can change the flag to: </div>\n                  <div class=\"buttons\" style=\"flex-wrap: wrap\">${flagButtonsHtml}</div>`\n            },\n            onOpen: () => {\n               let closeBtn = document.querySelector(\".modal-close\")\n               closeBtn.innerHTML = `Keep: ${selectedFlagLabel} (esc)`;\n               closeBtn.style.backgroundColor = selectedFlagColor\n               closeBtn.style.color = selectedFlagTextColor\n               document.querySelectorAll(\".btnSetFlag\").forEach(button => {              \n                  button.addEventListener(\"click\", (evt) => {\n                     this._changeFlag(evt.target.dataset.flag)\n                  })\n               })\n               document.addEventListener(\"keydown\", this.onDocumentKeyDownBound)\n            },\n            onCloseStart: () => {\n               document.removeEventListener(\"keydown\", this.onDocumentKeyDownBound)\n            },\n            onClose: () => {\n              this.selectedEntry.click() // set focus back to the entry list\n           }\n         })\n      }\n   },\n\n   _onDocumentKeyDown: function(evt) {\n      if (!evt.ctrlKey &&\n         !evt.altKey &&\n         !evt.metaKey) {\n         let flag = window.store.data.config.flagging.flags.find(f => f.key == evt.key)\n         if(!window.store.data.entryList.find(e => e.id == this.entryId).isSaving){\n           this._changeFlag(flag?.name) \n         }         \n         if(flag?.name){\n           this.ignoreNextFlagUpdate = true\n           window.modal.close()\n         }\n      }\n   },\n\n   _changeFlag: function(flag) {\n      if (flag) {\n         this.ignoreNextFlagUpdate = true\n         window.store.setEntryFlag(this.entryId, [flag])\n         window.modal.close()\n      }\n   },\n\n   _getChildElement: function(parent, childName) {\n      return window.nvhStore.findElement(e => e.name == childName, parent)\n   },\n\n   _getContrastColor: function(bgColor) {\n      bgColor = bgColor.replace('#', '');\n      let r = parseInt(bgColor.substring(0, 2), 16);\n      let g = parseInt(bgColor.substring(2, 4), 16);\n      let b = parseInt(bgColor.substring(4, 6), 16);\n\n      let yiq = ((r*299) + (g*587) + (b*114)) / 1000;\n      return (yiq >= 128) ? '#000' : '#fff';\n   },\n\n   _indexOfNth(inString, searchString, n) {\n     let start = inString.indexOf(searchString)\n     while(start >= 0 && n-- > 1) start = inString.indexOf(searchString, start+1)\n     return start\n   }\n}", "css": "nvh-editor-toolbar {\n  display: none\n}\n.concLines li {\n  list-style-type: disc;\n}\n.concLines li strong {\n  font-weight: bold;\n  color: #ff0000;\n}"}, "flagging": {"flag_element": "entry.flag", "all_additive_key": "", "all_additive_label": "", "sort_additive_flags_alphabetically": 0, "flags": [{"key": "d", "name": "non_word", "label": "don't know the word", "color": "#000000"}, {"key": "m", "name": "foreign_word", "label": "not Maltese", "color": "#808080"}, {"key": "s", "name": "non_standard", "label": "non-standard", "color": "#ffff00"}, {"key": "l", "name": "wrong_lemma", "label": "not a lemma", "color": "#ff0000"}, {"key": "p", "name": "wrong_pos", "label": "wrong part of speech", "color": "#ff00ff"}, {"key": "n", "name": "name", "label": "proper name only", "color": "#0000ff"}, {"key": "o", "name": "ok", "label": "OK", "color": "#008000"}]}, "styles": {}}
