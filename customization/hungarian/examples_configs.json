{"structure": {"tab": "custom", "DMLexSettings": {"modules": [], "xlingual_langs": [], "etymology_langs": [], "showMoreSettings": false, "selectedElements": []}, "newEntryTemplate": null, "elements": {"entry": {"name": "entry", "path": "entry", "children": ["entry.lemma", "entry.pos", "entry.postitle", "entry.sense", "entry.othersense", "entry.example", "entry.note"], "indent": 0, "type": "string", "max": null, "min": 0, "re": ".+-.+", "values": null}, "entry.lemma": {"name": "lemma", "path": "entry.lemma", "children": [], "indent": 1, "type": "string", "max": 1, "min": 1, "re": ".+", "values": null}, "entry.pos": {"name": "pos", "path": "entry.pos", "children": [], "indent": 1, "type": "string", "max": 1, "min": 1, "re": ".", "values": null}, "entry.postitle": {"name": "postitle", "path": "entry.postitle", "children": [], "indent": 1, "type": "string", "max": 1, "min": 1, "re": ".+", "values": null}, "entry.sense": {"name": "sense", "path": "entry.sense", "children": ["entry.sense.url", "entry.sense.nocoll", "entry.sense.offensive"], "indent": 1, "type": "string", "max": 1, "min": 1, "re": ".+", "values": null}, "entry.sense.url": {"name": "url", "path": "entry.sense.url", "children": [], "indent": 2, "type": "string", "max": 1, "min": 0, "re": "", "values": null}, "entry.sense.nocoll": {"name": "nocoll", "path": "entry.sense.nocoll", "children": [], "indent": 2, "type": "bool", "max": 1, "min": 0, "re": "", "values": null}, "entry.sense.offensive": {"name": "offensive", "path": "entry.sense.offensive", "children": [], "indent": 2, "type": "bool", "max": 1, "min": 0, "re": "", "values": null}, "entry.othersense": {"name": "othersense", "path": "entry.othersense", "children": ["entry.othersense._url", "entry.othersense._nocoll", "entry.othersense._offensive"], "indent": 1, "type": "string", "max": null, "min": 0, "re": ".+", "values": null}, "entry.othersense._url": {"name": "_url", "path": "entry.othersense._url", "children": [], "indent": 2, "type": "string", "max": 1, "min": 0, "re": "", "values": null}, "entry.othersense._nocoll": {"name": "_nocoll", "path": "entry.othersense._nocoll", "children": [], "indent": 2, "type": "bool", "max": 1, "min": 0, "re": "", "values": null}, "entry.othersense._offensive": {"name": "_offensive", "path": "entry.othersense._offensive", "children": [], "indent": 2, "type": "bool", "max": 1, "min": 0, "re": "", "values": null}, "entry.example": {"name": "example", "path": "entry.example", "children": ["entry.example.state", "entry.example.origtext", "entry.example.origtranslation", "entry.example.translation"], "indent": 1, "type": "string", "max": null, "min": 0, "re": ".+", "values": null}, "entry.example.state": {"name": "state", "path": "entry.example.state", "children": [], "indent": 2, "type": "string", "max": 1, "min": 0, "re": "", "values": null}, "entry.example.origtext": {"name": "origtext", "path": "entry.example.origtext", "children": [], "indent": 2, "type": "string", "max": 1, "min": 0, "re": "", "values": null}, "entry.example.origtranslation": {"name": "origtranslation", "path": "entry.example.origtranslation", "children": [], "indent": 2, "type": "string", "max": 1, "min": 0, "re": "", "values": null}, "entry.example.translation": {"name": "translation", "path": "entry.example.translation", "children": [], "indent": 2, "type": "string", "max": 1, "min": 0, "re": "", "values": null}, "entry.note": {"name": "note", "path": "entry.note", "children": [], "indent": 1, "type": "string", "max": 1, "min": 0, "re": "", "values": null}}, "root": "entry"}, "formatting": {"entry": {"layout": "block", "separation": "space", "gutter": "", "weight": "bold", "slant": "", "colour": "red", "textsize": "bigger"}, "lemma": {"layout": "block"}, "pos": {"layout": "block"}, "postitle": {"layout": "block"}, "sense": {"layout": "block", "separation": "space", "gutter": "None", "weight": "bold", "slant": "", "colour": "", "border": "solid", "background": "yellow"}, "example": {"layout": "block", "gutter": "indent", "slant": "italic"}, "state": {"layout": "block"}}, "titling": {"headword": "entry", "headwordSorting": "entry", "sortDesc": false, "numberEntries": "2000", "locale": "hu", "headwordAnnotationsType": "advanced", "headwordAnnotationsAdvanced": "<span class=\"incompleteEntry%(entry.__lexonomy__complete)\">\n<span class=\"titlingHeadword\">\n    <b>%(entry.lemma)</b>\n    <small><i>%(entry.postitle)</i></small>\n    <small>%(entry.sense)</small>\n</span>\n<span class=\"titlingCheck\">\u2714</span>\n</span>"}, "searchability": {"searchableElements": []}, "editing": {"_version": "2.100", "useOwnEditor": true, "js": "{\n   editor: function(options) {\n      // options = {\n      //   node: the node into which you should render the editor\n      //   entry = JSON object representing the entry\n      //   readOnly = true if we want the entry to be uneditable\n      //   onChange = method to call if data changes\n      //   onValidChange - method to call if data state changes from valid to invalid or vice versa\n      // }\n      this.options = options\n      this.node = $(options.node)\n      this.entry = options.entry\n      this.contentNode = $('<div class=\"myEditorContentNode\"></div>').appendTo(this.node)\n      this.isValid = null\n      this.lang = \"en\"\n      this.disabledStr = this.options.readOnly ? 'disabled' : ''\n      this._render()\n      this._validate()\n      window.nvhStore.on(\"entryUpdated\", this.onEntryUpdated)\n   },\n\n   getValue: function() {\n      if(this.isValid && !this._getChildElement(this.entry, \"__lexonomy__complete\")){\n         let lexonomyCompleteElement = this._createChildElement(this.entry, \"__lexonomy__complete\")\n         lexonomyCompleteElement.value = 1\n      }\n      return this.entry\n   },\n\n   update: function(entry) {\n      this.entry = entry\n      this._render()\n      this._validate()\n   },\n\n   destroy: function() {\n       window.nvhStore.off(\"entryUpdated\", this.onEntryUpdated)\n   },\n\n   onEntryUpdated: function() {\n      !window.nvhStore.data.isSaving && window.store.loadEntryList()\n   },\n\n   _render: function() {\n      this.contentNode.empty()\n      this._renderErrorMessageBar()\n      this._renderHeader()\n      this._renderHeadwordForm()\n      this._renderExamples()\n      $('textarea', this.contentNode).each((idx, el) => {M.textareaAutoResize(el)})\n   },\n\n   _renderErrorMessageBar: function() {\n      if(!this.options.readOnly){\n         $(`\n            <div id=\"errorMessageBar\"\n                  class=\"errorMessageBar red lighten-4 pt-2 pb-2 pl-4 pr-4\"\n                  style=\"${this.error ? '' : 'display: none;'}\">\n               <div id=\"errorMessage\"\n                     class=\"errorMessage\">\n                  ${this.error}\n               </div>\n            </div>`).appendTo(this.contentNode)\n      }\n   },\n\n   _renderHeader: function() {\n      let lemma = this._getChildValue(this.entry, \"lemma\")\n      let pos = this._getChildValue(this.entry, \"pos\")\n      let postitle = this._getChildValue(this.entry, \"postitle\")\n      let sense = this._getChildValue(this.entry, \"sense\")\n      let senseElement = this._getChildElement(this.entry, \"sense\")\n      let senseUrl = this._getChildValue(senseElement, \"url\")\n      let senseNocoll = this._getChildValue(senseElement, \"nocoll\")\n      let senseOffensive = this._getChildValue(senseElement, \"offensive\")\n      // TODO: othersense's\n      $(`\n         <div class=\"displayFlex alignCenter borderBottom positionRelative\">\n            <span>\n               <h1 class=\"inlineBlock\">${lemma}</h1>\n               <span class=\"ml-2 grey-text\">${postitle}</span>\n            </span>\n            <span class=\"ml-4\">\n               <span>${senseElement.value}</span>\n               <span class=\"ml-2 ${!senseOffensive ? 'hide' : ''}\" title=\"This sense has an offensive meaning.\">(offensive)</span>\n               <span class=\"ml-4 hide\">\n                  <a href=\"${this._tracking(senseUrl, 'head')}\" target=\"_ske\" ${senseNocoll ? 'title=\"Warning: This sense has not been linked to the corpus! Clicking the link will show examples for a mixture of senses, not just this one.\"' : ''}>\n                     <img src=\"/customization/hungarian/favicon_ske.png\" width=\"16\" height=\"16\" alt=\"S\" title=\"Sketch Engine\">\n                     ${senseNocoll ? '&#x26a0;&#xfe0f;' : ''}\n                  </a>\n               </span>\n            </span>\n            <div class=\"ml-auto ${this.options.readOnly ? 'hide' : ''}\">\n               <label>\n                  <input id=\"selectedOnly\"\n                        type=\"checkbox\"\n                        />\n                  <span>${this._(\"selectedExamplesOnly\")}</span>\n               </label>\n            </div>\n            <small class=\"langToggle ${this.options.readOnly ? 'hide' : ''}\">\n               ${this.lang == \"en\" ? \"<span id=\\\"langToggle\\\">hu</span>\" : \"hu\"}\n               |\n               ${this.lang == \"hu\" ? \"<span id=\\\"langToggle\\\">en</span>\" : \"en\"}\n            </small>\n         </div>`).appendTo(this.contentNode)\n      $(\"#selectedOnly\").change(this._onSelectedOnlyChange.bind(this))\n      $(\"#langToggle\").click(this._onLangToggleClick.bind(this))\n   },\n\n   _renderHeadwordForm: function() {\n      let note = this._getChildValue(this.entry, \"note\")\n      $(`\n         <div class=\"headwordForm\">\n            <div class=\"displayFlex\">\n               <div class=\"input-field noteInput\">\n                  <textarea name=\"note\"\n                        class=\"materialize-textarea\"\n                        ${this.disabledStr}>${note}</textarea>\n                  <label>${this._(\"note\")}</label>\n               </div>\n            </div>\n         </div>`).appendTo(this.contentNode)\n      $(\"textarea[name=\\\"note\\\"]\").on(\"input\", this._onNoteInput.bind(this))\n   },\n\n   _renderExamples: function() {\n      let exampleContainer = $(`<div class=\"examples\"></div>`).appendTo(this.contentNode)\n      $(`<h3>${this._(\"examples\")}</h3>`).appendTo(exampleContainer)\n      let examples = this._getChildElements(this.entry, \"example\")\n      let expandUntil = Math.max(this.const.expandBy-1, examples.findLastIndex((el) => this._getChildValue(el, \"state\") != 'bad'))\n      examples.forEach((example, idx) => {\n         let translation = this._getChildValue(example, \"translation\", null)\n         let state = this._getChildValue(example, \"state\", \"bad\")\n         let exampleNode = $(`\n            <div class=\"example card-panel ml-8 ${this.options.readOnly ? '' : 'mr-16'} mb-8 positionRelative ${idx > expandUntil ? 'exampleCollapsed' : ''}\">\n               <span class=\"exampleNum\">${idx + 1}.</span>\n               <div class=\"displayFlex alignStart\">\n                  <div class=\"input-field exampleText\">\n                     <textarea name=\"text\"\n                           class=\"materialize-textarea\"\n                           ${this.disabledStr}>${example.value}</textarea/>\n                     <label>${this._(\"text\")}</label>\n                  </div>\n               </div>\n               <div class=\"displayFlex alignStart ${translation == null ? 'hide': ''}\">\n                  <div class=\"input-field mb-0 translationInput\">\n                     <textarea name=\"translation\"\n                           class=\"materialize-textarea\"\n                           ${translation && !this.options.readOnly ? '' : 'disabled'}\n                           >${translation}</textarea>\n                     <label>${this._(\"translation\")}</label>\n                     <span class=\"helper-text ${this.options.readOnly ? 'hide' : ''}\">\n                     </span>\n                  </div>\n              </div>\n              <div class=\"displayFlex alignStart\">\n                  <label class=\"mr-4\">\n                     <input type=\"radio\"\n                           id=\"example_${idx}_rb_bad\"\n                           name=\"example_${idx}_rb\"\n                           value=\"bad\"\n                           ${this.disabledStr}\n                           ${state == \"bad\" ? 'checked' : ''}/>\n                     <span>${this._(\"exampleState_bad\")}</span>\n                  </label>\n                  <label class=\"mr-4\">\n                     <input type=\"radio\"\n                           id=\"example_${idx}_rb_best\"\n                           name=\"example_${idx}_rb\"\n                           value=\"best\"\n                           ${this.disabledStr}\n                           ${state == \"best\" ? 'checked' : ''}/>\n                     <span>${this._(\"exampleState_best\")}</span>\n                  </label>\n               </div>\n            </div>`).appendTo(exampleContainer)\n         exampleNode.find(\"textarea[name=\\\"text\\\"]\").on(\"input\", this._onTextInput.bind(this, example))\n         exampleNode.find(\"input[name=\\\"example_\" + idx + \"_rb\\\"]\").on(\"change\", this._onStateChange.bind(this, example))\n      })\n      $(`<button class=\"moreExamplesButton btn ml-8 ${this.options.readOnly ? 'hide' : ''}\">\n            <i class=\"material-icons left\">add</i>\n            ${this._(\"moreExamples\")}\n         </button>`)\n            .appendTo(exampleContainer)\n            .click(this._onMoreExamplesClick.bind(this))\n   },\n\n   _onLangToggleClick(){\n      this.lang = this.lang == \"en\" ? \"hu\" : \"en\"\n      this._render()\n      this._validate()\n   },\n\n   _onInput: function(parent, evt) {\n      let element = this._getOrCreateChildElement(parent, evt.target.name)\n      element.value = evt.target.value\n      this._validate()\n   },\n\n   _onNoteInput: function(evt) {\n      let noteElement = this._getOrCreateChildElement(this.entry, \"note\")\n      noteElement.value = evt.target.value\n      this._validate()\n   },\n\n   _onSelectedOnlyChange: function(evt) {\n      $(\".examples\").toggleClass(\"examplesSelectedOnly\", evt.target.checked)\n   },\n\n   _onMoreExamplesClick: function(evt) {\n      $('.examples .exampleCollapsed').slice(0, this.const.expandBy).toggleClass(\"exampleCollapsed\").find(\"textarea\").each(function(idx, el) {M.textareaAutoResize(el)}.bind(this))\n   },\n\n   _onTextInput: function(example, evt) {\n      let origtextElement = this._getChildElement(example, \"origtext\")\n      if (!origtextElement) {\n         origtextElement = this._createChildElement(example, \"origtext\")\n         origtextElement.value = example.value\n      }\n      example.value = evt.target.value\n      this._validate()\n   },\n\n   _onStateChange: function(example, evt) {\n      if(evt.target.checked) {\n         let stateElement = this._getOrCreateChildElement(example, \"state\")\n         stateElement.value = evt.target.value\n         this._validate()\n         }\n   },\n\n   _getChildElement: function(parent, childName) {\n      return window.nvhStore.findElement(e => e.name == childName, parent)\n   },\n\n   _getOrCreateChildElement: function(parent, childName) {\n      return this._getChildElement(parent, childName) || this._createChildElement(parent, childName)\n   },\n\n   _getChildElements: function(parent, childName) {\n      return window.nvhStore.findElements(e => e.name == childName, parent)\n   },\n\n   _getChildValue: function(parent, childName, defaultValue = \"\") {\n      let child = this._getChildElement(parent, childName)\n      return child ? child.value : defaultValue\n   },\n\n   _createChildElement: function(parent, childElementName) {\n      let child = {\n         name: childElementName,\n         path: parent ? parent.path + \".\" + childElementName : childElementName,\n         value: \"\",\n         parent: parent,\n         children: []\n      }\n      parent.children.push(child)\n      return child\n   },\n\n   _tracking: function(url, content = ''){\n      // this functions adds tracking parameters into a URL for the purpose of server-side logging of clicks performed by the user\n      // currently, it ONLY works for Sketch Engine URLs\n\n      let lemma = this._getChildValue(this.entry, \"lemma\")\n      let pos = this._getChildValue(this.entry, \"pos\")\n      let sense = '' // this widget's entries are not sense-specific\n\n      // the tracking parameters have been modeled and named according to the well-known UTM parameters, cf. https://en.wikipedia.org/wiki/UTM_parameters\n      timestamp = Date.now()\n      medium = 'lexonomy'\n      campaign = window.store.data.dictId // dictionary ID\n      content = content // what specifically has been clicked; provided as a parameter to the function\n      term = lemma + '-' + pos + (sense ? '#' + sense : '')\n\n      // the note field added into the URL fragment [sic!] contains the tracking parameters, delimited by a verbatim tilde\n      return url.replace('?', '?note=' + encodeURIComponent([timestamp, medium, campaign, content, term].join('~')) + '&')\n   },\n\n   _: function(id){\n      return this.texts[this.lang][id]\n            || this.texts.en[id]\n            || id\n   },\n\n   _updateErrorMessage: function() {\n      $(\"#errorMessage\").html(this.error)\n      $(\"#errorMessageBar\").toggle(!!this.error)\n   },\n\n   _validate: function() {\n      let wasValid = this.isValid\n      this.error = \"\"\n      if($(\".myEditorContentNode .example\").toArray()\n           .filter(example => {\n               return $(example).find(\"input[type='radio'][value='best']:checked\").length\n            }).length < 1\n       ){\n           this.error = this._(\"errorNotEnoughBestExamples\")\n      }\n      else if($(\".myEditorContentNode .example\").toArray()\n           .some(example => {\n               let text = $(example).find(\".exampleText textarea\").val()\n               return !text\n            })\n       ){\n           this.error = this._(\"errorExampleText\")                  \n      }\n      this.isValid = !this.error\n      if (wasValid != this.isValid) {\n         this.options.onValidChange(this.isValid)\n      }\n      this._updateErrorMessage()\n   },\n\n   texts: {\n      en: {\n         selectedExamplesOnly: \"Selected examples only\",\n         examples: \"Examples\",\n         example: \"Example\",\n         exampleState_bad: \"no\",\n         exampleState_best: \"yes\",\n         moreExamples: \"Show more examples\",\n         errorExampleText: \"Example text should not be empty.\",\n         errorNotEnoughBestExamples: \"You must select at least one example.\"\n      },\n      hu: {\n         selectedExamplesOnly: \"Csak kiv\u00e1lasztott p\u00e9ld\u00e1k\",\n         examples: \"P\u00e9ld\u00e1k\",\n         example: \"P\u00e9lda\",\n         exampleState_bad: \"nem\",\n         exampleState_best: \"igen\",\n         moreExamples: \"Tov\u00e1bbi p\u00e9ld\u00e1k megjelen\u00edt\u00e9se\",\n         errorExampleText: \"A p\u00e9lda sz\u00f6vege nem lehet \u00fcres.\",\n         errorNotEnoughBestExamples: \"Legal\u00e1bb egy p\u00e9ld\u00e1t ki kell v\u00e1lasztania.\"\n         }\n   },\n\n   const: {\n      expandBy: 10\n   }\n}\n", "css": ".myEditorContentNode h1{\n   text-transform: none\n}\n.myEditorContentNode .input-field{\n   margin-bottom: 0;\n}\n.myEditorContentNode a{\n   text-decoration: none;\n}\n.errorMessageBar{\n   position: sticky;\n   top: 37px;\n   z-index: 100;\n}\nlabel{\n   white-space: nowrap;\n}\n.headwordForm .displayFlex{\n   gap: 20px;\n}\n.headwordForm textarea[name=\"note\"]{\n   min-width: 220px;\n}\n.langToggle{\n   position: absolute;\n   right: 0;\n   top: 0;\n   cursor: pointer; \n   color: #000;\n   font-weight: bold;\n}\n.langToggle span{\n   color: grey;\n   font-weight: normal;\n}\n.langToggle span:hover{\n   text-decoration: underline;\n}\n.example {\n   border-left: 6px solid transparent;\n}\n.example:has([type=\"radio\"][value=\"bad\"]:checked){\n  border-left-color: #f44336;\n  background-color: #ffebee;\n}\n.example:has([type=\"radio\"][value=\"good\"]:checked){\n  border-left-color: #ff9800;\n  background-color: #fff3e0;\n}\n.example:has([type=\"radio\"][value=\"best\"]:checked){\n  border-left-color: #4caf50;\n  background-color: #e8f5e9;\n}\n.example [type=\"radio\"][value=\"bad\"]:checked+span:after{\n    background-color: #f44336;\n    border: 2px solid #f44336;\n}\n.example [type=\"radio\"][value=\"good\"]:checked+span:after{\n    background-color: #ff9800 ;\n    border: 2px solid #ff9800 ;\n}\n.example [type=\"radio\"][value=\"best\"]:checked+span:after{\n    background-color: #4CAF50 ;\n    border: 2px solid #4CAF50 ;\n}\n.example.exampleCollapsed{\n  display: none;\n}\n:not(.exampleCollapsed) + .moreExamplesButton {\n  display: none;\n}\n.examplesSelectedOnly .example:has([type=\"radio\"][value=\"bad\"]:checked){\n  display: none;\n}\n.examplesSelectedOnly .moreExamplesButton {\n  display: none;\n}\n.example textarea{\n  background-color: #fff;\n}\n.exampleText{\n   /*max-width: 300px;*/\n   flex: 1;\n }\n.exampleRadio{\n   min-width: 205px;\n}\n.translationInput{\n   flex: 1;    \n}\n.noteInput{\n   flex: 1;    \n}\n.exampleNum{\n   position: absolute;\n   left: -25px;\n   font-size: 20px;\n   color: lightgray;\n}\n.alignStart{\n   align-items: flex-start;\n}"}, "flagging": {"flag_element": "", "flags": []}, "styles": {"css": ".titlingHeadword {\n   text-shadow: none;\n}\n.incompleteEntry .titlingHeadword {\n   color: white;\n   background-color: red;\n   padding: 0px 5px;\n   margin-left: 22px;\n}\n.titlingCheck {\n   color: green;\n   float: left;\n   margin-right: 10px;\n}\n.incompleteEntry .titlingCheck {\n   display: none;\n}\n.randomEntryList a{\n    max-width: calc(100% - 16px)!important;\n    display: inline-block!important;\n    white-space: nowrap!important;\n    overflow: hidden!important;\n}\n.entryListContainer{\n   position: sticky;\n   top: 0;\n}"}}