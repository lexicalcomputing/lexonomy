{"structure": {"elements": {"entry": {"children": ["entry_type", "entry_lexid", "entrygroup_lexid", "posunit_lexid", "sense", "adpositiontype", "ideophone", "register", "domain", "variant", "region", "etymology", "transcription", "affixtype", "grammatical_note", "form", "voice", "subcategory", "gender", "note", "number"], "min": 1, "type": "string"}, "entry_type": {"min": 1, "max": 1, "type": "string"}, "entry_lexid": {"min": 1, "max": 1, "type": "string"}, "entrygroup_lexid": {"min": 1, "max": 1, "type": "string"}, "posunit_lexid": {"min": 1, "max": 1, "type": "string"}, "sense": {"children": ["sensegroup_lexid", "sense_type", "definition", "translationgroup", "antonym", "synonym", "sense_register", "sense_indicator", "sense_domain", "xref", "sense_region", "sense_etymology", "sense_transcription", "sense_note", "sense_variant", "sense_grammatical_note", "sense_form"], "type": "string"}, "sensegroup_lexid": {"min": 1, "max": 1, "type": "string"}, "sense_type": {"min": 1, "max": 1, "type": "string"}, "definition": {"children": ["definition_xref"], "type": "string"}, "definition_xref": {"children": ["definition_target_id", "definition_xref_type"], "type": "string"}, "definition_target_id": {"min": 1, "max": 1, "type": "string"}, "definition_xref_type": {"min": 1, "max": 1, "type": "string"}, "translationgroup": {"children": ["translation", "example", "translation_indicator", "translation_register", "translation_domain"], "type": "empty"}, "translation": {"children": ["translationunit_lexid"], "type": "string"}, "translationunit_lexid": {"max": 1, "type": "string"}, "example": {"children": ["example_lexid", "example_translation", "example_translation_indicator", "example_grammatical_note", "example_domain", "example_note", "example_register"], "type": "string"}, "example_lexid": {"min": 1, "max": 1, "type": "string"}, "example_translation": {"children": ["example_translationunit_lexid"], "min": 1, "type": "string"}, "example_translationunit_lexid": {"max": 1, "type": "string"}, "example_translation_indicator": {"max": 1, "type": "string"}, "example_grammatical_note": {"type": "string"}, "example_domain": {"max": 1, "type": "string"}, "example_note": {"children": ["example_note_type"], "max": 1, "type": "string"}, "example_note_type": {"min": 1, "max": 1, "type": "string"}, "example_register": {"max": 1, "type": "string"}, "translation_indicator": {"max": 1, "type": "string"}, "translation_register": {"max": 1, "type": "string"}, "translation_domain": {"max": 1, "type": "string"}, "antonym": {"type": "string"}, "synonym": {"type": "string"}, "sense_register": {"type": "string"}, "sense_indicator": {"max": 1, "type": "string"}, "sense_domain": {"type": "string"}, "xref": {"children": ["target_id", "xref_type"], "type": "string"}, "target_id": {"min": 1, "max": 1, "type": "string"}, "xref_type": {"min": 1, "max": 1, "type": "string"}, "sense_region": {"max": 1, "type": "string"}, "sense_etymology": {"max": 1, "type": "bool"}, "sense_transcription": {"children": ["sense_transcription_lexid"], "max": 1, "type": "string"}, "sense_transcription_lexid": {"max": 1, "type": "string"}, "sense_note": {"children": ["sense_note_type"], "max": 1, "type": "string"}, "sense_note_type": {"min": 1, "max": 1, "type": "string"}, "sense_variant": {"children": ["sense_variantunit_lexid"], "type": "string"}, "sense_variantunit_lexid": {"min": 1, "max": 1, "type": "string"}, "sense_grammatical_note": {"max": 1, "type": "string"}, "sense_form": {"children": ["sense_form_grammatical_note"], "type": "string"}, "sense_form_grammatical_note": {"max": 1, "type": "string"}, "adpositiontype": {"max": 1, "type": "string"}, "ideophone": {"max": 1, "type": "string"}, "register": {"type": "string"}, "domain": {"type": "string"}, "variant": {"children": ["variantunit_lexid"], "type": "string"}, "variantunit_lexid": {"min": 1, "max": 1, "type": "string"}, "region": {"max": 1, "type": "string"}, "etymology": {"max": 1, "type": "bool"}, "transcription": {"children": ["transcription_lexid"], "max": 1, "type": "string"}, "transcription_lexid": {"max": 1, "type": "string"}, "affixtype": {"max": 1, "type": "string"}, "grammatical_note": {"max": 1, "type": "string"}, "form": {"children": ["form_grammatical_note"], "type": "string"}, "form_grammatical_note": {"max": 1, "type": "string"}, "voice": {"max": 1, "type": "string"}, "subcategory": {"max": 1, "type": "string"}, "gender": {"max": 1, "type": "string"}, "note": {"children": ["note_type", "note_title"], "type": "string"}, "note_type": {"min": 1, "max": 1, "type": "string"}, "note_title": {"max": 1, "type": "string"}, "number": {"max": 1, "type": "string"}}, "root": "entry", "tab": "custom", "basic_modules": [], "advanced_structure": {"elements": {"entry": {"type": "string", "min": 0, "max": 0, "values": [], "re": "", "children": ["adpositiontype", "domain", "register", "region", "sense"]}, "adpositiontype": {"type": "string", "min": "0", "max": "1", "re": "", "values": [], "children": []}, "domain": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": []}, "register": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": []}, "region": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": []}, "sense": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": ["definition", "translationgroup", "sense_indicator", "sense_domain", "sense_register", "sense_region"]}, "definition": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": []}, "translationgroup": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": ["translation"]}, "translation": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": []}, "sense_indicator": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": []}, "sense_domain": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": []}, "sense_register": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": []}, "sense_region": {"type": "string", "min": "", "max": "", "re": "", "values": [], "children": []}}, "root": "entry"}, "custom_NVHSchema": "entry: +\n  entry_type: \n  entry_lexid: \n  entrygroup_lexid: \n  posunit_lexid: \n  sense: *\n    sensegroup_lexid: \n    sense_type: \n    definition: *\n      definition_xref: *\n        definition_target_id: \n        definition_xref_type: \n    translationgroup: * empty\n      translation: *\n        translationunit_lexid: ?\n      example: *\n        example_lexid: \n        example_translation: +\n          example_translationunit_lexid: ?\n        example_translation_indicator: ?\n        example_grammatical_note: *\n        example_domain: ?\n        example_note: ?\n          example_note_type: \n        example_register: ?\n      translation_indicator: ?\n      translation_register: ?\n      translation_domain: ?\n    antonym: *\n    synonym: *\n    sense_register: *\n    sense_indicator: ?\n    sense_domain: *\n    xref: *\n      target_id: \n      xref_type: \n    sense_region: ?\n    sense_etymology: ? bool\n    sense_transcription: ?\n      sense_transcription_lexid: ?\n    sense_note: ?\n      sense_note_type: \n    sense_variant: *\n      sense_variantunit_lexid: \n    sense_grammatical_note: ?\n    sense_form: *\n      sense_form_grammatical_note: ?\n  adpositiontype: ?\n  ideophone: ?\n  register: *\n  domain: *\n  variant: *\n    variantunit_lexid: \n  region: ?\n  etymology: ? bool\n  transcription: ?\n    transcription_lexid: ?\n  affixtype: ?\n  grammatical_note: ?\n  form: *\n    form_grammatical_note: ?\n  voice: ?\n  subcategory: ?\n  gender: ?\n  note: *\n    note_type: \n    note_title: ?\n  number: ?", "custom_newEntryTemplate": "entry:"}, "titling": {"headword": "entry", "headwordSorting": "entry", "sortDesc": false, "numberEntries": "2000", "locale": "id", "headwordAnnotationsType": "advanced", "headwordAnnotationsAdvanced": "<span class=\"incompleteEntry%(__lexonomy_complete)%(__lexonomy__complete)\">\n<span class=\"titlingHeadword\">\n    <b>%(lemma)</b>\n    <small><i>%(postitle)</i></small>\n</span>\n<span class=\"titlingCheck\">\u2714</span>\n</span>"}, "searchability": {"searchableElements": []}, "editing": {"_version": "2.100", "useOwnEditor": true, "js": "{\n   editor: function(options) {\n      // options = {\n      //   node: the node into which you should render the editor\n      //   entry = JSON object representing the entry\n      //   readOnly = true if we want the entry to be uneditable\n      //   onChange = method to call if data changes\n      //   onValidChange - method to call if data state changes from valid to invalid or vice versa\n      // }\n      this.options = options\n      this.node = $(options.node)\n      this.entry = options.entry\n      this.contentNode = $('<div class=\"myEditorContentNode\"></div>').appendTo(this.node)\n      this.isValid = null\n      this.lang = \"id\" //en\n      this.disabledStr = this.options.readOnly ? 'disabled' : ''\n      this._createCandidateListTemplate()\n      this._calculateSenseCheckboxes()\n      this._render()\n      this._validate()\n      window.nvhStore.on(\"entryUpdated\", this.onEntryUpdated)\n   },\n\n   getValue: function() {\n      if(this.isValid && !this._getChildElement(this.entry, \"__lexonomy__complete\")){\n         let lexonomyCompleteElement = this._createChildElement(this.entry, \"__lexonomy__complete\")\n         lexonomyCompleteElement.value = 1\n      }\n      return this.entry\n   },\n\n   update: function(entry) {\n      this.entry = entry\n      this._createCandidateListTemplate()\n      this._calculateSenseCheckboxes()\n      this._render()\n      this._validate()\n   },\n\n   destroy: function() {\n       window.nvhStore.off(\"entryUpdated\", this.onEntryUpdated)\n   },\n\n   onEntryUpdated: function() {\n      !window.nvhStore.data.isSaving && window.store.loadEntryList()\n   },\n\n   _render: function() {\n      this.contentNode.empty()\n      this._renderErrorMessageBar()\n      this._renderHeader()\n      if (!this._getChildValue(this.entry, \"wrong_lemma\")) {\n         this._renderHeadwordForm()\n         this._renderSenses()\n      } else {\n         this._renderWrongLemmaWarning()\n      }\n      $('textarea', this.contentNode).each((idx, el) => {M.textareaAutoResize(el)})\n   },\n\n   _renderErrorMessageBar: function() {\n      if(!this.options.readOnly){\n         $(`\n            <div id=\"errorMessageBar\"\n                  class=\"errorMessageBar red lighten-4 pt-2 pb-2 pl-4 pr-4\"\n                  style=\"${this.error ? '' : 'display: none;'}\">\n               <div id=\"errorMessage\"\n                     class=\"errorMessage\">\n                  ${this.error}\n               </div>\n            </div>`).appendTo(this.contentNode)\n      }\n   },\n\n   _renderHeader: function() {\n      let lemma = this._getChildValue(this.entry, \"lemma\")\n      let pos = this._getChildValue(this.entry, \"pos\")\n      let postitle = this._getChildValue(this.entry, \"postitle\")\n      let wrong_lemma = this._getChildValue(this.entry, \"wrong_lemma\")\n      let cql_query = pos ?\n         `[lempos==\"${lemma}-${pos}\"]` :\n         lemma.split(' ').map((l) => `[lemma==\"${l}\"]`).join(' ')\n      $(`\n         <div class=\"displayFlex alignCenter borderBottom positionRelative\">\n            <span>\n               <h1 class=\"inlineBlock\">${lemma}</h1>\n               <span class=\"ml-2 grey-text\">${postitle}</span>\n            </span>\n            <span>\n               <span class=\"ml-4\"><a href=\"${this._tracking('/crystal/#concordance?corpname=idtenten_last&queryselector=cql&showresults=1&itemsPerPage=100&gdexcnt=200&gdex_enabled=1&cql=' + encodeURIComponent(cql_query), 'head')}\" target=\"_ske\"><img src=\"/customization/indonesian/favicon_ske.png\" width=\"32\" height=\"32\" alt=\"S\" title=\"Sketch Engine\"></a></span>\n               <span class=\"ml-2\"><a href=\"https://www.google.co.id/search?lr=lang_id&as_q=${encodeURIComponent(lemma)}\" target=\"_google\"><img src=\"/customization/indonesian/favicon_google.png\" width=\"32\" height=\"32\" alt=\"G\" title=\"Google\"></a></span>\n               <span class=\"ml-2\"><a href=\"https://kbbi.kemdikbud.go.id/entri/${encodeURIComponent(lemma)}\" target=\"_kbbi\"><img src=\"/customization/indonesian/favicon_kbbi.png\" width=\"32\" height=\"32\" alt=\"K\" title=\"KBBI\"></a></span>\n            </span>\n            <div class=\"ml-auto ${this.options.readOnly ? 'hide' : ''}\">\n               <label>\n                  <input id=\"wrong_lemma\"\n                        type=\"checkbox\"\n                        ${wrong_lemma ? 'checked' : ''}/>\n                  <span>${this._(\"entryIsWrong\")}</span>\n               </label>\n            </div>\n            <small class=\"langToggle ${this.options.readOnly ? 'hide' : ''}\">\n               ${this.lang == \"en\" ? \"<span id=\\\"langToggle\\\">id</span>\" : \"id\"}\n               |\n               ${this.lang == \"id\" ? \"<span id=\\\"langToggle\\\">en</span>\" : \"en\"}\n            </small>\n         </div>`).appendTo(this.contentNode)\n      $(\"#wrong_lemma\").change(this._onWrong_lemmaChange.bind(this))\n      $(\"#langToggle\").click(this._onLangToggleClick.bind(this))\n   },\n\n   _renderWrongLemmaWarning: function() {\n      $(`<div class=\"wrongLemmaWarning\">${this._(\"wrongLemma\")}</div>`).appendTo(this.contentNode)\n   },\n\n   _renderHeadwordForm: function() {\n      let headwordtype = this._getChildValue(this.entry, \"headwordtype\")\n      let headwordtypeOptions = this.const.headwordtype.map(t => `<option value=\"${t[0]}\" ${t[0] == headwordtype ? 'selected' : ''}>${t[1]}</option>`).join(\"\\n\")\n      $(`\n         <div class=\"headwordForm\">\n            <div class=\"displayFlex\">\n               <div class=\"input-field\">\n                  <select id=\"headwordtype\"\n                        ${this.disabledStr}>\n                     ${headwordtypeOptions}\n                  </select>\n                  <label>${this._(\"headwordType\")}</label>\n               </div>\n            </div>\n         </div>`).appendTo(this.contentNode)\n      $(\"#headwordtype\").formSelect()\n         .on(\"change\", this._onHeadwordtypeChange.bind(this))\n   },\n\n   _renderSenses: function() {\n      let senseContainer = $(`<div class=\"senses\"></div>`).appendTo(this.contentNode)\n      $(`<h3>${this._(\"senses\")}</h3>`).appendTo(senseContainer)\n      let senses = this._getChildElements(this.entry, \"sense\")\n      senses.forEach((sense, idx) => {\n         let example = this._getChildValue(sense, \"example\")\n         let is_sense_figurative = this._getChildValue(sense, \"is_sense_figurative\", false)\n         let is_example_figurative = this._getChildValue(sense, \"is_example_figurative\", false)\n         let baseword = this._getChildValue(sense, \"baseword\")\n         let homonym_number = this._getChildValue(sense, \"homonym_number\", \"\")\n         let syllabification = this._getChildValue(sense, \"syllabification\")\n         let pronunciation = this._getChildValue(sense, \"pronunciation\")\n         let headword_homonym_number = this._getChildValue(sense, \"headword_homonym_number\", \"\")\n         let newlemma = this._getChildValue(sense, \"newlemma\")\n         let newpos = this._getChildValue(sense, \"newpos\")\n         let newposOptions = this.const.newpos.map(n => `<option value=\"${n[0]}\" ${n[0] == newpos ? 'selected' : ''}>${this._(n[1])}</option>`).join(\"\\n\")\n         let referral_type = this._getChildValue(sense, \"referral_type\")\n         let referred_headword = this._getChildValue(sense, \"referred_headword\")\n         let referral_typeOptions = this.const.referral_type.map(r => `<option value=\"${r[0]}\" ${r[0] == referral_type ? 'selected' : ''}>${this._(r[1])}</option>`).join(\"\\n\")\n         let senseNode = $(`\n            <div class=\"sense card-panel grey lighten-5 ml-8 ${this.options.readOnly ? '' : 'mr-16'} mb-8 positionRelative\">\n               <span class=\"senseNum\">${idx + 1}.</span>\n               <div class=\"displayFlex alignStart\">\n                  <div class=\"input-field senseDefinition\">\n                     <textarea name=\"sense\"\n                           class=\"materialize-textarea\"\n                           ${this.disabledStr}>${sense.value}</textarea/>\n                     <label>${this._(\"sense\")}</label>\n                  </div>\n                  <label class=\"ml-4 mt-6 figurativeCheckbox\">\n                     <input type=\"checkbox\"\n                           name=\"is_sense_figurative\"\n                           ${this.disabledStr}\n                           ${is_sense_figurative ? 'checked' : ''}/>\n                     <span>${this._(\"isSenseFigurative\")}</span>\n                  </label>\n               </div>\n               <button class=\"removeSenseBtn btn btn-floating ${idx == 0 ? 'hide' : ''}\">\n               <i class=\"material-icons\">delete</i>\n               </button>\n               <div class=\"displayFlex\">\n                  <div class=\"input-field\">\n                     <input id=\"pronunciation\"\n                           type=\"text\"\n                           name=\"pronunciation\"\n                           ${this.disabledStr}\n                           value=\"${pronunciation}\"/>\n                     <label>${this._(\"pronunciation\")}</label>\n                  </div>\n                  <div class=\"input-field ml-4\">\n                     <input id=\"syllabification\"\n                           type=\"text\"\n                           name=\"syllabification\"\n                           ${this.disabledStr}\n                           value=\"${syllabification}\"/>\n                     <label>${this._(\"syllabification\")}</label>\n                  </div>\n                  <div class=\"input-field ml-4\">\n                     <input id=\"headword_homonym_number\"\n                           type=\"text\"\n                           name=\"headword_homonym_number\"\n                           ${this.disabledStr}\n                           value=\"${headword_homonym_number}\"/>\n                     <label>${this._(\"headwordHomonymNumber\")}</label>\n                  </div>\n               </div>\n               <div class=\"displayFlex\">\n                  <div class=\"input-field\">\n                     <input id=\"baseword\"\n                           type=\"text\"\n                           name=\"baseword\"\n                           ${this.disabledStr}\n                           value=\"${baseword}\"/>\n                     <label>${this._(\"baseword\")}</label>\n                  </div>\n                  <div class=\"input-field ml-4\">\n                     <input id=\"homonym_number\"\n                           type=\"number\"\n                           min=\"0\"\n                           name=\"homonym_number\"\n                           ${this.disabledStr}\n                           value=\"${homonym_number}\"/>\n                     <label>${this._(\"homonymNum\")}</label>\n                  </div>\n               </div>\n               <div class=\"example displayFlex alignStart\">\n                  <div class=\"input-field mb-0 exampleInput\">\n                     <textarea name=\"example\"\n                           class=\"materialize-textarea\"\n                           ${example && !this.options.readOnly ? '' : 'disabled'}\n                           placeholder=\"${this._(\"chooseFromListBelow\")}\">${example}</textarea>\n                     <label>${this._(\"example\")}</label>\n                     <span class=\"helper-text ${this.options.readOnly ? 'hide' : ''}\">\n                        ${this._(\"chooseFromListBelowOr\")}\n                        <a href=\"javascript:void(0);\" class=\"addOwnExample\">${this._(\"addYourOwn\")}</a>.\n                        ${this._(\"youCanEdit\")}.\n                     </span>\n                  </div>\n                  <label class=\"ml-4 mt-6 figurativeCheckbox\">\n                     <input type=\"checkbox\"\n                           name=\"is_example_figurative\"\n                           ${this.disabledStr}\n                           ${is_example_figurative ? 'checked' : ''}/>\n                     <span>${this._(\"isExampleFigurative\")}</span>\n                  </label>\n               </div>\n               <div class=\"candidateList white mb-4 p-2 ${this.options.readOnly ? 'hide' : ''}\">\n                  ${this.exampleCandidateTemplate}\n               </div>\n               <div class=\"displayFlex\">\n                  <div class=\"input-field mb-0 referralTypeInputField\">\n                     <select name=\"referral_type\"\n                           ${this.disabledStr}>\n                        ${referral_typeOptions}\n                     </select>\n                     <label>${this._(\"referralType\")}</label>\n                  </div>\n                  <div class=\"input-field referredHeadwordInputField ml-4 mb-0\">\n                     <input name=\"referred_headword\"\n                           ${this.disabledStr}\n                           value=\"${referred_headword}\"/>\n                     <label>${this._(\"referredHeadword\")}</label>\n                  </div>                 \n               </div>\n               <div class=\"displayFlex fixLemmaContainer alignCenter mt-2\">\n                  <label class=\"input-field fixLemmaToggle mt-0 mb-0\">\n                     <input type=\"checkbox\"\n                           ${this.disabledStr}\n                           ${this.checkedFixLemmaCheckboxes[idx] ? 'checked' : ''}/>\n                     <span>${this._(\"fixLemma\")}</span>\n                  </label>\n                  <div class=\"newLemma input-field ml-4 mt-2 mb-0\"\n                        style=\"${this.checkedFixLemmaCheckboxes[idx] ? '' : 'display:none;'}\">\n                     <input id=\"newlemma\"\n                           type=\"text\"\n                           name=\"newlemma\"\n                           ${this.disabledStr}\n                           value=\"${newlemma}\"/>\n                  </div>\n               </div>\n               <div class=\"displayFlex fixPosContainer alignCenter\">\n                  <label class=\"input-field fixPosToggle mt-0 mb-0\">\n                     <input type=\"checkbox\"\n                           ${this.disabledStr}\n                           ${this.checkedFixPosCheckboxes[idx] ? 'checked' : ''}/>\n                     <span>${this._(\"fixPos\")}</span>\n                  </label>\n                  <div class=\"newPos input-field ml-4 mt-2 mb-0\" \n                        style=\"${this.checkedFixPosCheckboxes[idx] ? '' : 'display:none;'}\">\n                     <select id=\"newpos\"\n                           name=\"newpos\"\n                           ${this.disabledStr}>\n                        ${newposOptions}\n                     </select>\n                  </div>\n               </div>\n               <div class=\"moreInfoContainer mt-4\">\n                  <label class=\"moreInfoToggle ${this.options.readOnly ? 'hide' : ''}\">\n                     <input type=\"checkbox\"\n                           ${this.disabledStr}\n                           ${this.checkedMoreInfoChekboxes[idx] ? 'checked' : ''}/>\n                     <span>${this._(\"addMoreInformation\")}</span>\n                  </label>\n                  <div class=\"moreInfoForm mt-4\" \n                        style=\"${this.checkedMoreInfoChekboxes[idx] ? '' : 'display:none;'}\">\n                     ${this._getMoreInformationForm(sense)}\n                     <div></div>\n                     <div></div>\n                     <div></div>\n                     <div></div>\n                     <div></div>\n                     <div></div>\n                  </div>\n               </div>\n            </div>`).appendTo(senseContainer)\n         senseNode.find(\".removeSenseBtn\").click(this._onRemoveSenseClick.bind(this, sense, idx))\n         senseNode.find(\"textarea[name=\\\"sense\\\"]\").on(\"input\", this._onSenseInput.bind(this, sense))\n         senseNode.find(\"input[name=\\\"homonym_number\\\"]\").on(\"input\", this._onHomonymNumberInput.bind(this, sense))\n         senseNode.find(\"input[name=\\\"is_sense_figurative\\\"]\").on(\"change\", this._onIsFigurativeChange.bind(this, sense))\n         senseNode.find(\"input[name=\\\"is_example_figurative\\\"]\").on(\"change\", this._onIsFigurativeChange.bind(this, sense))\n         senseNode.find(\".addOwnExample\").click(this._onAddOwnExampleClick.bind(this))\n         senseNode.find(\"#baseword\").on(\"input\", this._onInput.bind(this, sense))\n         senseNode.find(\"#pronunciation\").on(\"input\", this._onInput.bind(this, sense))\n         senseNode.find(\"#syllabification\").on(\"input\", this._onInput.bind(this, sense))\n         senseNode.find(\"#headword_homonym_number\").on(\"input\", this._onInput.bind(this, sense))\n         senseNode.find(\"textarea[name=\\\"example\\\"]\").on(\"input\", this._onInput.bind(this, sense))\n         senseNode.find(\".candidate\").click(this._onSelectCandidateClick.bind(this, sense))\n         senseNode.find(\".moreInfoToggle\").change(this._onMoreInfoToggleClick.bind(this, idx))\n         senseNode.find(\".fixLemmaToggle\").change(this._onFixLemmaToggleClick.bind(this, idx))\n         senseNode.find(\".fixPosToggle\").change(this._onFixPosToggleClick.bind(this, idx))\n         senseNode.find(\"input[name=\\\"referred_headword\\\"]\").on(\"input\", this._onInput.bind(this, sense))\n         senseNode.find(\"input[name=\\\"newlemma\\\"]\").on(\"input\", this._onInput.bind(this, sense))\n         senseNode.find(\"input[name=\\\"newpos\\\"]\").on(\"input\", this._onInput.bind(this, sense))\n         senseNode.find(\"input[name=\\\"scientificname\\\"]\").on(\"input\", this._onInput.bind(this, sense))\n         senseNode.find(\"input[name=\\\"chemicalformula\\\"]\").on(\"input\", this._onInput.bind(this, sense))\n         senseNode.find(\"select\").formSelect().on(\"change\", this._onSelectChange.bind(this, sense))\n         senseNode.find(\".customValueToggleIcon\").on(\"click\", this._onCustomValueToggleClick.bind(this, sense))\n         senseNode.find(\".customValueInput\").on(\"input\", this._onInput.bind(this, sense))\n      })\n      $(`<button class=\"addSenseButton btn ml-8 ${this.options.readOnly ? 'hide' : ''}\">\n            <i class=\"material-icons left\">add</i>\n            ${this._(\"addSense\")}\n         </button>`)\n            .appendTo(senseContainer)\n            .click(this._onAddSenseClick.bind(this))\n   },\n\n   _onLangToggleClick(){\n      this.lang = this.lang == \"en\" ? \"id\" : \"en\"\n      this._render()\n      this._validate()\n   },\n\n   _onInput: function(parent, evt) {\n      let element = this._getOrCreateChildElement(parent, evt.target.name)\n      element.value = evt.target.value\n      this._validate()\n   },\n\n   _onSelectChange: function(parent, evt) {\n      let element = this._getOrCreateChildElement(parent, evt.target.name)\n      element.value = evt.target.value\n      this._validate()\n   },\n\n   _onHeadwordtypeChange: function(evt) {\n      let headwordtypeElement = this._getOrCreateChildElement(this.entry, \"headwordtype\")\n      headwordtypeElement.value = evt.target.value\n      this._validate()\n   },\n\n   _onWrong_lemmaChange: function(evt) {\n      let wrong_lemmaElement = this._getOrCreateChildElement(this.entry, \"wrong_lemma\")\n      wrong_lemmaElement.value = evt.target.checked ? \"1\" : \"\"\n      this._render()\n      this._validate()\n   },\n\n   _onRemoveSenseClick: function(sense, idx, evt) {\n      this.entry.children = this.entry.children.filter(s => s != sense)\n      this.checkedMoreInfoChekboxes.splice(idx, 1)\n      this.checkedFixLemmaCheckboxes.splice(idx, 1)\n      this.checkedFixPosCheckboxes.splice(idx, 1)\n      this._render()\n      this._validate()\n   },\n\n   _onAddSenseClick: function(evt) {\n      let senseElement = this._createChildElement(this.entry, \"sense\")\n      let firstSense = this._getChildElements(this.entry, \"sense\")[0]\n      ;[\"baseword\", \"pronunciation\", \"syllabification\", \"homonym_number\"].forEach(elementName => {\n         elementValue = this._getChildValue(firstSense, elementName)\n         if(elementValue !== \"\"){\n            element = this._getOrCreateChildElement(senseElement, elementName)\n            element.value = elementValue\n         }\n      })\n\n      this.checkedMoreInfoChekboxes.push(false)\n      this.checkedFixLemmaCheckboxes.push(false)\n      this.checkedFixPosCheckboxes.push(false)\n      this._render()\n      this._validate()\n   },\n\n   _onSenseInput: function(sense, evt) {\n      let origsenseElement = this._getChildElement(sense, \"origsense\")\n      if (!origsenseElement) {\n         origsenseElement = this._createChildElement(sense, \"origsense\")\n         origsenseElement.value = sense.value\n      }\n      sense.value = evt.target.value\n      this._validate()\n   },\n\n   _onHomonymNumberInput: function(sense, evt) {\n      let homonymNumberElement = this._getOrCreateChildElement(sense, \"homonym_number\")\n      homonymNumberElement.value = evt.target.value\n      this._validate()\n   },\n\n   _onIsFigurativeChange: function(sense, evt) {\n      let isFigurativeElement = this._getOrCreateChildElement(sense, evt.target.name)\n      isFigurativeElement.value = evt.target.checked ? \"1\" : \"\"\n      this._validate()\n   },\n\n   _onAddOwnExampleClick: function(evt) {\n      $(evt.currentTarget).closest(\".input-field\")\n            .find(\"textarea\")\n            .attr(\"disabled\", null)\n            .focus()\n      this._validate()\n   },\n\n   _onSelectCandidateClick: function(sense, evt) {\n      let example = $(evt.currentTarget).find(\".candidateText\").html().trim()\n      let exampleElement = this._getOrCreateChildElement(sense, \"example\")\n      let origExampleElement = this._getOrCreateChildElement(sense, \"origexample\")\n      exampleElement.value = example\n      origExampleElement.value = example\n      this._render()\n      this._validate()\n   },\n\n   _onCustomValueToggleClick: function(sense, evt){\n       let inputField = $(evt.target).closest(\".input-field\")\n       let customValueInput = inputField.find(\".customValueInput\")\n       inputField.toggleClass(\"showCustomValueInput\")\n       if(inputField.hasClass(\"showCustomValueInput\")){\n          customValueInput .val(inputField.find(\".select-wrapper input\").val())\n          customValueInput.get(0).focus()\n       } else {\n          let element = this._getChildElement(sense, customValueInput.attr(\"name\"))\n          if(element){\n             element.value = \"\"\n          }\n       }\n   },\n\n   _getMoreInformationForm: function(sense) {\n      let register = this._getChildValue(sense, \"register\")\n      let language = this._getChildValue(sense, \"language\")\n      let field = this._getChildValue(sense, \"field\")\n      let shorttype = this._getChildValue(sense, \"shorttype\")\n      let scientificname = this._getChildValue(sense, \"scientificname\")\n      let chemicalformula = this._getChildValue(sense, \"chemicalformula\")\n      let registerOptions = this.const.register.map(r => `<option value=\"${r[0]}\" ${r[0] == register ? 'selected' : ''}>${r[1]}</option>`).join(\"\\n\")\n      let languageOptions = this.const.language.map(r => `<option value=\"${r[0]}\" ${r[0] == language ? 'selected' : ''}>${r[1]}</option>`).join(\"\\n\")\n      let fieldOptions = this.const.field.map(r => `<option value=\"${r[0]}\" ${r[0] == field ? 'selected' : ''}>${r[1]}</option>`).join(\"\\n\")\n      let shorttypeOptions = this.const.shorttype.map(r => `<option value=\"${r[0]}\" ${r[0] == shorttype ? 'selected' : ''}>${r[1]}</option>`).join(\"\\n\")\n      let isRegisterCustom = !this.const.register.map(x => x[0]).includes(register)\n      let isLanguageCustom = !this.const.language.map(x => x[0]).includes(language)\n      let isFieldCustom = !this.const.field.map(x => x[0]).includes(field)\n      let isShorttypeCustom = !this.const.shorttype.map(x => x[0]).includes(shorttype)\n      return `\n         <div>\n            <div class=\"input-field selectWithCustomValue displayInlineFlex alignCenter ${isRegisterCustom ? 'showCustomValueInput' : ''}\">\n               <select name=\"register\"\n                     ${this.disabledStr}>\n                     ${registerOptions}\n               </select>\n               <input type=\"text\"\n                     name=\"register\"\n                     class=\"customValueInput\"\n                     ${this.disabledStr}\n                     value=\"${register}\"/>\n               <i class=\"material-icons clickable customValueToggleIcon\">edit</i>\n               <label>${this._(\"register\")}</label>\n            </div>\n         </div>\n         <div>\n            <div class=\"input-field selectWithCustomValue displayInlineFlex alignCenter ${isLanguageCustom ? 'showCustomValueInput' : ''}\">\n               <select name=\"language\"\n                     ${this.disabledStr}>\n                  ${languageOptions}\n               </select>\n               <input type=\"text\"\n                     name=\"language\"\n                     class=\"customValueInput\"\n                     ${this.disabledStr}\n                     value=\"${language}\"/>\n               <i class=\"material-icons clickable customValueToggleIcon\">edit</i>\n               <label>${this._(\"language\")}</label>\n            </div>\n         </div>\n         <div>\n            <div class=\"input-field selectWithCustomValue displayInlineFlex alignCenter ${isFieldCustom ? 'showCustomValueInput' : ''}\">\n               <select name=\"field\"\n                     ${this.disabledStr}>\n                  ${fieldOptions}\n               </select>\n               <input type=\"text\"\n                     name=\"field\"\n                     class=\"customValueInput\"\n                     ${this.disabledStr}\n                     value=\"${field}\"/>\n               <i class=\"material-icons clickable customValueToggleIcon\">edit</i>\n               <label>${this._(\"field\")}</label>\n            </div>\n         </div>\n         <div>\n            <div class=\"input-field selectWithCustomValue displayInlineFlex alignCenter ${isShorttypeCustom ? 'showCustomValueInput' : ''}\">\n               <select name=\"shorttype\"\n                     ${this.disabledStr}>\n                  ${shorttypeOptions}\n               </select>\n               <input type=\"text\"\n                     name=\"shorttype\"\n                     class=\"customValueInput\"\n                     ${this.disabledStr}\n                     value=\"${shorttype}\"/>\n               <i class=\"material-icons clickable customValueToggleIcon\">edit</i>\n               <label>${this._(\"shorttype\")}</label>\n            </div>\n         </div>\n         <div>\n            <div class=\"input-field\">\n               <input name=\"scientificname\"\n                     ${this.disabledStr}\n                     value=\"${scientificname}\">\n               <label>\n                  ${this._(\"scientificName\")}\n               </label>\n            </div>\n         </div>\n         <div>\n            <div class=\"input-field\">\n               <input name=\"chemicalformula\"\n                     ${this.disabledStr}\n                     value=\"${chemicalformula}\">\n               <label>\n                  ${this._(\"chemicalFormula\")}\n               </label>\n            </div>\n         </div>`\n   },\n\n   _createCandidateListTemplate: function() {\n      let candidates = this._getChildElements(this.entry, \"candidate_example\")\n      this.exampleCandidateTemplate = candidates.map((candidate, idx) => {\n         return `\n         <div class=\"candidate displayFlex pointer alignCenter\">\n            <small class=\"num grey-text mr-2\">${idx + 1}.</small>\n            <span class=\"candidateText\">\n               ${candidate.value}\n            </span>\n         </div>`\n      }).join(\"\")\n   },\n\n   _onMoreInfoToggleClick: function(idx, evt) {\n      this.checkedMoreInfoChekboxes[idx] = !this.checkedMoreInfoChekboxes[idx]\n      $(evt.target).closest(\".moreInfoContainer\").find(\".moreInfoForm\").slideToggle()\n   },\n\n   _onFixLemmaToggleClick: function(idx, evt) {\n      this.checkedFixLemmaCheckboxes[idx] = !this.checkedFixLemmaCheckboxes[idx]\n      $(evt.target).closest(\".fixLemmaContainer\")\n            .find(\".newLemma\")\n            .toggle()\n            .find(\"input\")\n            .focus()\n   },\n\n   _onFixPosToggleClick: function(idx, evt) {\n      this.checkedFixPosCheckboxes[idx] = !this.checkedFixPosCheckboxes[idx]\n      $(evt.target).closest(\".fixPosContainer\")\n            .find(\".newPos\")\n            .toggle()\n            .find(\"input\")\n            .focus()\n   },\n\n   _calculateSenseCheckboxes: function() {\n      let senses = this._getChildElements(this.entry, \"sense\")\n      this.checkedMoreInfoChekboxes = []\n      this.checkedFixLemmaCheckboxes = []\n      this.checkedFixPosCheckboxes = []\n      senses.forEach((sense, idx) => {\n         this.checkedMoreInfoChekboxes.push(!!(this._getChildValue(sense, \"register\") ||\n            this._getChildValue(sense, \"language\") ||\n            this._getChildValue(sense, \"field\") ||\n            this._getChildValue(sense, \"shorttype\") ||\n            this._getChildValue(sense, \"scientificname\") ||\n            this._getChildValue(sense, \"chemicalformula\")))\n         this.checkedFixLemmaCheckboxes.push(!!this._getChildValue(sense, \"newlemma\"))\n         this.checkedFixPosCheckboxes.push(!!this._getChildValue(sense, \"newpos\"))\n      }, this)\n   },\n\n   _getChildElement: function(parent, childName) {\n      return window.nvhStore.findElement(e => e.name == childName, parent)\n   },\n\n   _getOrCreateChildElement: function(parent, childName) {\n      return this._getChildElement(parent, childName) || this._createChildElement(parent, childName)\n   },\n\n   _getChildElements: function(parent, childName) {\n      return window.nvhStore.findElements(e => e.name == childName, parent)\n   },\n\n   _getChildValue: function(parent, childName, defaultValue = \"\") {\n      let child = this._getChildElement(parent, childName)\n      return child ? child.value : defaultValue\n   },\n\n\n   _createChildElement: function(parent, childElementName) {\n      let child = {\n         name: childElementName,\n         value: \"\",\n         parent: parent,\n         children: []\n      }\n      parent.children.push(child)\n      return child\n   },\n\n   _tracking: function(url, content = ''){\n      // this functions adds tracking parameters into a URL for the purpose of server-side logging of clicks performed by the user\n      // currently, it ONLY works for Sketch Engine URLs\n\n      let lemma = this._getChildValue(this.entry, \"lemma\")\n      let pos = this._getChildValue(this.entry, \"pos\")\n      let sense = '' // this widget's entries are not sense-specific\n\n      // the tracking parameters have been modeled and named according to the well-known UTM parameters, cf. https://en.wikipedia.org/wiki/UTM_parameters\n      timestamp = Date.now()\n      medium = 'lexonomy'\n      campaign = window.store.data.dictId // dictionary ID\n      content = content // what specifically has been clicked; provided as a parameter to the function\n      term = lemma + '-' + pos + (sense ? '#' + sense : '')\n\n      // the note field added into the URL fragment [sic!] contains the tracking parameters, delimited by a verbatim tilde\n      return url.replace('?', '?note=' + encodeURIComponent([timestamp, medium, campaign, content, term].join('~')) + '&')\n   },\n\n   _: function(id){\n      return this.texts[this.lang][id]\n            || this.texts.en[id]\n            || id\n   },\n\n   _updateErrorMessage: function() {\n      $(\"#errorMessage\").html(this.error)\n      $(\"#errorMessageBar\").toggle(!!this.error)\n   },\n\n   _validate: function() {\n      let wasValid = this.isValid\n      this.error = \"\"\n      if (this.contentNode.find(\"#wrong_lemma\").is(\":checked\")) {\n         this.isValid = true\n      } else {\n         let headword_type = $(\"#headwordtype\").val()\n         if($(\".myEditorContentNode .sense\").toArray()\n              .some(sense => {\n                  let referred_headword = $(sense).find(\".referredHeadwordInputField input\").val()\n                  let definition = $(sense).find(\".senseDefinition textarea\").val()\n                  return headword_type != \"varian\" && !referred_headword && !definition\n               })\n          ){\n              this.error = this._(\"errorSenseDefinition\")                  \n         }\n      }\n      this.isValid = !this.error\n      if (wasValid != this.isValid) {\n         this.options.onValidChange(this.isValid)\n      }\n      this._updateErrorMessage()\n   },\n\n   texts: {\n      en: {\n         entryIsWrong: \"Entry is completely wrong\",\n         wrongLemma: \"marked as completely wrong\",\n         headwordType: \"Headword type\",\n         baseword: \"Baseword\",\n         pronunciation: \"Pronunciation\",\n         syllabification: \"Syllabification\",\n         headwordHomonymNumber: \"Headword homonym number\",\n         senses: \"Senses\",\n         sense: \"Sense\",\n         homonymNum: \"Baseword homonym num.\",\n         isSenseFigurative: \"Is sense figurative\",\n         isExampleFigurative: \"Is example figurative\",\n         example: \"example\",\n         chooseFromListBelow: \"Choose from the list below\",\n         chooseFromListBelowOr: \"Choose from the list below or\",\n         addYourOwn: \"add your own\",\n         youCanEdit: \"You can edit the chosen example\",\n         fixLemma: \"Fix lemma\",\n         fixPos: \"Fix POS\",\n         addMoreInformation: \"Add more information\",\n         addSense: \"add sense\",\n         register: \"Register\",\n         language: \"Language\",\n         field: \"Field\",\n         short: \"Shortened type\",\n         scientificName: \"Scientific name\",\n         chemicalFormula: \"Chemical formula\",\n         errorSenseDefinition: \"Sense definition should not be empty\",\n         notSet: \"Not set\",\n         pos_n: \"noun\",\n         pos_j: \"adjective\",\n         pos_v: \"verb\",\n         pos_a: \"adverb\",\n         pos_d: \"pronoun\",\n         pos_q: \"particle\",\n         pos_m: \"numeral\",\n         pos_x: \"special\",\n         see: \"see\",\n         referralType: \"Referral type\",\n         referredHeadword: \"Referred headword\"\n      },\n      id: {\n         entryIsWrong: \"Entri sama sekali salah\",\n         wrongLemma: \"ditandai sebagai sekali salah\",\n         headwordType: \"Jenis kata utama\",\n         baseword: \"Induk kata\",\n         pronunciation: \"Pengucapan\",\n         syllabification: \"Pemenggalan suku kata\",\n         headwordHomonymNumber: \"Nomor homonim kata kepala\",\n         senses: \"Makna\",\n         sense: \"Makna\",\n         homonymNum: \"Nomor homonim induk kata\",\n         isSenseFigurative: \"Adalah makna kiasan\",\n         isExampleFigurative: \"Adalah contoh kiasan\",\n         example: \"Contoh\",\n         chooseFromListBelow: \"Pilih dari daftar di bawah ini\",\n         chooseFromListBelowOr: \"Pilih dari daftar di bawah ini atau\",\n         addYourOwn: \"tambahkan sendiri\",\n         youCanEdit: \"Anda dapat mengedit contoh yang dipilih\",\n         fixLemma: \"Memperbaiki lemma\",\n         fixPos: \"Memperbaiki kelas kata\",\n         addMoreInformation: \"Tambahkan informasi lebih lanjut\",\n         addSense: \"tambahkan makna\",\n         register: \"Register\",\n         language: \"Bahasa\",\n         field: \"Bidang\",\n         short: \"Jenis singkatan\",\n         scientificName: \"Nama ilmiah\",\n         chemicalFormula: \"Rumus kimia\",\n         errorSenseDefinition: \"Definisi makna tidak boleh kosong\",\n         notSet: \"tidak ditetapkan\",\n         pos_n: \"nomina\",\n         pos_j: \"adjektiva\",\n         pos_v: \"verba\",\n         pos_a: \"adverbia\",\n         pos_d: \"pronomina\",\n         pos_q: \"partikel\",\n         pos_m: \"numeralia\",\n         pos_x: \"spesial\",\n         see: \"lihat\",\n         referralType: \"Jenis rujukan\",\n         referredHeadword: \"Kata kunci yang dirujuk\"         \n      }\n   },\n\n   const: {\n      register: [\n         [\"\", \"-not set-\"],\n         [\"ark\", \"Arkais\"],\n         [\"cak\", \"Cakapan\"],\n         [\"hor\", \"Hormat\"],\n         [\"kas\", \"Kasar\"],\n         [\"kl\", \"Klasik\"]\n      ],\n      language: [\n         [\"\", \"-not set-\"],\n         [\"Abr\", \"Abrap\"],\n         [\"Ach\", \"Aceh\"],\n         [\"Ko\", \"Komering\"],\n         [\"Als\", \"Alas\"],\n         [\"Amk\", \"Amungkal\"],\n         [\"Ar\", \"Arab\"],\n         [\"Asm\", \"Asmat\"],\n         [\"Awy\", \"Awyu\"],\n         [\"Bg\", \"Bugis\"],\n         [\"BgM\", \"Bugis-Makassar\"],\n         [\"Bjr\", \"Banjar\"],\n         [\"Bk\", \"Biak\"],\n         [\"Bl\", \"Bali\"],\n         [\"Bld\", \"Belanda\"],\n         [\"Dn\", \"Dani\"],\n         [\"Bm\", \"Bima\"],\n         [\"Bn\", \"Benuaq\"],\n         [\"Brk\", \"Berik\"],\n         [\"Bsm\", \"Basemah\"],\n         [\"Bt\", \"Batak\"],\n         [\"Bz\", \"Bauzi\"],\n         [\"Cn\", \"Cina\"],\n         [\"Dm\", \"Denmark\"],\n         [\"Dam\", \"Damal\"],\n         [\"Dy\", \"Dayak\"],\n         [\"Ekg\", \"Ekari\"],\n         [\"Ff\", \"Fakfak\"],\n         [\"Gy\", \"Gayo\"],\n         [\"Ib\", \"Ibrani\"],\n         [\"Ing\", \"Inggris\"],\n         [\"It\", \"Italia\"],\n         [\"Jb\", \"Melayu Jambi\"],\n         [\"Jk\", \"Melayu Jakarta\"],\n         [\"Jm\", \"Jerman\"],\n         [\"Jp\", \"Jepang\"],\n         [\"Jw\", \"Jawa\"],\n         [\"Kal\", \"Kaili\"],\n         [\"Kh\", \"Kapuas Hulu\"],\n         [\"Klm\", \"Melayu Kalimantan\"],\n         [\"Km\", \"Kimaam\"],\n         [\"Kmr\", \"Kamoro\"],\n         [\"Kr\", \"Kaureh\"],\n         [\"Kul\", \"Kulawi\"],\n         [\"Kw\", \"Kawi\"],\n         [\"Lkp\", \"Lengkayap\"],\n         [\"Lmt\", \"Lematang\"],\n         [\"Lp\", \"Lampung\"],\n         [\"Lt\", \"Latin\"],\n         [\"Mal\", \"Melayu Malaysia\"],\n         [\"Md\", \"Melayu Medan\"],\n         [\"Mdr\", \"Madura\"],\n         [\"Mk\", \"Minangkabau\"],\n         [\"Mks\", \"Makassar\"],\n         [\"Mmk\", \"Mimika\"],\n         [\"Mn\", \"Minahasa\"],\n         [\"Mnd\", \"Melayu Manado\"],\n         [\"Mp\", \"Massenrengpulu\"],\n         [\"Mr\", \"Mandar\"],\n         [\"Mrd\", \"Bian Marind Deg\"],\n         [\"Mu\", \"Muna\"],\n         [\"My\", \"Muyu\"],\n         [\"Ni\", \"Nias\"],\n         [\"Nr\", \"Norwegia\"],\n         [\"Or\", \"Ormu\"],\n         [\"Par\", \"Parsi\"],\n         [\"Pl\", \"Pulo\"],\n         [\"Plb\", \"Palembang\"],\n         [\"Pp\", \"Papua\"],\n         [\"Pr\", \"Prancis\"],\n         [\"Prt\", \"Portugis\"],\n         [\"Pt\", \"Petapa\"],\n         [\"Ptk\", \"Putuk\"],\n         [\"Ram\", \"Rampi\"],\n         [\"Ri\", \"Melayu Riau\"],\n         [\"Rs\", \"Rusia\"],\n         [\"Sbw\", \"Sumbawa\"],\n         [\"Sd\", \"Sunda\"],\n         [\"Ss\", \"Sasak\"],\n         [\"Skt\", \"Sanskerta\"],\n         [\"Sky\", \"Sekayu\"],\n         [\"Sng\", \"Sangir\"],\n         [\"Sp\", \"Spanyol\"],\n         [\"Sr\", \"Sorong\"],\n         [\"Stn\", \"Sentani\"],\n         [\"Tbl\", \"Tombulu\"],\n         [\"Tl\", \"Toulour\"],\n         [\"Tld\", \"Talaud\"],\n         [\"Tlk\", \"Tolaki\"],\n         [\"Tns\", \"Minahasa Tonsea\"],\n         [\"Trj\", \"Toraja\"],\n         [\"Us\", \"Using\"],\n         [\"Wdm\", \"Wandamen\"],\n         [\"Wl\", \"Wolio\"],\n         [\"Wmn\", \"Wamena\"],\n         [\"Wrp\", \"Waropen\"],\n         [\"Hw\", \"Hawaii\"],\n         [\"Tsw\", \"Tswana\"],\n         [\"Gor\", \"Gorontalo\"],\n         [\"Pm\", \"Pamona\"],\n         [\"Tr\", \"Ternate\"],\n         [\"Tb\", \"Tobelo\"],\n         [\"Ab\", \"Abui\"],\n         [\"Mdl\", \"Modole\"],\n         [\"Sh\", \"Sahu\"],\n         [\"Mt\", \"Mentawai\"],\n         [\"Tbt\", \"Tobati\"],\n         [\"Me\", \"Moronene\"],\n         [\"Sa\", \"Serua\"],\n         [\"MAb\", \"Melayu Ambon\"],\n         [\"Su\", \"Sula\"],\n         [\"Bc\", \"Bacan\"],\n         [\"MkT\", \"Makeang Timur\"],\n         [\"Cl\", \"Culambacu\"],\n         [\"Bun\", \"Bunak\"],\n         [\"Smb\", \"Sumba\"],\n         [\"Ca\", \"Ciacia\"],\n         [\"Ka\", \"Kamang\"],\n         [\"Mg\", \"Manggarai\"],\n         [\"Kb\", \"Kambera\"],\n         [\"Sb\", \"Sabu\"],\n         [\"Kor\", \"Korea\"],\n         [\"Th\", \"Thai\"],\n         [\"Ky\", \"Karey\"],\n         [\"Kur\", \"Kur\"],\n         [\"Aln\", \"Alune\"],\n         [\"Kls\", \"Kulisusu\"],\n         [\"Kol\", \"Kola\"],\n         [\"Lh\", \"Luhu\"],\n         [\"Ht\", \"Hitu\"],\n         [\"MBl\", \"Melayu Belitung\"],\n         [\"BlM\", \"Bolaang Mongondow\"],\n         [\"Slw\", \"Seluwarsa\"],\n         [\"Kpr\", \"Melayu Kep. Riau\"],\n         [\"Wtb\", \"Wakatobi\"],\n         [\"Tur\", \"Turki\"],\n         [\"MKp\", \"Melayu Kupang\"],\n         [\"In\", \"India\"],\n         [\"Tsg\", \"Minahasa Tonsawang\"],\n         [\"Bo\", \"Boing\"],\n         [\"Eln\", \"Elnama\"],\n         [\"Btl\", \"Batuley\"],\n         [\"Ba\", \"Baun\"],\n         [\"Srm\", \"Seram\"],\n         [\"Moa\", \"Moa\"],\n         [\"Bh\", \"Bahau\"],\n         [\"Tj\", \"Tunjung\"],\n         [\"Ke\", \"Kenyah\"],\n         [\"Mar\", \"Marlasi\"],\n         [\"Psr\", \"Passer\"],\n         [\"Oi\", \"Oirata\"],\n         [\"Ylh\", \"Yalahatan\"],\n         [\"Gal\", \"Galela\"],\n         [\"Gn\", \"Gane\"],\n         [\"We\", \"Wemale\"],\n         [\"Wr\", \"Warry\"],\n         [\"Kei\", \"Kei\"],\n         [\"Let\", \"Letti\"],\n         [\"Bjo\", \"Bajo\"],\n         [\"MBa\", \"Melayu Bangka\"],\n         [\"Mj\", \"Mboja\"],\n         [\"Krc\", \"Kerinci\"]\n      ],\n      field: [\n         [\"\", \"-not set-\"],\n         [\"Adm\", \"Administrasi dan Kepegawaian\"],\n         [\"Anat\", \"Anatomi\"],\n         [\"Antr\", \"Antropologi\"],\n         [\"Ark\", \"Arkeologi\"],\n         [\"Ars\", \"Arsitektur\"],\n         [\"Astrol\", \"Astrologi\"],\n         [\"Astron\", \"Astronomi\"],\n         [\"Bakt\", \"Bakteriologi\"],\n         [\"Bio\", \"Biologi\"],\n         [\"Bot\", \"Botani\"],\n         [\"Bud\", \"Agama Buddha\"],\n         [\"Dag\", \"Perdagangan\"],\n         [\"Dem\", \"Demografi\"],\n         [\"Dik\", \"Pendidikan\"],\n         [\"Dirg\", \"Kedirgantaraan\"],\n         [\"Dok\", \"Kedokteran dan Fisiologi\"],\n         [\"Ek\", \"Ekonomi dan Keuangan\"],\n         [\"El\", \"Elektronika\"],\n         [\"Ent\", \"Entomologi\"],\n         [\"Far\", \"Farmasi dan Farmakologi\"],\n         [\"Fil\", \"Filsafat\"],\n         [\"Filol\", \"Filologi\"],\n         [\"Fis\", \"Fisika\"],\n         [\"Geo\", \"Geografi dan Geologi\"],\n         [\"Graf\", \"Grafika\"],\n         [\"Hid\", \"Hidrologi\"],\n         [\"Hidm\", \"Hidrometeorologi\"],\n         [\"Hin\", \"Agama Hindu\"],\n         [\"Hub\", \"Perhubungan\"],\n         [\"Huk\", \"Hukum\"],\n         [\"Hut\", \"Kehutanan\"],\n         [\"Idt\", \"Perindustrian dan Kerajinan\"],\n         [\"Ikn\", \"Perikanan\"],\n         [\"Isl\", \"Agama Islam\"],\n         [\"Kap\", \"Perkapalan\"],\n         [\"Kat\", \"Agama Katolik\"],\n         [\"Kes\", \"Kesehatan\"],\n         [\"Keu\", \"Keuangan\"],\n         [\"Kim\", \"Kimia\"],\n         [\"Kom\", \"Ilmu Komunikasi\"],\n         [\"Komp\", \"Komputer\"],\n         [\"Kris\", \"Agama Kristen\"],\n         [\"Lay\", \"Pelayaran\"],\n         [\"Ling\", \"Linguistik\"],\n         [\"Man\", \"Manajemen\"],\n         [\"Mat\", \"Matematika\"],\n         [\"Mek\", \"Mekanika\"],\n         [\"Met\", \"Meteorologi\"],\n         [\"Metal\", \"Metalurgi\"],\n         [\"Mik\", \"Mikologi\"],\n         [\"Mil\", \"Kemiliteran\"],\n         [\"Min\", \"Mineralogi\"],\n         [\"Mus\", \"Musik\"],\n         [\"Olr\", \"Olahraga\"],\n         [\"Pet\", \"Petrologi dan Migas\"],\n         [\"Pol\", \"Politik dan Pemerintahan\"],\n         [\"Psi\", \"Psikologi\"],\n         [\"Sas\", \"Sastra\"],\n         [\"Sen\", \"Kesenian\"],\n         [\"Sos\", \"Sosiologi\"],\n         [\"Stat\", \"Statistik\"],\n         [\"Tan\", \"Pertanian\"],\n         [\"Tas\", \"Tasawuf\"],\n         [\"Tek\", \"Teknik\"],\n         [\"Telekom\", \"Telekomunikasi\"],\n         [\"Terb\", \"Penerbangan\"],\n         [\"Tern\", \"Peternakan\"],\n         [\"Zool\", \"Zoologi\"],\n         [\"Gz\", \"Ilmu Gizi\"],\n         [\"Ekol\", \"Ekologi\"],\n         [\"Film\", \"Perfilman\"],\n         [\"Ft\", \"Fotografi\"],\n         [\"Geof\", \"Geofisika\"],\n         [\"Lgk\", \"Lingkungan\"],\n         [\"Osn\", \"Oseanografi\"],\n         [\"Oto\", \"Otomotif\"],\n         [\"Tbg\", \"Tata Boga\"],\n         [\"Tbs\", \"Tata Busana\"],\n         [\"Nanotek\", \"Nanoteknologi\"],\n         [\"Prm\", \"Pramuka\"],\n         [\"Tn\", \"Ilmu Tanah\"],\n         [\"Pang\", \"Ilmu Pangan\"],\n         [\"Hot\", \"Perhotelan\"],\n         [\"Pust\", \"Ilmu Perpustakaan dan Dokumentasi\"],\n         [\"Trp\", \"Transportasi\"],\n         [\"Trs\", \"Tata Rias\"],\n         [\"Pls\", \"Kepolisian\"],\n         [\"Pl\", \"Polisi\"],\n         [\"Mlt\", \"Mlt\"],\n         [\"Mtr\", \"Militer\"]\n      ],\n      shorttype: [\n         [\"\", \"-not set-\"],\n         [\"ak\", \"akronim\"],\n         [\"kp\", \"kependekan\"],\n         [\"sing\", \"singkatan\"]\n      ],\n      headwordtype: [\n         [\"\", \"Not set\"],\n         [\"berimbuhan\", \"berimbuhan\"],\n         [\"gabungan\", \"gabungan\"],\n         [\"idiom\", \"idiom\"],\n         [\"peribahasa\", \"peribahasa\"],\n         [\"varian\", \"varian\"],\n         [\"ungkapan\", \"ungkapan\"]\n      ],\n      newpos: [\n         [\"\", \"notSet\"],\n         [\"n\", \"pos_n\"],\n         [\"j\", \"pos_j\"],\n         [\"v\", \"pos_v\"],\n         [\"a\", \"pos_a\"],\n         [\"d\", \"pos_d\"],\n         [\"q\", \"pos_q\"],\n         [\"m\", \"pos_m\"],\n         [\"x\", \"pos_x\"]\n      ],\n      referral_type: [\n         [\"plain\", \"\u2192\"],\n         [\"see\", \"see\"]\n      ]\n   }\n}\n", "css": ".myEditorContentNode h1{\n   text-transform: none\n}\n.myEaditorContentNode .input-field{\n   margin-bottom: 0;\n}\n.errorMessageBar{\n   position: sticky;\n   top: 37px;\n   z-index: 100;\n}\nlabel{\n   white-space: nowrap;\n}\n.wrongLemmaWarning{\n   text-align: center;\n   margin-top: 10vh;\n   color: lightgray;\n   font-size: 50px;\n   text-transform: uppercase;\n}\n.headwordForm .displayFlex{\n   gap: 20px;\n}\n.headwordForm input[type=\"text\"]{\n   min-width: 220px;\n}\n.langToggle{\n   position: absolute;\n   right: 0;\n   top: 0;\n   cursor: pointer; \n   color: #000;\n   font-weight: bold;\n}\n.langToggle span{\n   color: grey;\n   font-weight: normal;\n}\n.langToggle span:hove{\n   text-decoration: underline;\n}\n.senseDefinition{\n   /*max-width: 300px;*/\n   flex: 1;\n }\n.exampleInput{\n   flex: 1;    \n}\n.homonym_number{\n   max-width: 121px;\n}\n.figurativeCheckbox{\n   min-width: 205px;\n}\n.senseNum{\n   position: absolute;\n   left: -25px;\n   font-size: 20px;\n   color: lightgray;\n}\n.candidateList{\n   max-height: 117px;\n   overflow: auto;\n   border: 1px solid lightgrey;\n}\n.candidateList .num{\n   min-width: 15px; \n   text-align: right;\n}\n.candidate:hover{\n   background-color: #fff9c4;\n}\n.removeSenseBtn{\n   position: absolute;\n   right: -50px;\n   top: 0px;\n}\n.fixLemmaContainer,\n.fixPosContainer{\n   min-height: 56px;\n}\n.referralTypeInputField{\n   max-width: 100px;\n}\n.referredHeadwordInputField{\n   max-width: 200px;\n}\n.moreInfoForm{\n   display: flex;\n   flex-wrap: wrap;\n   gap: 20px;\n}\n.moreInfoForm > div{\n   flex: 1 1 0px;\n   min-width: 160px;\n}\n.moreInfoForm .customValueToggleIcon{\n    border-radius: 50%;\n    padding: 5px; \n    margin-left: 5px;   \n}\n.moreInfoForm .showCustomValueInput .customValueToggleIcon{\n   background-color: #000000;\n   color: white;\n}\n.moreInfoForm .selectWithCustomValue input{\n   margin-bottom: 0;\n}\n.moreInfoForm .selectWithCustomValue:not(.showCustomValueInput) > input{\n   display: none\n}\n.moreInfoForm .selectWithCustomValue.showCustomValueInput .select-wrapper{\n   display: none\n}\n.alignStart{\n   align-items: flex-start;\n}"}, "flagging": {"flag_element": "", "flags": []}, "styles": {"css": ".titlingHeadword {\n   text-shadow: none;\n}\n.incompleteEntry .titlingHeadword {\n   color: white;\n   background-color: red;\n   padding: 0px 5px;\n   margin-left: 22px;\n}\n.titlingCheck {\n   color: green;\n   float: left;\n   margin-right: 10px;\n}\n.incompleteEntry .titlingCheck {\n   display: none;\n}\n.randomEntryList a{\n    max-width: calc(100% - 16px)!important;\n    display: inline-block!important;\n    white-space: nowrap!important;\n    overflow: hidden!important;\n}"}}