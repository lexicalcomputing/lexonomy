CREATE TABLE configs (id TEXT PRIMARY KEY, json TEXT);
INSERT INTO configs VALUES('editing','{	"xonomyMode": "nerd"}');
INSERT INTO configs VALUES('ident','{	"title": "Simple Monolingual Dictionary",	"blurb": "This is a simple dictionary of English, with only three entries, intended to demonstrate the capabilities of Lexonomy.","lang":"English"}');
INSERT INTO configs VALUES('publico','{	"public": false}');
INSERT INTO configs VALUES('kex','{"url": "https://app.sketchengine.eu/", "apiurl": "https://api.sketchengine.eu/bonito/run.cgi"}');
INSERT INTO configs VALUES('titling','{"headword": "headword"}');
INSERT INTO configs VALUES('xampl','{	"container": "example",	"template": "<example>$text</example>",	"markup": "h"}');
INSERT INTO configs VALUES('structure','{	"root": "entry",	"elements": {		"entry": {			"type": "chd",			"values": [],			"children": [				{					"name": "headword",					"min": "1",					"max": "1"				},				{					"name": "partOfSpeech",					"min": "0",					"max": "1"				},				{					"name": "sense",					"min": "1",					"max": "0"				}			],			"attributes": {}		},		"headword": {			"type": "txt",			"values": [],			"children": [],			"attributes": {}		},		"partOfSpeech": {			"type": "lst",			"values": [				{					"value": "n",					"caption": "noun"				},				{					"value": "v",					"caption": "verb"				},				{					"value": "adj",					"caption": "adjective"				}			],			"children": [],			"attributes": {}		},		"sense": {			"type": "chd",			"values": [],			"children": [				{					"name": "definition",					"min": "0",					"max": "1"				},				{					"name": "example",					"min": "0",					"max": "0"				}			],			"attributes": {}		},		"definition": {			"type": "txt",			"values": [],			"children": [],			"attributes": {}		},		"example": {			"type": "inl",			"values": [],			"children": [				{					"name": "h",					"min": "0",					"max": "0"				}			],			"attributes": {}		},		"h": {			"type": "txt",			"values": [],			"children": [],			"attributes": {}		}	}}');
INSERT INTO configs VALUES('xemplate','{        "entry": {                "shown": true,                "layout": "block"        },        "headword": {                "shown": true,                "layout": "inline",                "separation": "space",                "gutter": "",                "weight": "bold",                "slant": "",                "colour": "red"        },        "partOfSpeech": {                "shown": true,                "layout": "inline",                "separation": "space",                "gutter": "",                "weight": "",                "slant": "italic",                "colour": "green"        },        "sense": {                "shown": true,                "layout": "block",                "separation": "space",                "gutter": "sensenum1",                "weight": "",                "slant": "",                "colour": ""        },        "definition": {                "shown": true,                "layout": "block",                "separation": "space",                "gutter": "",                "weight": "",                "slant": "",                "colour": ""        },        "example": {                "shown": true,                "layout": "block",                "separation": "space",                "gutter": "disk",                "weight": "",                "slant": "italic",                "colour": "blue"        },        "h": {                "shown": true,                "layout": "inline",                "separation": "space",                "gutter": "",                "weight": "bold",                "slant": "",                "colour": ""        }}');
CREATE TABLE searchables (id INTEGER PRIMARY KEY AUTOINCREMENT, entry_id INTEGER REFERENCES entries (id) ON DELETE CASCADE, txt TEXT, level INTEGER);
INSERT INTO searchables VALUES(1,1,'able',1);
INSERT INTO searchables VALUES(2,3,'arm',1);
INSERT INTO searchables VALUES(3,2,'ask',1);
CREATE TABLE history (
    id             INTEGER  PRIMARY KEY AUTOINCREMENT,
    entry_id       INTEGER,
    [action]       TEXT,
    [when]         DATETIME,
    email          TEXT,
    nvh            TEXT,
    historiography TEXT
);
CREATE TABLE sub (id INTEGER PRIMARY KEY AUTOINCREMENT, parent_id INTEGER REFERENCES entries (id) ON DELETE CASCADE, child_id INTEGER REFERENCES entries (id) ON DELETE CASCADE);
CREATE TABLE entries (id INTEGER PRIMARY KEY AUTOINCREMENT, doctype TEXT, nvh TEXT, json JSON, title TEXT, sortkey TEXT, needs_resave BOOLEAN DEFAULT (0), needs_refresh BOOLEAN DEFAULT (0), needs_refac BOOLEAN DEFAULT (0));
INSERT INTO entries VALUES(1,'entry','entry:
  headword: able
  partOfSpeech: adj
  sense:
    definition: If someone is able to do something, they can do it.
    example: I''m busy tomorrow, so I won''t be able to see you.
  sense:
    definition: If a person is able, they are good or skillful at what they do.
    example: She is an able teacher.','','<span class=''headword''>able</span>','able',0,0,0);
INSERT INTO entries VALUES(2,'entry','entry:
  headword: ask
  partOfSpeech: v
  sense:
    definition: To look for an answer to a question.
    example: I need to ask you a question.
    example: I don''t know, ask your mother.
  sense:
    definition: To talk to someone to see if they will do something.
    example: She asked me to help her.
    example: We will have to ask for more money.','','<span class=''headword''>ask</span>','ask',0,0,0);
INSERT INTO entries VALUES(3,'entry','entry:
  headword: arm
  partOfSpeech: n
  sense:
    definition: One of the upper limbs, from shoulder to wrist.
    example: You have very long arms.
    example: My left arm hurts.
  sense:
    definition: A weapon.
    example: The arms dealer was arrested.','','<span class=''headword''>arm</span>','arm',0,0,0);
CREATE TABLE linkables (id INTEGER PRIMARY KEY AUTOINCREMENT, entry_id INTEGER REFERENCES entries (id) ON DELETE CASCADE, txt TEXT, element TEXT, preview TEXT);
CREATE INDEX search ON searchables (txt, level);
CREATE INDEX history_by_entry_id ON history (
    entry_id,
    "when"
);
CREATE INDEX history_by_email ON history (
    email,
    "when"
);
CREATE INDEX history_by_when ON history (
    "when"
);
CREATE INDEX history_by_action ON history (
    "action",
    "when"
);
CREATE INDEX sortkey ON entries (sortkey);
CREATE INDEX needs_re ON entries (needs_resave, needs_refresh, needs_refac);
