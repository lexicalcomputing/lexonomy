<dict-upload>
   <loading-overlay if={state.isUploading}/>
   <h1>Upload</h1>
   <div if={!state.isImporting && !state.isFinished}
         class="uploadForm">
      <div class="file-field input-field">
         <div class="btn">
            <span>Choose file</span>
            <input type="file"
                  id="file"
                  accept=".nvh,.xml"
                  onchange={onFileChange}>
            <div class="helper-text">Select file with entries. Supported types: .nvh, .xml</div>
         </div>
         <div class="file-path-wrapper">
            <input class="file-path validate"
                  type="text">
         </div>
      </div>
      <div class="mt-16 input-field">
         <input class="hwNode"
               type="text"
               value={state.headwordElement}
               oninput={onHeadwordElementInput}/>
         <label>Headword element</label>
         <div class="helper-text">Element name containing headword</div>
      </div>
      <div class="mt-8">
         <label>
            <input type="checkbox"
                  id="purge" />
            <span>Purge dictionary before upload</span>
         </label>
      </div>
      <div class="mt-8">
         <label class="checkbox">
            <input id="deduplicate"
                  type="checkbox"
                  checked="checked">
            <span>
               Deduplicate
                 <span class="hint tooltipped"
                     data-tooltip="Remove duplicities from the data. This may slow down the import.">
                  <i class="material-icons">help_outline</i>
              </span>
            </span>
         </label>
      </div>
      <!--div class="mt-8">
         <label class="checkbox">
            <input id="deduplicate"
                  type="checkbox"
                  checked="checked">
            <span>
               Create schema from the uploaded data
                 <span class="hint tooltipped"
                     data-tooltip="If checked, current schema will be replaced with new one, generated from the uploaded data.">
                  <i class="material-icons">help_outline</i>
              </span>
            </span>
         </label>
      </div-->
      <div class="mt-12">
         <button id="startImportBtn"
               class="waves-effect waves-light btn btn-primary disabled"
               onclick={onImportClick}
               id="startButton">
            <i class="material-icons left">file_upload</i>Start import
         </button>
      </div>
   </div>


   <div if={state.showProgress}>
      <template if={state.isImporting}>
         <h3>
            Importing entries...
         </h3>
      </template>
      <div if={state.infoMessage}
            classs="message messageInfo">
         <raw-html content={state.infoMessage}></raw-html>
      </div>
      <div if={state.errorMessage}
            class="message messageError">
         <raw-html content={state.errorMessage}></raw-html>
         <button class="btn btn-primary"
               onclick={onTryAgainClick}>
            try again
         </button>
      </div>
   </div>

   <script>
      export default {
         state: {
            file: null,
            headwordElement: null,
            isImporting: false,
            showProgress: false,
            errorMessage: "",
            infoMessage: ""
         },

         onBeforeUnmount(){
            this.state.timeoutHandle && clearTimeout(this.state.timeoutHandle)
            this.state.checkImportRequest && this.state.checkImportRequest.abort()
         },

         onFileChange(evt){
            this.state.file = evt.target.files[0]
            this.refreshStartImportBtnDisabled()
         },

         onHeadwordElementInput(evt){
            this.state.headwordElement = evt.target.value
            this.refreshStartImportBtnDisabled()
         },

         onTryAgainClick(){
            this.update({
               file: null,
               headwordElement: "",
               showProgress: false,
               isImporting: false,
               infoMessage: "",
               errorMessage: ""
            })
         },

         onImportClick() {
            var fd = new FormData()
            fd.append("filename", this.state.file)
            fd.append("purge", $("#purge").is(":checked"))
            fd.append("hwNode", this.state.headwordElement)
            //fd.append("generateSchema", $("#generateSchema").is(":checked")),
            fd.append("deduplicate", $("#deduplicate").is(":checked"))

            this.update({
               isImporting: true,
               showProgress: true,
               infoMessage: "Import started, please keep the window open."
            })
            this.store.importFile(fd)
                  .done(response => {
                     if (response.errors) {
                        this.state.infoMessage = "There were some errors during processing the uploaded file"
                     } else {
                        this.state.infoMessage = response.progressMessage
                        this.checkImportProgress(response.upload_file_path)
                     }
                     this.update()
                  })
         },

         checkImportProgress(upload_file_path){
            this.state.checkImportRequest = this.store.checkImportProgress(upload_file_path)
                  .done(response => {
                     clearTimeout(this.state.timeoutHandle)
                     if(response.error.length){
                        this.update({errorMessage: response.errors.join(", ")})
                     } else {
                        if(response.finished){
                           this.update({
                              isImporting: false,
                              isFinished: true,
                              infoMessage: ` <br/>Dictionary import finished. <a href="#${this.dictData.dictId}">See dictionary</a>`
                           })
                        } else {
                           this.state.timeoutHandle = setTimeout(this.checkImportProgress.bind(this, response.upload_file_path), 2000)
                        }
                     }
                  })
         },


         refreshStartImportBtnDisabled(){
            let disabled = !this.state.file
                  || !this.state.headwordElement
                  || this.state.isImporting
            $("#startImportBtn").toggleClass("disabled", disabled)
         }
      }
   </script>

   <style type="scss">
      .uploadForm{
         max-width: 400px;
      }
   </style>
</dict-upload>
