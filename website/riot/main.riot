<main class="main">
   <loading-overlay if={authData.isCheckingAuth || dictData.isSiteconfigLoading} fullscreen=1/>
   <app-header/>
   <div class="contentWrapper">
      <div if={!authData.isCheckingAuth && !dictData.isSiteconfigLoading}
            is={ state.content }
            class="container content row {['dict-edit'].includes(state.content) ? 'wideContainer' : ''}"
            token={state.token}
            main-sub-page={ state.subPage }></div>
   </div>
   <app-footer/>

   <style>
      .contentWrapper{
         position: relative;
      }
      .content{
         padding-left: 10px;
         min-height: 50vh;
      }
      .wideContainer{
         max-width: 1600px;
         width: 90vw;
      }
   </style>

   <script>
      export default {
         state: {
            content: '',
            subPage: 'login',
            token: ''
         },
         bindings: [["auth", "authChanged", "update"],
                    ["auth", "checkingAuthChanged", "onCheckingAuthChange"],
                    ["store", "dictionaryChanged", "update"]],

         onCheckingAuthChange(){
            this.update()
            if(!this.authData.authorized){
               route("#/")
            } else {
               this.store.loadDictlist()
            }
         },

         onMounted() {
            $.ajaxSetup({
               xhrFields: { withCredentials: true }
            })
            this.auth.checkAuthCookie()
            this.store.loadSiteconfig().always(this.update.bind(this))

            route('/api', () => {
               this.update({
                  subPage: '',
                  content: 'api'
               })
            })
            route('/e404', () => {
               this.update({
                  subPage: '',
                  content: 'e404'
               })
            })
            route('/opendictionaries', () => {
               this.update({
                  subPage: '',
                  content: 'open-dict-list'
               })
            })
            route('/docs/intro', () => {
               this.update({
                  subPage: '',
                  content: 'docs-intro'
               })
            })
            route('/createaccount/*', (token) => {
               this.update({
                  subPage: 'registerPassword',
                  content: 'main-page',
                  token: token
               })
            })
            route('/recoverpwd/*', (token) => {
               this.update({
                  subPage: 'forgotPassword',
                  content: 'main-page',
                  token: token
               })
            })
            route('/register', () => {
               this.update({
                  subPage: 'register',
                  content: 'main-page'
               })
            })
            route('/forgot', () => {
               this.update({
                  subPage: 'forgot',
                  content: 'main-page'
               })
            })
            route('/userprofile', () => {
               this.update({
                  subPage: 'userprofile',
                  content: 'main-page'
               })
            })
            route('/make', () => {
               this.update({
                  subPage: 'new',
                  content: 'main-page'
               })
            })
            route('/*/edit', (dictId) => {
               this.store.changeDictionary(dictId)
               this.update({content: 'dict-edit'})
            })
            route('/*/edit/*/*/*', (dictId, doctype, entryId, mode) => {
               this.store.changeDictionary(dictId)
               this.store.changeEntry(entryId)
               this.store.changeDoctype(doctype)
               this.dictData.mode = mode
               this.update({content: 'dict-edit'})
            })
            route('/*/edit/*', (dictId, doctype) => {
               this.store.changeDictionary(dictId)
               this.store.changeDoctype(doctype)
               this.update({content: 'dict-edit'})
            })
            route('/*/([0-9]*)$', (dictId, entryId) => {
               this.store.changeDictionary(dictId)
               this.store.changeEntry(entryId)
               this.update({content: 'dict-public-entry'})
            })
            route('/*/config/*', (dictId, configId) => {
               this.store.changeDictionary(dictId)
               this.update({
                  content: 'dict-config-' + configId
               })
            })
            route('/*/config', (dictId) => {
               this.store.changeDictionary(dictId)
               this.update({content: 'dict-config'})
            })

            route('/*/links', (dictId) => {
               this.store.changeDictionary(dictId)
               this.update({content: 'dict-links'})
            })
            route('/*/download', (dictId) => {
               this.store.changeDictionary(dictId)
               this.update({content: 'dict-download'})
            })
            route('/*/upload', (dictId) => {
               this.store.changeDictionary(dictId)
               this.update({content: 'dict-upload'})
            })
            route('/*', (dictId) => {
               this.store.changeDictionary(dictId)
               this.update({content: 'dict-public'})
            })
            route('/', () => {
               this.update({
                  subPage: 'login',
                  content: 'main-page'
               })
            })
            route.start(true)
         }
      }
   </script>
</main>
