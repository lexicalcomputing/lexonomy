<main class="main">
   <loading-overlay if={state.isLoading} fullscreen=1/>
   <modal-dialog/>
   <app-header/>
   <div class="contentWrapper">
      <div if={!state.isLoading}
            is={ state.content }
            class="container content row {['dict-edit', 'dict-public-entry', 'dict-public'].includes(state.content) ? 'wideContainer' : ''}"
            token={state.token}
            main-sub-page={ state.subPage }></div>
   </div>
   <app-footer/>

   <style>
      .contentWrapper{
         position: relative;
      }
      .content{
         padding-left: 10px;
         min-height: 50vh;
      }
      .wideContainer{
         max-width: 1600px;
         width: 90vw;
      }
   </style>

   <script>
      export default {
         state: {
            isLoading: true,
            content: '',
            subPage: 'login',
            token: '',
            isShowingDictionary: false
         },
         bindings: [["auth", "authChanged", "onAuthChanged"],
                    ["auth", "checkingAuthChanged", "onCheckingAuthChange"],
                    ["store", "dictionaryChanged", "update"]],

         onAuthChanged(){
            if(route.query().next){
               window.location.href = decodeURIComponent(route.query().next)
            } else {
               this.update()
            }
         },

         onCheckingAuthChange(){
            this.update()
            if(this.authData.authorized){
               this.store.loadDictionaryList()
            }
            route.start()
            route.exec()
         },

         goTo(content, subPage, storeParams, updateParams){
            if(!this.authData.authorized && this.needAuthorization(content, subPage)){
               this.update({
                  content: 'unauthorized',
                  subPage: '',
                  isShowingDictionary: false
               })
            } else {
               if(!storeParams){
                  this.update(Object.assign({
                     content: content,
                     subPage: subPage || '',
                     isShowingDictionary: false
                  }, updateParams || {}))
               } else {
                  this.store.open(...storeParams)
                  let query = route.query()
                  this.store.changeSearchParams({
                     searchtext: decodeURIComponent(query.s || ""),
                     modifier: query.m
                  })
                  if(this.store.data.isDictionaryLoading){
                     this.store.one("isDictionaryLoadingChanged", this.checkAccessAndOpenPage.bind(this, content, subPage, updateParams))
                  } else{
                     this.checkAccessAndOpenPage(content, subPage, updateParams)
                  }
               }
            }
         },

         checkAccessAndOpenPage(content, subPage, updateParams){
            if(!this.store.data.userAccess && !this.store.data.public){
               this.update({
                  content: "unauthorized",
                  subPage: '',
                  isShowingDictionary: false
               })
            } else {
               this.update(Object.assign({
                  content: content,
                  subPage: subPage || '',
                  isShowingDictionary: true
               }, updateParams || {}))
            }
         },

         needAuthorization(content, subPage){
            if(['e404', 'open-dict-list', 'dict-public', 'dict-public-entry', 'api'].includes(content)
                  || content == 'main-page' && !['new', 'userprofile'].includes(subPage)){
               return false
            }
            return true
         },

         routeParser(path, filter){
            // remove trailing slashes
            path = path.replace(/\/+$/, "")
            var f = filter
               .replace(/\?/g, '\\?')
               .replace(/\*/g, '([^/?#]+?)')
               .replace(/\.\./, '.*')
            var re = new RegExp(("^" + f + "$"))
            var args = path.match(re)

            if (args) {
               return args.slice(1)
            }
         },

         onBeforeMount() {
            $.ajaxSetup({
               xhrFields: { withCredentials: true }
            })
            route.parser(undefined, this.routeParser)
            this.auth.checkAuthCookie()
            this.store.loadSiteconfig().always(this.update.bind(this))
            let appUpdater = new window.AppUpdaterClass({
               url: window.window.API_URL + 'version.txt',
               windowVersionKey: 'LEXONOMY_VERSION'
            })

            route('/api', () => {
               this.goTo('api')
            })
            route('/e404', () => {
               this.goTo('e404')
            })
            route('unauthorized', () => {
               this.goTo('unauthorized')
            })
            route('/opendictionaries', () => {
               this.goTo('open-dict-list')
            })
            route('/createaccount/*', (token) => {
               this.goTo('main-page', 'registerPassword', '', {token: token})
            })
            route('/recoverpwd/*', (token) => {
               this.goTo('main-page', 'forgotPassword', '', {token: token})
            })
            route('/register', () => {
               this.goTo('main-page', 'register')
            })
            route('/forgot', () => {
               this.goTo('main-page', 'forgot')
            })
            route('/userprofile', () => {
               this.goTo('main-page', 'userprofile')
            })
            route('/make', () => {
               this.goTo('main-page', 'new')
            })
            route('/*/edit(\?*){0,1}', (dictId) => {
               this.goTo('dict-edit', '', [dictId])
            })
            route('/*/edit/*(\?*){0,1}', (dictId, doctype) => {
               this.goTo('dict-edit', '', [dictId, doctype])
            })
            route('/*/edit/*/*/*(\?*){0,1}', (dictId, doctype, entryId, mode) => {
               this.goTo('dict-edit', '', [dictId, doctype, entryId, mode])
            })
            route('/*/([0-9]+)(\?*){0,1}', (dictId, entryId) => {
               this.goTo('dict-public-entry', '', [dictId, null, entryId])
            })
            route('/*/config/*', (dictId, configId) => {
               this.goTo('dict-config-' + configId, '', [dictId])
            })
            route('/*/config', (dictId) => {
               this.goTo('dict-config', '', [dictId])
            })
            route('/*/links', (dictId) => {
               this.goTo('dict-links', '', [dictId])
            })
            route('/*/download', (dictId) => {
               this.goTo('dict-download', '', [dictId])
            })
            route('/*/upload', (dictId) => {
               this.goTo('dict-upload', '', [dictId])
            })
            route('/admin/users', (dictId) => {
               this.goTo('admin-users')
            })
            route('/admin/dicts', (dictId) => {
               this.goTo('admin-dicts')
            })
            route('/*', (dictId) => {
               this.goTo('dict-public', '', [dictId])
            })
            route('/(\?*){0,1}', () => {
               this.goTo('main-page', 'login')
            })
         },

         onBeforeUpdate(){
            if(this.state.content == "unauthorized"){
               this.store.resetDictionary()
            }
            this.state.isLoading = this.authData.isCheckingAuth
                  || this.dictData.isSiteconfigLoading
                  || (this.state.isShowingDictionary && this.dictData.isDictionaryLoading)
         }
      }
   </script>
</main>
