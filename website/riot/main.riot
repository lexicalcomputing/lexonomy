<main class="main">
   <loading-overlay if={state.isLoading} fullscreen=1/>
   <modal-dialog/>
   <app-header page={state.page}/>
   <div class="contentWrapper">
      <loading-overlay if={dictData.isDictionaryLoading}/>
      <div if={!state.isLoading }
            is={ state.page }
            class="container content wideContainer row"
            token={state.token}></div>
   </div>
   <app-footer/>

   <style>
      .contentWrapper{
         position: relative;
      }
      .content{
         padding-left: 10px;
         min-height: 50vh;
      }
      .wideContainer{
         max-width: 1600px;
         width: 90vw;
      }
   </style>

   <script>
      export default {
         state: {
            isLoading: true,
            page: '',
            token: ''
         },
         bindings: [["auth", "authChanged", "onAuthChanged"],
                    ["auth", "checkingAuthChanged", "onCheckingAuthChange"],
                    ["store", "isDictionaryLoadingChanged", "update"],
                    ["store", "dictionaryChanged", "update"]],


         onBeforeMount() {
            $.ajaxSetup({
               xhrFields: { withCredentials: true }
            })
            route.parser(undefined, this.routeParser)
            this.auth.checkAuthCookie()
            this.store.loadSiteconfig().always(() => {
               this.update()
               this.checkConsentAndShowConsentDialog()
            })
            let appUpdater = new window.AppUpdaterClass({
               url: window.window.API_URL + 'version.txt',
               windowVersionKey: 'LEXONOMY_VERSION'
            })
            this.setFontSizeFromCookies()

            route('/api', () => {
               this.goTo('api')
            })
            route('/e404', () => {
               this.goTo('e404')
            })
            route('/home', () => {
               this.goTo('login')
            })
            route('/login', () => {
               this.goTo('login')
            })
            route('unauthorized', () => {
               this.goTo('unauthorized')
            })
            route('/opendictionaries', () => {
               this.goTo('open-dictionaries')
            })
            route('/createaccount/*', (token) => {
               this.goTo('register-password', '', {token: token})
            })
            route('/recoverpwd/*', (token) => {
               this.goTo('forgot-password', '', {token: token})
            })
            route('/register', () => {
               this.goTo('register')
            })
            route('/forgot', () => {
               this.goTo('forgot')
            })
            route('/user-profile', () => {
               this.goTo('user-profile')
            })
            route('/make', () => {
               this.goTo('new-dictionary')
            })
            route('/*/edit(\?*){0,1}', (dictId) => {
               this.goTo('dict-edit', [dictId])
            })
            route('/*/edit/*(\?*){0,1}', (dictId, doctype) => {
               this.goTo('dict-edit', [dictId, doctype])
            })
            route('/*/edit/*/*/*(\?*){0,1}', (dictId, doctype, entryId, mode) => {
               this.goTo('dict-edit', [dictId, doctype, entryId, mode])
            })


            //route('/*/edit-new(\?*){0,1}', (dictId) => {
            //   this.goTo('dict-edit-new', '', [dictId])
            //})
            //route('/*/edit-new/*(\?*){0,1}', (dictId, doctype) => {
            //   this.goTo('dict-edit-new', '', [dictId, doctype])
            //})
            //route('/*/edit-new/*/*/*(\?*){0,1}', (dictId, doctype, entryId, mode) => {
            //   this.goTo('dict-edit-new', '', [dictId, doctype, entryId, mode])
            //})

            route('/*/([0-9]+)(\?*){0,1}', (dictId, entryId) => {
               this.goTo('dict-public-entry', [dictId, null, entryId])
            })
            route('/*/config/*', (dictId, configId) => {
               this.goTo('dict-config-' + configId, [dictId])
            })
            route('/*/config', (dictId) => {
               this.goTo('dict-config', [dictId])
            })
            route('/*/links', (dictId) => {
               this.goTo('dict-links', [dictId])
            })
            route('/*/download', (dictId) => {
               this.goTo('dict-download', [dictId])
            })
            route('/*/upload', (dictId) => {
               this.goTo('dict-upload', [dictId])
            })
            route('/admin/users/add', (dictId) => {
               this.goTo('admin-users-add')
            })
            route('/admin/users', (dictId) => {
               this.goTo('admin-users')
            })
            route('/admin/dicts', (dictId) => {
               this.goTo('admin-dicts')
            })
            route('/*', (dictId) => {
               this.goTo('dict-public', [dictId])
            })
            route('/(\?*){0,1}', () => {
               if(this.authData.authorized){
                  this.goTo('dictionaries')
               } else {
                  this.goTo('login')
               }
            })
         },

         onBeforeUpdate(){
            if(this.state.page == "unauthorized"){
               this.store.resetDictionary()
            }
            this.state.isLoading = this.authData.isCheckingAuth
                  || this.dictData.isSiteconfigLoading
            this.dictData.actualPage = this.state.page
         },

         onAuthChanged(){
            if(route.query().next){
               window.location.href = decodeURIComponent(route.query().next)
            } else {
               this.update()
            }
         },

         onCheckingAuthChange(){
            this.update()
            if(this.authData.authorized){
               this.store.loadDictionaryList()
               this.checkConsentAndShowConsentDialog()
            }
            route.start()
            route.exec()
         },

         goTo(page, storeParams, updateParams){
            if(!this.authData.authorized && this.needAuthorization(page)){
               this.update({
                  page: 'unauthorized'
               })
            } else {
               if(!storeParams){
                  this.update(Object.assign({
                     page: page
                  }, updateParams || {}))
               } else {
                  this.store.open(...storeParams)
                  let query = route.query()
                  this.store.changeSearchParams({
                     tab: query.t,
                     searchtext: decodeURIComponent(query.s || ""),
                     modifier: query.m,
                     advanced_query: decodeURIComponent(query.q || "")
                  })
                  if(this.store.data.isDictionaryLoading){
                     this.store.one("isDictionaryLoadingChanged", this.checkAccessAndOpenPage.bind(this, page, updateParams))
                  } else{
                     this.checkAccessAndOpenPage(page, updateParams)
                  }
               }
            }
         },

         checkAccessAndOpenPage(page, updateParams){
            if(this.hasUserAccessToThePage(page)){
               this.update(Object.assign({
                  page: page
               }, updateParams || {}))
            } else {
               this.update({
                  page: "unauthorized"
               })
            }
         },

         hasUserAccessToThePage(page){
            let uA = this.store.data.userAccess
            if(this.authData.isAdmin
               || !this.needAuthorization()
               || this.store.data.public
               || (page == "dict-download" && uA.canDownload)
               || (page == "dict-upload" && uA.canUpload)
               || (page.startsWith("dict-public"))
               || (page.startsWith("dict-edit")/* && (uA.canEdit)*/)
               || (page.startsWith("dict-links") && (uA.canEdit))
               || (page.startsWith("dict-config") && (uA.canConfig || uA.canUpload || uA.canDownload))){
               return true
            }
            return false
         },

         needAuthorization(page){
            return !['e404', 'open-dictionaries', 'dict-public', 'dict-public-entry',
               'api', 'login', 'register', 'register-password', 'forgot',
               'forgot-password'].includes(page)
         },

         checkConsentAndShowConsentDialog(){
            if(this.authData.authorized
                     && this.dictData.siteconfig
                     && this.dictData.siteconfig.consent
                     && this.dictData.siteconfig.consent.terms
                     && !this.authData.consent){
               window.modal.open({
                  tag: "user-consent",
                  showCloseButton: false,
                  dismissible: false
               })
            }
         },

         routeParser(path, filter){
            // remove trailing slashes
            path = path.replace(/\/+$/, "")
            var f = filter
               .replace(/\?/g, '\\?')
               .replace(/\*/g, '([^/?#]+?)')
               .replace(/\.\./, '.*')
            var re = new RegExp(("^" + f + "$"))
            var args = path.match(re)

            if (args) {
               return args.slice(1)
            }
         },

         setFontSizeFromCookies(){
            let size = window.getFontSizeFromCookies()
            if(size){
               $("html").css("font-size", size + "px")
            }
         }
      }
   </script>
</main>
