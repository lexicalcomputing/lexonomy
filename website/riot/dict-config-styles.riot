<dict-config-styles>
   <loading-overlay if={state.isBusy}/>
   <h1 class="pageTitle">Lexonomy styling</h1>
   <dict-configuration-issues config-id="styles"/>
   <div class="helper-text mt-2 mb-12">
      You can change the appearance of Lexonomy for this dictionary. To change entry style, please, go to <a href="#/{dictData.dictId}/config/formatting">Entry formatting</a>.
   </div>
   <div class="cssCode input-field mb-12">
      <label for="editor_css">CSS</label>
      <div id="editorCSS"
            onkeydown={onKeyDown}></div>
      <div id="codeStatus"
            class="displayFlex">
         <small class="ml-auto grey-text">Ctrl+s or âŒ˜+s to save</small>
      </div>
   </div>

   <dict-config-buttons save-data={save}/>

   <script>
      export default{
         state: {
            isBusy: true,
            customCss: null
         },

         onMounted(){
            this.state.customCss = this.dictData.config.styles.css
            this.state.customCss && this.refreshCustomStyles()
            window.loadScript("bundle.codemirror.js")
                  .then(() => {
                     this.update({isBusy: false})
                     this.editor = new window.CodeMirror.EditorView({
                        extensions: [window.CodeMirror.basicSetup,
                              window.CodeMirror.css(),
                              window.CodeMirror.EditorView.updateListener.of((v) => {
                                 v.viewportChanged && this.onCustomCssUpdate()
                              })],
                        parent: document.getElementById("editorCSS")
                     })
                     this.editor.dispatch({changes: {from: 0, insert: this.state.customCss}})
                     this.editor.focus()
                  })
         },

         onBeforeUnmount(){
            window.CustomStyles.remove("customDictionaryStyle")
         },

         onCustomCssUpdate(){
            this.state.customCss = this.editor.state.doc.toString()
            this.refreshCustomStyles()
         },

         onKeyDown(evt){
            if(evt.keyCode == 83 && (evt.ctrlKey || evt.metaKey)){
               evt.preventDefault()
               this.save()
            }
         },

         refreshCustomStyles(){
            window.CustomStyles.add("customDictionaryStyle", this.state.customCss)
         },

         save(){
            this.update({isBusy: true})
            this.store.updateDictionaryConfig("styles", {
               css: this.state.customCss
            })
                  .always(response => {
                     this.update({isBusy: false})
                  })
         }
      }
   </script>

   <style>
      #codeStatus{
         position: sticky;
         bottom: 0px;
         right: 1px;
         left: 1px;
         background-color: #dfdfdf;
         padding: 3px 8px;
         margin-bottom: 5px;
         align-items: center;
      }
   </style>
</dict-config-styles>
