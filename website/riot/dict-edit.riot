<dict-edit>
   <loading-overlay if={dictData.isDictionaryListLoading || dictData.isDictionaryLoading}/>
   <h1 class="header">
      <span class="entryListMenuButton">
         <button class="btn sidenav-trigger btn-floating pulse"
               data-target="entryListSidenav">
            <i class="material-icons">menu</i>
         </button>
      </span>
      { dictData.title }
      <span class="totalEntries">total {dictData.entryCount} entries</span>
   </h1>
   <template if={dictData.isDictionaryLoaded && !dictData.isDictionaryListLoading}>
      <div if={ dictData.doctypes.length > 1 }
            class="doctypes">
         <ul class="tabs">
            <li each={ type in dictData.doctypes }
                  class="tab col s2 {type == dictData.doctype ? 'active' : ''}">
               <a onclick={ doChangeDoctype.bind(this, type) }>{ type }</a>
            </li>
         </ul>
      </div>
      <div id="dictEditContainer">
         <div class="positionRelative">
            <entry-list/>
            <button class="btn btn-floating white toggleSidenavButton"
                  onclick={onToggleSidenavClick}>
               <i class="material-icons grey-text">
                  keyboard_arrow_left
               </i>
            </button>
         </div>
         <div class="resizeHandle"
               onmousedown={onResizeHandleMouseDown}></div>
         <div class="rightPanel">
            <div if={state.showQueryBuilder}
                  class="advancedQueryBuilderWrapper block pl-6 pr-6">
               <advanced-query-builder query={state.query}/>
            </div>
            <nvh-editor if={!state.showQueryBuilder}/>
         </div>
      </div>
   </template>


   <script>
      export default {
         bindings: [["store", "dictionaryListLoadingChanged", "update"],
                    ["store", "entryIdChanged", "onEntryIdChanged"],
                    ["store", "toggleQueryBuilder", "onToggleQueryBuilder"]],

         state: {
            isMobile: false,
            mousePos: null,
            timer: null,
            showQueryBuilder: false
         },

         onMounted(){
            document.addEventListener('keydown', this.onDocumentKeyDown)
            window.addEventListener('resize', this.onResizeDebounced)
            this.refreshEntryListMenu()
            setTimeout(() => {$(".sidenav-trigger").removeClass("pulse")}, 3000)

         },

         onUpdated() {
            if($('#entryListSidenav')[0] && !M.Sidenav.getInstance($('#entryListSidenav')[0])){
               this.refreshEntryListMenu()
            }
         },

         onBeforeUnmount(){
            document.removeEventListener('keydown', this.onDocumentKeyDown)
            window.removeEventListener('resize', this.onResizeDebounced)
         },

         onEntryIdChanged(){
            this.closeSidenav()
         },

         onToggleQueryBuilder(show){
            this.update({showQueryBuilder: typeof show == "undefined" ? !this.state.showQueryBuilder : show})
         },

         doChangeDoctype(newdoctype) {
            if (newdoctype != this.dictData.doctype) {
               this.dictData.search.searchtext = ""
               this.dictData.search.modifier = "start"
               this.dictData.search.advanced_query = ""
               route(this.dictData.dictId + "/edit/" + newdoctype)
               let request = this.store.loadEntryList()
               request && request.done(() => {
                     if(this.dictData.entryList.length){
                        this.store.changeEntryId(this.dictData.entryList[0].id)
                     } else {
                        $("#container").html("").addClass("empty")
                        Screenful.Editor.updateToolbar()
                     }
                  })
               this.update()
            }
         },

         onToggleSidenavClick(evt){
            $("#dictEditContainer", this.root).toggleClass("hideSideMenu")
         },

         onDocumentKeyDown(evt){
            if((evt.ctrlKey || evt.metaKey) && evt.altKey){
               if(evt.keyCode == 37){  // left
                  this.state.isMobile && this.openSidenav()
                  document.getElementById("container").blur()
               } else if(evt.keyCode == 39){  // right
                  this.state.isMobile && this.closeSidenav()
                  $("#container").focus()
               } else if(evt.keyCode == 38){  // up
                  let previousEntry = this.dictData.entryList[this.dictData.entryList.findIndex(e => e.id == this.dictData.entryId) - 1]
                  previousEntry && this.store.changeEntryId(previousEntry.id)
               } else if(evt.keyCode == 40){  // down
                  let nextEntry = this.dictData.entryList[this.dictData.entryList.findIndex(e => e.id == this.dictData.entryId) + 1]
                  nextEntry && this.store.changeEntryId(nextEntry.id)
               }
            }
         },

         onDocumentMouseUp(){
            document.removeEventListener("mousemove", this.resizeColumn, false)
            document.removeEventListener("mouseup", this.onDocumentMouseUp, false)
            $("body").css("user-select", "")
            $(".entryListContainer").css("transition", "")
         },

         onResizeHandleMouseDown(evt){
            this.state.mousePos = evt.x
            document.addEventListener("mouseup", this.onDocumentMouseUp, false)
            document.addEventListener("mousemove", this.resizeColumn, false)
            $("body").css("user-select", "none")
            $(".entryListContainer").css("transition", "unset")
         },

         resizeColumn(evt){
            const distance = evt.x - this.state.mousePos
            this.state.mousePos = evt.x
            let leftColWidth = $(".entryListContainer").width()
            let width = Math.max(180, leftColWidth + distance)
            $(".entryListContainer").css("width", width + "px")
         },

         onResizeDebounced(){
            this.state.timer && clearTimeout(this.state.timer)
            this.state.timer = setTimeout(() => {
                clearTimeout(this.state.timer)
                this.refreshEntryListMenu()
            }, 200)
         },

         closeSidenav(){
            let sidenav = M.Sidenav.getInstance($('#entryListSidenav')[0])
            sidenav && sidenav.close()
         },

         openSidenav(){
            let sidenav = M.Sidenav.getInstance($('#entryListSidenav')[0])
            sidenav && sidenav.open()
         },

         refreshEntryListMenu(){
            let isMobile = $(window).width() < 900
            this.state.isMobile = isMobile
            $(this.root).toggleClass("isMobile", isMobile)
            let sidenav = $("#entryListSidenav")
            sidenav.toggleClass("sidenav", isMobile)
            if(isMobile){
               sidenav.css("transform", "")
               if(sidenav[0]
                  && this.state.isMobile
                  && !M.Sidenav.getInstance(sidenav[0])){
                  sidenav.sidenav()
               }
            } else {
               sidenav.css("transform", "unset")
            }
         }
      }
   </script>

   <style type="scss">
      #dictEditContainer{
         display: flex;
         min-height: calc(100vh - 295px); // header + footer
      }
      #dictEditContainer .sidenav{
         padding-bottom: 0;
      }
      .header{
         margin: 0;
      }
      .totalEntries{
         font-size: 0.85rem;
         color: #b8b8b8;
         margin-left: 1.3rem;
         text-transform: none;
      }
      li > span {
         white-space: nowrap;
      }
      .resizeHandle{
         cursor: ew-resize;
         width: 5px;
         min-height: 100%;
         background-color: whitesmoke;
         margin: 0 10px;
      }
      .resizeHandle:hover{
         background-color: #cfcfcf;
      }
      .rightPanel{
         min-width: 500px;
         flex: 1;
      }
      .entryListMenuButton{
         margin-right: 10px;
         display: none;
         right: unset;
         left: 23px;
      }
      .toggleSidenavButton{
         position: absolute;
         right: -33px;
         bottom: 10px;
         box-shadow: 0 2px 2px 0 rgba(0,0,0,0.14), 0 3px 1px -2px rgba(0,0,0,0.12), 0 1px 5px 0 rgba(0,0,0,0.2);
         i{
            transition: transform 0.5s;
         }
      }
      .advancedQueryBuilderWrapper{
         background-color: #fafafa;
         padding: 20px 30px;
      }
      :host:not(.isMobile){
         .hideSideMenu{
            .entryListContainer{
               width: 0!important;
               overflow: hidden;
            }
            .resizeHandle{
               max-width: 0;
            }
            .toggleSidenavButton{
               i{
                  transform: rotate(180deg);
               }
            }
         }
      }
      :host.isMobile{
         padding-left: 0;
         .entryListContainer{
            width: min(400px, 85vw)!important;
         }
         .entryListMenuButton{
            display: inline-block;
         }
         .resizeHandle{
            display: none;
         }
         .entry-list {
            max-height: calc(100vh - 170px);
         }
         .toggleSidenavButton{
            display: none;
         }
         dict-entry-filter{
            padding: 10px;
         }
         dict-entry-filter .filterForm{
            flex-direction: column;
         }
         dict-entry-filter .filterForm .searchBox{
            width: auto;
         }
      }
   </style>
</dict-edit>

