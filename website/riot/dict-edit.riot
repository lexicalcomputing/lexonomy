<dict-edit>
   <loading-overlay if={dictData.isDictionaryLoading}/>
   <h1 class="pageTitle">
      <span class="entryListMenuButton">
         <button class="btn sidenav-trigger btn-floating pulse"
               data-target="entryListSidenav">
            <i class="material-icons">menu</i>
         </button>
      </span>
      <a href="#{dictData.dictId}"
            class="dictionaryTitle">
         {dictData.title}
      </a>
      <span class="totalEntries">total {window.Formatter.num(dictData.entryCount)} entries</span>
   </h1>
   <template if={dictData.isDictionaryLoaded}>
      <div if={ dictData.doctypes.length > 1 }
            class="doctypes">
         <ul class="tabs">
            <li each={ type in dictData.doctypes }
                  class="tab col s2 {type == dictData.doctype ? 'active' : ''}">
               <a onclick={ doChangeDoctype.bind(this, type) }>{ type }</a>
            </li>
         </ul>
      </div>
      <div id="dictEditContainer">
         <div class="positionRelative">
            <entry-list/>
            <button class="btn btn-floating white toggleSidenavButton"
                  onclick={onToggleSidenavClick}>
               <i class="material-icons grey-text">
                  keyboard_arrow_left
               </i>
            </button>
         </div>
         <div class="resizeHandle"
               onmousedown={onResizeHandleMouseDown}></div>
         <div class="rightPanel">
            <div if={state.showQueryBuilder}
                  class="advancedQueryBuilderWrapper block pl-6 pr-6">
               <advanced-query-builder query={state.query}/>
            </div>
            <nvh-editor if={!state.showQueryBuilder}/>
         </div>
      </div>
      <template if={dictData.config.publico.public}>
         <div class="divider"></div>
         <div if={dictData.licence}
               class="section right grey-text mr-2">
            Licence:
            <span class="mr-2">
               {dictData.licence.toUpperCase()}
            </span>
            <a if={dictData.siteconfig.licences[dictData.licence]}
                  href={dictData.siteconfig.licences[dictData.licence].url}
                  class="verticalMiddle"
                  target="_blank">
               <img src="{dictData.siteconfig.licences[dictData.licence].icon}">
            </a>
         </div>
      </template>
   </template>


   <script>
      export default {
         bindings: [["store", "dictionaryListLoadingChanged", "update"],
                    ["store", "entryIdChanged", "onEntryIdChanged"],
                    ["store", "toggleQueryBuilder", "onToggleQueryBuilder"],
                    ["store", "entryListChanged", "update"]],

         MAX_ENTRY_LIST_WIDTH: 800,
         MIN_ENTRY_LIST_WIDTH: 250,

         state: {
            isMobile: false,
            mousePos: null,
            timer: null,
            showQueryBuilder: false,
            focus: null
         },

         onMounted(){
            document.addEventListener('keydown', this.onDocumentKeyDown)
            document.addEventListener('mouseup', this.onDocumentMouseUp)
            window.addEventListener('resize', this.onResizeDebounced)
            window.addEventListener('scroll', this.refreshEntryListMenuHeight)
            this.refreshEntryListMenu()
            setTimeout(() => {$(".sidenav-trigger").removeClass("pulse")}, 3000)
         },

         onUpdated() {
            if($('#entryListSidenav')[0] && !M.Sidenav.getInstance($('#entryListSidenav')[0])){
               this.refreshEntryListMenu()
            }
            this.refreshEntryListMenuHeight()
         },

         onBeforeUnmount(){
            document.removeEventListener('keydown', this.onDocumentKeyDown)
            document.removeEventListener('mousedown', this.onDocumentMouseUp)
            window.removeEventListener('resize', this.onResizeDebounced)
            window.removeEventListener('scroll', this.refreshEntryListMenuHeight)
         },

         onEntryIdChanged(){
            this.closeSidenav()
         },

         onToggleQueryBuilder(show){
            this.update({showQueryBuilder: show ?? !this.state.showQueryBuilder})
            if(this.state.isMobile){
               let sidenav = M.Sidenav.getInstance($('#entryListSidenav')[0])
               if(this.state.showQueryBuilder){
                  sidenav.close()
               } else {
                  sidenav.open()
               }
            }
         },

         doChangeDoctype(newdoctype) {
            if (newdoctype != this.dictData.doctype) {
               this.dictData.search.searchtext = ""
               this.dictData.search.modifier = "start"
               this.dictData.search.advanced_query = ""
               route(this.dictData.dictId + "/edit/" + newdoctype)
               let request = this.store.loadEntryList()
               request && request.done(() => {
                     if(this.dictData.entryList.length){
                        this.store.changeEntryId(this.dictData.entryList[0].id)
                     }
                  })
               this.update()
            }
         },

         onToggleSidenavClick(evt){
            $("#dictEditContainer", this.root).toggleClass("hideSideMenu")
         },

         onDocumentMouseUp(evt){
            let entryList = $("entry-list")
            let entryEditor = $("nvh-editor")
            if(entryList[0] && entryList[0].contains(evt.target)){
               this.focusEntryList()
            } else if(entryEditor[0] && entryEditor[0].contains(evt.target)){
               this.focusEntryEditor()
               let classList = evt.target.classList
               if(!classList.contains("nvh-readonly-value-wrapper") && !classList.contains("nvh-label")){
                  let itemNode = $(evt.target).closest(".nvh-editor-item")
                  if(itemNode.length){
                     let id = itemNode.attr("id").split("nvh-item-")[1]
                     window.nvhStore.focusElement(window.nvhStore.getElementById(id))
                  }
               }
            }
         },

         onDocumentKeyDown(evt){
            if((evt.ctrlKey || evt.metaKey) && !evt.shiftKey && !evt.altKey && evt.key == "f"){
               evt.preventDefault()
               $("#entryListSidenav", this.root).find("input, textarea", this.root).first().focus()
            }
            if((evt.ctrlKey || evt.metaKey) && evt.altKey){
               if(evt.keyCode == 37){  // left
                  evt.stopPropagation()
                  this.state.isMobile && this.openSidenav()
                  this.focusEntryList(evt)
               } else if(evt.keyCode == 39){  // right
                  evt.stopPropagation()
                  this.state.isMobile && this.closeSidenav()
                  this.focusEntryEditor()
                  if(this.dictData.editorMode == "edit"){
                     if(!window.nvhStore.getFocusedElement()){
                        window.nvhStore.focusElement(window.nvhStore.data.entry)
                     }
                  } else if(this.dictData.editorMode == "code"){
                     $(".nvh-code-editor").focus()
                  }
               }
            }
         },

         onDocumentMouseUp(){
            document.removeEventListener("mousemove", this.resizeColumn, false)
            document.removeEventListener("mouseup", this.onDocumentMouseUp, false)
            $("body").css("user-select", "")
            $(".entryListContainer").css("transition", "")
         },

         onResizeHandleMouseDown(evt){
            this.state.mousePos = evt.x
            document.addEventListener("mouseup", this.onDocumentMouseUp, false)
            document.addEventListener("mousemove", this.resizeColumn, false)
            $("body").css("user-select", "none")
            $(".entryListContainer").css("transition", "unset")
         },

         focusEntryList(){
            if(this.state.focus != "entryList"){
               this.state.focus = "entryList"
               $("entry-list", this.root).addClass("focused")
               $("nvh-editor").removeClass("focused")
               window.nvhStore.trigger("closeContextMenu")
            }
         },

         focusEntryEditor(){
            if(this.state.focus != "entryEditor"){
               this.state.focus = "entryEditor"
               $(":focus").blur()
               $("entry-list", this.root).removeClass("focused")
               $("nvh-editor").addClass("focused")
            }
         },

         resizeColumn(evt){
            const distance = evt.x - this.state.mousePos
            this.state.mousePos = evt.x
            let leftColWidth = $(".entryListContainer").width()
            let width = Math.min(this.MAX_ENTRY_LIST_WIDTH, Math.max(this.MIN_ENTRY_LIST_WIDTH, leftColWidth + distance))
            $(".entryListContainer").css("width", width + "px")
         },

         onResizeDebounced(){
            this.state.timer && clearTimeout(this.state.timer)
            this.state.timer = setTimeout(() => {
                clearTimeout(this.state.timer)
                this.refreshEntryListMenu()
            }, 200)
         },

         closeSidenav(){
            let sidenav = M.Sidenav.getInstance($('#entryListSidenav')[0])
            sidenav && sidenav.close()
         },

         openSidenav(){
            let sidenav = M.Sidenav.getInstance($('#entryListSidenav')[0])
            sidenav && sidenav.open()
         },

         refreshEntryListMenu(){
            let isMobile = $(window).width() < 900
            this.state.isMobile = isMobile
            $(this.root).toggleClass("isMobile", isMobile)
            let sidenav = $("#entryListSidenav")
            sidenav.toggleClass("sidenav", isMobile)
            if(isMobile){
               sidenav.css("transform", "")
               if(sidenav[0]
                  && this.state.isMobile
                  && !M.Sidenav.getInstance(sidenav[0])){
                  sidenav.sidenav()
               }
            } else {
               sidenav.css("transform", "unset")
            }
            this.refreshEntryListMenuHeight()
         },

         refreshEntryListMenuHeight(){
            let entryList = document.querySelector(".entry-list")
            if(entryList){
               let filterFormHeight = Math.round(document.querySelector("dict-entry-filter").clientHeight)
               if(this.state.isMobile){
                  entryList.style.maxHeight = `calc(100vh - ${filterFormHeight}px)`
               } else {
                  let entryListTop = document.querySelector("entry-list").getBoundingClientRect().top
                  let offset = filterFormHeight + Math.max(0, entryListTop)
                  entryList.style.maxHeight = `calc(100vh - ${offset}px)`
               }
            }
         }
      }
   </script>

   <style type="scss">
      #dictEditContainer{
         display: flex;
         min-height: calc(100vh - 295px); // header + footer
      }
      #dictEditContainer .sidenav{
         padding-bottom: 0;
      }
      .dictionaryTitle{
         text-decoration: none;
      }
      .totalEntries{
         font-size: 0.85rem;
         color: #b8b8b8;
         margin-left: 1.3rem;
         text-transform: none;
      }
      li > span {
         white-space: nowrap;
      }
      .resizeHandle{
         cursor: ew-resize;
         width: 5px;
         min-width: 5px;
         min-height: 100%;
         background-color: whitesmoke;
         margin: 0 10px;
      }
      .resizeHandle:hover{
         background-color: #cfcfcf;
      }
      .rightPanel{
         min-width: 500px;
         flex: 1;
      }
      .entryListMenuButton{
         margin-right: 10px;
         display: none;
         right: unset;
         left: 23px;
      }
      .toggleSidenavButton{
         position: absolute;
         right: -33px;
         bottom: 10px;
         box-shadow: 0 2px 2px 0 rgba(0,0,0,0.14), 0 3px 1px -2px rgba(0,0,0,0.12), 0 1px 5px 0 rgba(0,0,0,0.2);
         i{
            transition: transform 0.5s;
         }
      }
      .advancedQueryBuilderWrapper{
         background-color: #fafafa;
         padding: 20px 30px;
      }
      entry-list{
         .entry-list-item.focused {
            background-color: #eceff1;
         }
         &.focused{
            .entry-list-item.focused{
               background-color: #fff59d;
            }
         }
      }
      nvh-editor{
         .nvh-focused > .nvh-wrapper{
            background-color: #eceff1;
         }
         &.focused{
            .nvh-focused > .nvh-wrapper{
               background-color: #fff59d;
            }
         }
      }
      :host:not(.isMobile){
         .entryListContainer{
            position: sticky;
            top: 0;
         }
         .hideSideMenu{
            .entryListContainer{
               width: 0!important;
               overflow: hidden;
            }
            .resizeHandle{
               max-width: 0;
            }
            .toggleSidenavButton{
               i{
                  transform: rotate(180deg);
               }
            }
         }
      }
      :host.isMobile{
         padding-left: 0;
         .entryListContainer{
            width: min(400px, 85vw)!important;
         }
         .entryListMenuButton{
            display: inline-block;
         }
         .resizeHandle{
            display: none;
         }
         .entry-list {
            max-height: calc(100vh - 170px);
         }
         .toggleSidenavButton{
            display: none;
         }
         dict-entry-filter{
            padding: 10px;
         }
         dict-entry-filter .filterForm{
            flex-direction: column;
         }
         dict-entry-filter .filterForm .searchBox{
            width: auto;
         }
      }
   </style>
</dict-edit>

