<dict-config-flagging>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <h1 class="pageTitle">Entry flags</h1>
   <dict-configuration-issues config-id="flagging"/>
   <template if={!state.isLoading}>
      <div if={!state.data.flags.length}
            class="center-align grey-text">
         <h1>no entry flags</h1>
         <br>
         <a class="btn btn-primary waves-effect waves-light"
               onclick={ doAddEl }>
            add flag
            <i class="material-icons right">add</i>
         </a>
      </div>

      <template if={state.data.flags.length}>
         <table>
            <thead>
               <tr>
                  <th>Keyboard shortcut</th>
                  <th>Value</th>
                  <th>Label</th>
                  <th>Color</th>
                  <th></th>
               </tr>
            </thead>
            <tbody>
               <tr each={ (flag, index) in state.data.flags }
                     class="flag-info">
                  <td>
                     <input type="text"
                           value={ flag.key }
                           placeholder="key"
                           class="flag-key"/>
                  </td>
                  <td>
                     <input type="text"
                           value={ flag.name }
                           placeholder="value"
                           class="flag-name"/>
                  </td>
                  <td>
                     <input type="text"
                           value={ flag.label }
                           placeholder="label"
                           class="flag-label"/>
                  </td>
                  <td>
                     <input type="text"
                           value={ flag.color }
                           placeholder="color"
                           class="flag-color"
                           id="flag-color{index}"
                           style="color: {store.getFlagTextColor(flag.color)};background-color: {flag.color}"/>
                  </td>
                  <td>
                     <a class="btn btn-flat"
                           onclick={ doDeleteEl.bind(this, index) }>
                        <i class="material-icons">delete</i>
                     </a>
                  </td>
               </tr>
            </tbody>
         </table>
         <div>
            <a class="btn waves-effect waves-light"
                  onclick={ doAddEl }>
               add flag
               <i class="material-icons right">add</i>
            </a>
         </div>
         <br>
         <br>
         <div id="flag-element"
               class="input-field">
            <element-select include-root-element={false}
                  riot-value={state.data.flag_element}/>
            <label for="flag-element">Flag element</label>
            <span class="helper-text">Select the element which the flags should be put into.</span>
         </div>
      </template>
   </template>
   <br><br>
   <dict-config-buttons save-data={saveData}
         show-save={state.data.flags.length || state.hadFlags}></dict-config-buttons>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            data: {flag_elements: "", flags: []}
         },

         doDeleteEl(idx) {
            this.state.data = this.getConfigData()
            this.state.data.flags.splice(idx, 1)
            this.update()
         },

         doAddEl(event) {
            this.state.data.flags.push({key: "", name: "", label: "", color: ""})
            this.update()
         },

         addColor() {
            $(".flag-color").each(function(idx, elem) {
               var cid = $(elem)[0].id
               $("#" + cid).colorpicker().on("changeColor", function(ev) {
                  let bgColor = ev.color.toHex()
                  let color = this.store.getFlagTextColor(bgColor)
                  $(elem).css({
                     "background-color": bgColor,
                     "color": color
                  })
               }.bind(this))
            }.bind(this))
         },

         onMounted() {
            this.store.loadDictionaryConfig("flagging")
                  .done(response => {
                     this.state.hadFlags = false
                     if (response.content.flag_element) {
                        this.state.data = response.content
                        this.state.hadFlags = true
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                  })
         },

         onUpdated() {
            M.updateTextFields()
            this.addColor()
         },

         getConfigData() {
            var newData = {
               flag_element: $("#flag-element select").val(),
               flags: []
            }
            $(".flag-info").each(function() {
               newData.flags.push({
                  key: $(this).find(".flag-key").val(),
                  name: $(this).find(".flag-name").val(),
                  label: $(this).find(".flag-label").val(),
                  color: $(this).find(".flag-color").val()
               })
            })
            return newData
         },

         saveData() {
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("flagging", this.getConfigData())
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>


   <style>
      table{
         width: auto;
      }
      tr{
         border-bottom: none;
      }
      th, td{
         padding: 3px 10px 3px 0;
      }
      #flag-element {
         max-width: 250px;
      }
   </style>
</dict-config-flagging>
