<dict-config-flagging>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <h1 class="pageTitle">Entry flags</h1>
   <dict-configuration-issues config-id="flagging"/>
   <template if={!state.isLoading}>
      <div if={!state.flags.length}
            class="center-align grey-text">
         <h1>no entry flags</h1>
         <br>
         <a class="btn btn-primary waves-effect waves-light"
               onclick={onAddElementClick}>
            add flag
            <i class="material-icons right">add</i>
         </a>
      </div>

      <template if={state.flags}>
         <table>
            <thead>
               <tr>
                  <th>Keyboard shortcut</th>
                  <th>Value</th>
                  <th>Label</th>
                  <th>
                     Type
                     <span class="hint tooltipped"
                           data-tooltip="Entry can have only one exclusive flag or one or more additive flags. Adding exclusive flag will remove all other flags. Adding additive flag will remove all exclusive flags.">
                        <i class="material-icons">help_outline</i>
                     </span>
                  </th>
                  <th>Color</th>
                  <th></th>
               </tr>
            </thead>
            <tbody>
               <tr each={(flag, idx) in state.flags}
                     class="flag-info"
                     key={flag.key}>
                  <td>
                     <input type="text"
                           name="key"
                           value={flag.key}
                           placeholder="key"
                           oninput={onInput.bind(this, flag)}/>
                  </td>
                  <td>
                     <input type="text"
                           name="name"
                           value={flag.name}
                           placeholder="value"
                           oninput={onInput.bind(this, flag)}/>
                  </td>
                  <td>
                     <input type="text"
                           name="label"
                           value={flag.label}
                           placeholder="label"
                           oninput={onInput.bind(this, flag)}/>
                  </td>
                  <td>
                     <select onchange={onTypeChange.bind(this, flag)}>
                        <option selected={!flag.additive}
                              value="exclusive">exclusive</option>
                        <option selected={flag.additive}
                              value="additive">additive</option>
                     </select>
                  </td>
                  <td>
                     <input type="text"
                           onchange={onColorChange}
                           changeColor={onColorChange}
                           change-color={onColorChange}
                           value={flag.color}
                           name="flag-color"
                           placeholder="color"
                           class="flag-color"
                           idx={idx}
                           id="flag-color{idx}"
                           style="color: {store.getFlagTextColor(flag.color)};background-color: {flag.color}"/>
                  </td>
                  <td>
                     <a class="btn btn-flat"
                           onclick={onDeleteElementClick.bind(this, idx)}>
                        <i class="material-icons">delete</i>
                     </a>
                  </td>
               </tr>
            </tbody>
         </table>
         <div>
            <a class="btn waves-effect waves-light"
                  onclick={onAddElementClick}>
               add flag
               <i class="material-icons right">add</i>
            </a>
         </div>
         <br>
         <br>
         <div id="flag-element"
               class="input-field">
            <element-select include-root-element={false}
                  riot-value={state.data.flag_element}/>
            <label for="flag-element">Flag element</label>
            <span class="helper-text">Select the element which the flags should be put into.</span>
         </div>
         <template if={state.showAddAllAdditiveFlags}>
            <br>
            <h3>Add all additive flags shortcut</h3>
            <div class="grey-text mb-4">Keyboard shortcut to add all additive flags to the entry at once.</div>
            <div class="displayFlex">
               <div class="input-field mr-4">
                  <label>Keyboard shortcut</label>
                  <input type="text"
                        id="all_additive_key"
                        value={state.data.all_additive_key}>
               </div>
               <div class="input-field">
                  <label>Label</label>
                  <input type="text"
                        id="all_additive_label"
                        value={state.data.all_additive_label}>
               </div>
            </div>
         </template>
      </template>
   </template>
   <br><br>
   <dict-config-buttons save-data={saveData}
         show-save={state.data.flags.length || state.flags.length}/>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            showAddAllAdditiveFlags: false,
            flags: [],
            data: {flag_elements: "", flags: []}
         },

         onMounted(){
            this.store.loadDictionaryConfig("flagging")
                  .done(response => {
                     if (response.content.flag_element){
                        this.state.data = response.content
                        this.state.flags = [...response.content.flags]
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                  })
         },

         onBeforeUpdate(){
            this.state.showAddAllAdditiveFlags = this.state.flags.filter(flag => flag.additive).length >= 2
         },

         onUpdated(){
            M.updateTextFields()
            window.initFormSelects(this.root)
            this.initializeColorPicker()
         },

         onAddElementClick(event){
            this.state.flags.push({key: "", name: "", label: "", color: "", additive: false})
            this.update()
         },

         onDeleteElementClick(idx){
            this.state.flags.splice(idx, 1)
            this.update()
         },

         onInput(flag, evt){
            flag[evt.target.name] = evt.target.value
         },

         onTypeChange(flag, evt){
            flag.additive = evt.target.value == "additive"
            this.update()
         },

         initializeColorPicker(){
            $(".flag-color").each(function(idx, elem){
               $(elem).colorpicker().on("changeColor", function(ev){
                  let color = ev.color.toHex()
                  $(elem).css({
                     "background-color": color,
                     "color": this.store.getFlagTextColor(color)
                  })
                  this.state.flags[$(elem).attr("idx")].color = color
               }.bind(this))
            }.bind(this))
         },

         getConfigData(){
            let hasAdditiveFlag = this.state.flags.filter(flag => flag.additive).length
            let newData = {
               flag_element: $("#flag-element select").val(),
               all_additive_key: hasAdditiveFlag ? $("#all_additive_key").val() : "",
               all_additive_label: hasAdditiveFlag ? $("#all_additive_label").val() : "",
               flags: this.state.flags
            }
            return newData
         },

         saveData(){
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("flagging", this.getConfigData())
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>


   <style>
      table{
         width: auto;
      }
      tr{
         border-bottom: none;
      }
      th, td{
         padding: 3px 10px 3px 0;
      }
      #flag-element {
         max-width: 250px;
      }
   </style>
</dict-config-flagging>
