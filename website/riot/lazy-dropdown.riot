<lazy-dropdown class="inputFieldWithProgressBar">
   <input type="text"
         placeholder={props.placeholder || 'type to search'}
         value={props.label || props.riotValue}
         disabled={props.disabled}
         oninput={onInput}
         onkeydown={onKeyDown}
         onkeyup={onKeyUp}
         onfocus={onFocus}
         onblur={onBlur}
         data-value={props.riotValue}>
   <div if={state.request}
         class="progress">
      <div class="indeterminate"></div>
   </div>
   <div if={state.showList}
         class="dropdownContainer">
      <ul class="dropdown-content">
         <li each={(item, idx) in state.showItems}
               class={idx == state.cursorPosition && 'highlight'}
               onclick={onRowClick.bind(this, item)}>
            {!item.html ? item.label : ""}
            <raw-html if={item.html}
                  content={item.html}></raw-html>
         </li>
         <li if={!state.showItems.length && !state.request}
               class="pointerEventsNone grey-text noWrap">
            nothing found
         </li>
      </ul>
   </div>

   <script>
      export default{
         state: {
            data: [],
            timer: null,
            request: null,
            showList: false,
            query: "",
            cursorPosition: null
         },

         onBeforeUnmount(){
            this.state.showItems = this.getMenuItems()
            this.abortRequest()
            document.removeEventListener('click', this.handleClickOutside)
         },

         onBeforeUpdate(){
            this.state.showItems = this.getMenuItems()
         },

         onUpdated(){
            this.updateListPosition()
            if(this.state.showList && this.state.showItems.length){
               this.state.pageSize = Math.floor($(".dropdown-content", this.root).height() / $(".dropdown-content li", this.root).first()[0].clientHeight) - 1
            } else {
               this.state.pageSize = null
            }
            this.scrollSelectedIntoView()
         },

         load(){
            this.abortRequest()
            this.state.request = this.props.loadData(this.state.query, this.onDataLoaded.bind(this))
            this.update()
         },

         open(){
            if(this.state.query !== ""){
               this.update({showList: true})
               document.addEventListener('click', this.handleClickOutside)
            }
         },

         close(){
            this.update({
               showList: false,
               cursorPosition: null
            })
            document.removeEventListener('click', this.handleClickOutside)
         },

         onDataLoaded(data){
            this.update({
               data: data,
               request: null
            })
         },

         onFocus(){
            this.open()
         },

         onKeyDown(evt){
            evt.keyCode == 9 && this.close()  // tab
         },

         onKeyUp(evt){
            if(evt.keyCode == 38){
                this.moveCursorUp(1)
            } else if(evt.keyCode == 40){
                this.moveCursorDown(1)
            } else if(evt.keyCode == 33){
                this.moveCursorUp(this.state.pageSize) //pgUp
            } else if(evt.keyCode == 34){
                this.moveCursorDown(this.state.pageSize) // pgDown
            } else if(evt.keyCode == 27){ //esc
               this.state.showList ? this.close() : $("input", this.root).blur()
            } else if(evt.keyCode == 13){ // enter
               if(this.state.cursorPosition !== null){
                 this.onRowClick(this.state.showItems[this.state.cursorPosition])
               } else if (this.state.query !== ""){
                  if(this.props.onSubmit){
                     let item = this.state.data.find(i => i.value == this.state.query)
                     this.props.onSubmit(item || this.state.query, this.props.name, evt)
                     this.close()
                  }
               }
            }
         },

         onInput(evt){
            this.state.query = evt.target.value
            this.state.timer && clearTimeout(this.state.timer)
            if(this.state.query !== ""){
               this.state.timer = setTimeout(() => {
                   clearTimeout(this.state.timer)
                   this.load()
               }, 300)
               !this.state.showList && this.open()
            } else {
               this.props.onChange && this.props.onChange(null)
            }
         },

         onRowClick(item){
            $("input", this.root).val(item.label || item.value)
            $("input", this.root).data("value", item.value)
            this.state.query = item.value
            this.props.onChange && this.props.onChange(item)
            this.close()
         },

         moveCursorUp(step){
            if(this.state.showList){
               if(this.state.cursorPosition === null){
                  this.state.cursorPosition = this.state.showItems.length - 1
               } else {
                  this.state.cursorPosition = Math.max(this.state.cursorPosition - step, 0)
               }
               this.update()
            }
         },

         moveCursorDown(step){
            if(this.state.showList){
               if(this.state.cursorPosition === null){
                  this.state.cursorPosition = step - 1
               } else {
                  this.state.cursorPosition = Math.min(this.state.cursorPosition + step, this.state.showItems.length - 1)
               }
               this.update()
            }
         },

         getMenuItems(){
            if(this.props.dataProcessor){
               return this.props.dataProcessor(this.state.data, this.state.query)
            } else {
               return this.state.data
            }
         },

         scrollSelectedIntoView(){
            // if selected item is out of the view => scroll list viewport
            if(this.state.showList && this.state.cursorPosition !== null){
               let selectedItem = $(`.dropdown-content li:nth-child(${this.state.cursorPosition + 1})`, this.root)[0]
               if(selectedItem){
                   let list = $(".dropdown-content", this.root)[0]
                   let offsetTop = selectedItem.offsetTop
                   let rowHeight = selectedItem.clientHeight
                   let min = list.scrollTop
                   let max = list.scrollTop + list.clientHeight - rowHeight
                   if(offsetTop - rowHeight < min){
                       list.scrollTop = offsetTop
                   } else if(offsetTop > max){
                       list.scrollTop = offsetTop - list.clientHeight + rowHeight
                   }
               }
            }
         },

         handleClickOutside(evt){
            if (!this.root.contains(evt.target)){
               this.close()
            }
         },

         abortRequest(){
            this.state.request && this.state.request.abort()
            this.state.timer && clearTimeout(this.state.timer)
         },

         updateListPosition(){
            let list = $(".dropdownContainer", this.root)
            if(!list.length){
                return
            }
            let listwidth = list.outerWidth()
            let screenWidth = $(window).width()

            if(listwidth >= screenWidth){
               list.offset({"left": 0})
               list.css({
                  "min-width": screenWidth,
                  right: "unset"
               })
               list.addClass("wrapLines")
            } else{
               let leftOffset = list.offset().left
               let rightOffset = screenWidth - leftOffset - listwidth
               let leftOverlap = leftOffset < 0 ? leftOffset * -1 : 0
               let rightOverlap = rightOffset < 0 ? rightOffset * -1 : 0
               list.css({
                  "min-width": listwidth,
                  "margin-left": -rightOverlap,
                  "margin-right": -leftOverlap
               })
            }
         }
      }
   </script>

   <style>
      .dropdownContainer{
         position: absolute;
         z-index: 484;
         background-color: #fff;
         color: rgba(0,0,0,.84);
         -webkit-box-shadow: 0 8px 17px 2px rgb(0 0 0 / 14%), 0 3px 14px 2px rgb(0 0 0 / 12%), 0 5px 5px -3px rgb(0 0 0 / 20%);
         box-shadow: 0 8px 17px 2px rgb(0 0 0 / 14%), 0 3px 14px 2px rgb(0 0 0 / 12%), 0 5px 5px -3px rgb(0 0 0 / 20%);
         top: unset !important;
         bottom: -5px;
         left: 0;
         max-width: 100vw;|
      }
      .dropdown-content{
         display: block;
         opacity: 1;
         max-height: 50vh;
         top: 9px;
      }
      .dropdown-content li{
         list-style-type: none;
         padding: 4px 15px;
         vertical-align: middle;
         min-height: 32px;
         white-space: nowrap;
      }
      .dropdown-content li.highlight{
         background-color: #e5edf0;
      }
      .progress{
         bottom: -10px!important;
      }
   </style>
</lazy-dropdown>
