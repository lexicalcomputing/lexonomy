<admin-users>
   <span class="buttons right">
      <a href="#/admin/users/add"
            class="btn waves-effect waves-light">
         <i class="material-icons left">add</i>
         add user
      </a>
   </span>
   <h1 class="pageTitle">All Users</h1>
   <div if={state.users.length || state.query}
         class="topBar">
      <span class="searchBox input-field inputWithRightIcon">
            <i class="material-icons prefix grey-text">search</i>
         <input id="searchBox"
               oninput={onSearchInput}
               style="width: 150px;">
         <i onclick={onSearchCancelClick}
            class="material-icons rightIcon grey-text clickable">close</i>
      </span>
   </div>
   <div class="tableWrapper positionRelative">
      <loading-overlay if={state.isLoading}/>
      <table if={state.users.length}
            class="userTable">
         <thead>
            <tr>
               <th class="toggleColumn"></th>
               <th class="titleColumn">Email</th>
               <th class="titleColumn">Comment</th>
               <th class="dictionaryColumn">Dictionaries</th>
               <th class="actionColumn"></th>
            </tr>
         </thead>
         <tbody each={ (user, idx) in state.users }>
            <tr class="userRow {user.dictionaries.length && 'pointer'}"
                  onclick={user.dictionaries.length ? onDictionaryToggleClick : null}>
               <td>
                  <i if={user.dictionaries.length}
                        class="toggleIcon material-icons clickable">chevron_right</i>
               </td>
               <td class="user">
                  { user.email }
               </td>
               <td class="user">
                  { user.comment }
               </td>
               <td>
                  {user.dictionaries.length}
               </td>
               <td class="user-actions">
                  <a class="dropdown-trigger btn btn-floating btn-flat"
                        href="#"
                        onclick={onUserActionDropdownClick.bind(this, user.email)}>
                     <i class="material-icons black-text">more_horiz</i>
                  </a>
               </td>
            </tr>
            <tr class="dictionaryRow">
               <td colspan="5">
                  <div class="dictionaryList" style="display: none;">
                     <div each={dictionary in user.dictionaries}>
                        <a href="#/{dictionary.id}">
                           {dictionary.title ? dictionary.title : "--no title--"}
                        </a>
                     </div>
                  </div>
               </td>
            </tr>
         </tbody>
      </table>
      <ul id="userActionDropdown"
            class="dropdown-content">
         <li>
            <a data-action="onResetUserPasswordClick">
               <i class="material-icons">vpn_key</i>
               Reset password
            </a>
         </li>
         <li>
            <a data-action="onSetUserPasswordClick">
               <i class="material-icons">edit</i>
               Set password
            </a>
         </li>
         <li>
            <a data-action="onDeleteUserClick">
               <i class="material-icons">delete</i>
               Delete user
            </a>
         </li>
      </ul>
      <template if={!state.isLoading}>
         <div if={state.hasMore}
               class="center-align">
            <button class="btn showMoreBtn"
                  onclick={onShowMoreClick}>Show more</button>
         </div>
         <div if={!state.users.length}
               class="center"
               style="margin: 10vh auto;">
            <h1 class="grey-text lighten-2">Nothing found</h1>
         </div>
      </template>
   </div>

   <script>
      export default{
         bindings: [["dispatcher", "userCameBack", "reload"]],

         state: {
            isLoading: true,
            users: [],
            query: "",
            howmany: 500,
            hasMore: false,
            searchDebounceTimer: null,
            searchRequest: null
         },

         onMounted(){
            this.reload()
         },

         onBeforeUnmount(){
            this.state.searchRequest && this.state.searchRequest.abort()
         },

         reload(){
            this.state.searchRequest = this.store.loadAdminUserList(this.state.query, this.state.howmany + 1)  // + 1 to find, if there are more than "howmany" items
                  .done(payload => {
                     this.state.hasMore = false
                     if(payload.entries.length == this.state.howmany + 1){
                        payload.entries.pop()
                        this.state.hasMore = true
                     }
                     this.state.users = payload.entries
                     this.state.users.forEach(user => {
                        user.dictionaries.sort((a, b) => {
                           return a.title.localeCompare(b.title)
                        })
                     })
                  })
                  .always(() => {
                     this.update({isLoading: false})
                  })
         },

         onUserActionDropdownClick(email, evt){
            evt.stopPropagation()
            evt.preventDefault()
            let menuNode = $(evt.target.parentNode)
            if(!menuNode.attr("data-target")){ // menu is not created yet
               let id = "ts_" + Date.now() + Math.floor((Math.random() * 10000))
               // create copy of the list. Without copy, UL is moved as child of target node and after riot update list is destroyed
               $("#userActionDropdown").clone()
                     .attr({id: id})
                     .appendTo($("body"))
                     .find("a").each((idx, link) => {
                        $(link).click(evt => {
                           this[evt.currentTarget.dataset.action](email)
                        })
                     })
               menuNode.attr("data-target", id)
                     .dropdown({constrainWidth: false})
                     .dropdown("open")
            }
         },

         onResetUserPasswordClick(email){
            this.auth.requestResetPassword(email)
                  .always(payload => {
                     if(payload.success){
                        M.toast({html: "A link to reset the password has been sent to the user."})
                     } else {
                        M.toast({html: `Could not reset user password: ${payload.error || "unknown error"}`})
                     }
                  })
         },

         onSetUserPasswordClick(email){
            window.modal.open({
               title: "New password",
               tag: "raw-html",
               small: true,
               props: {
                  content: `<div class="input-field mt-8"><input id="newPassword"/><label>new password for ${email}</label></div>`
               },
               buttons: [{
                  id: "setNewPasswordBtn",
                  label: "Set password",
                  class: "disabled btn-primary",
                  onClick: (dialog, modal) => {
                     let password = document.getElementById("newPassword").value
                     this.auth.setUserPassword(email, password)
                           .done((payload) => {
                              payload.success && modal.close()
                           })
                  }
               }],
               onOpen: () => {
                  let passwordInput = document.getElementById("newPassword")
                  passwordInput.focus()
                  passwordInput.addEventListener("input", evt => {
                     evt.target.value
                     document.getElementById("setNewPasswordBtn").classList.toggle("disabled", !evt.target.value)
                  })
               }
            })
         },

         onDeleteUserClick(email) {
            if (confirm("Are you sure you want to delete user " + email + "? You will not be able to undo this.")) {
               this.update({isLoading: true})
               this.store.deleteUser(email)
                     .always(payload => {
                        if(!payload.error){
                           this.state.users = this.state.users.filter(user => user.email != email)
                        }
                        this.update({isLoading: false})
                     })
            }
         },

         onSearchInput(evt){
            this.state.query = evt.target.value
            this.searchDebounceTimer && clearTimeout(this.searchDebounceTimer)
            this.searchDebounceTimer = setTimeout(() => {
               this.state.searchRequest && this.state.searchRequest.abort()
               clearTimeout(this.searchDebounceTimer)
               this.update({
                  howmany: 500,
                  isLoading: true
               })
               this.reload()
            }, 300)
         },

         onSearchCancelClick(){
            this.update({
               query: "",
               howmany: 500,
               isLoading: true
            })
            this.reload()
         },

         onDictionaryToggleClick(evt){
            let tbody = $(evt.target).closest("tbody")
            let dictionaryList = tbody.find(".dictionaryList")
            let isVisible = dictionaryList.is(":visible")
            dictionaryList[isVisible ? "slideUp" : "slideDown"]()
            tbody.find(".toggleIcon").toggleClass("rotate90CW", !isVisible)
         },

         onShowMoreClick(){
            this.update({
               howmany: this.state.howmany + 500,
               isLoading: true
            })
            this.search()
         }
      }
   </script>

   <style>
      .topBar{
         display: flex;
         align-items: center;
         flex-wrap: wrap;
      }
      .searchBox{
         max-width: 200px;
         display: inline-block;
         margin: 0 15px 0 0;
      }
      .userTable tbody:hover tr{
         background-color: rgba(242,242,242,0.5);
      }
      .userRow{
         border: none;
      }
      .toggleIcon{
         transition: transform 0.2s;
      }
      .dictionaryRow td{
         padding: 0 0.7rem 0 85px;
      }
      .tableWrapper{
         min-height: 50vh;
      }
      table td{
         padding: 10px 10px;
      }
      .dictionaryList{
         padding: 0 0 10px 0;
      }
      .toggleColumn,
      .dictionaryColumn,
      .actionColumn{
         width: 1px;
      }
      .showMoreBtn{
         margin: 30px 0;
      }
   </style>
</admin-users>
