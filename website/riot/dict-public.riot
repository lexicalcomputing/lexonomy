<dict-public>
   <loading-overlay if={state.isLoading || dictData.isDictionaryLoading || dictData.isEntryListLoading}/>
   <template if={!dictData.isDictionaryLoading}>
      <dict-header>
         <a slot="before-buttons"
               href="#/{dictData.dictId}/edit"
               class="btn btn-primary btn-large">
            {dictData.userAccess.canEdit ? "open editor" : "open viewer"}
         </a>
      </dict-header>

      <div class="displayFlex dictContainer">
         <template if={dictData.public || dictData.userAccess}>
            <div class="panel">
               <template if={!dictData.isEntryListLoading && dictData.entryList && !dictData.entryList.length}>
                  <h2 class="grey-text">Dictionary is empty</h2>
                  <div >
                     <template if={dictData.userAccess.canEdit}>
                        You can add new entries in the <a href="#/{dictData.dictId}/edit">editor</a> {dictData.userAccess.canUpload ? ' or ' : '.'}
                     </template>
                     <template if={dictData.userAccess.canUpload}>
                        {dictData.userAccess.canEdit ? 'you ' : 'You '}
                        can&nbsp;<a href="#/{dictData.dictId}/upload">upload</a> dictionary content.
                     </template>
                  </div>
               </template>

               <template if={!dictData.isEntryListLoading && dictData.entryList?.length}>
                  <div class="search">
                     <h2 class="grey-text">Search</h2>
                     <dict-entry-filter search-func={search}/>
                  </div>
                  <div class="divider"></div>
                  <div class="randomEntries">
                     <h2 class="grey-text">
                        Random entries
                        <a if={dictData.dictionaryExamplesHasMore}
                              class="refreshExamplesBtn btn btn-floating btn-flat waves-effect waves-light tooltipped"
                              data-tooltip="Show other random entries."
                              onclick={ onReloadExamplesClick }>
                           <i class="material-icons black-text">refresh</i>
                        </a>
                     </h2>
                     <div class="randomEntryList">
                        <div if={dictData.isDictionaryExamplesLoading}
                              class="loadingExamples grey-text">
                           Loading...
                        </div>
                        <ul if={ !dictData.isDictionaryExamplesLoading && dictData.dictionaryExamples }
                              class="entry-list">
                           <li each={ entry in dictData.dictionaryExamples }
                                 class={entry.id == state.displayedEntryId ? "activeEntryLink" : ""}>
                              <a href="javascript:void(0);"
                                    onclick={onRandomEntryClick.bind(this, entry)}>{ entry.title.replace(/(<([^>]+)>)/gi, "") }</a>
                           </li>
                        </ul>
                     </div>

                     <div class="positionRelative randomEntry">
                        <a if={state.displayedEntryId }
                              href={getEntryUrl()}
                              class="btn btnOpenInEditor">
                           {dictData.userAccess.canEdit ? "open in editor" : "open in viewer"}
                        </a>
                        <loading-overlay if={dictData.isEntryLoading}/>
                        <template if={nvhData.entry}>
                           <div if={!nvhData.customEditor}
                                 class="nvh-editor-view-items">
                              <nvh-editor-view-item element={nvhData.entry}
                                    read-only={true}/>
                           </div>
                           <nvh-custom-editor if={nvhData.customEditor}
                                 read-only={true}/>
                        </template>
                     </div>
                  </div>
               </template>
            </div>
         </template>
         <div class="sectionDivider"></div>
         <div class="panel">
            <div if={state.showQueryBuilder}
                  class="block pr-6">
               <advanced-query-builder search-func={search}/>
            </div>
            <div if={!state.showQueryBuilder}
                  class="description">
               <h2 class="grey-text">Description</h2>
               <div class="displayFlex"
                     style="gap: 10px">
                  <raw-html content={dictData.blurb}></raw-html>
                  <a if={dictData.userAccess.canConfig}
                        href="#/{dictData.dictId}/config/ident"
                        class="grey-text mt-4">
                     <i class="material-icons clickable">edit</i>
                  </a>
               </div>
            </div>
         </div>
      </div>

      <div class="divider"></div>
      <div class="displayFlex mt-6">
         <div class="displayFlex grey-text"
               style="gap: 0.2em;">
            The dictionary has a maximum limit of {window.Formatter.num(store.data.config.dict_settings?.limits?.entries || 5000)} entries.<a href="https://www.sketchengine.eu/ask-a-question/">Contact us</a>about {store.data.config.dict_settings?.limits?.entries ? "changing" : "increasing"} your limit.
         </div>
         <div if={dictData.licence && (dictData.public || dictData.userAccess)}
               class="ml-auto grey-text">
            Licence:
            <span class="mr-2">
               {dictData.licence.toUpperCase()}
            </span>
            <a if={dictData.siteconfig.licences[dictData.licence]}
                  href={dictData.siteconfig.licences[dictData.licence].url}
                  class="verticalMiddle"
                  target="_blank">
               <img src="{dictData.siteconfig.licences[dictData.licence].icon}">
            </a>
         </div>
         <div class="ml-auto">
            <dict-last-edited last-edit={dictData.lastEdit}
                label="last edit "/>
         </div>
      </div>
   </template>

   <script>
      export default {
         bindings: [["store", "dictionaryChanged", "onDictionaryChanged"],
                    ["store", "isEntryLoadingChanged", "update"],
                    ["store", "isEntryListLoadingChanged", "update"],
                    ["store", "isDictionaryExamplesLoadingChanged", "isDictionaryExamplesLoadingChanged"],
                    ["store", "toggleQueryBuilder", "onToggleQueryBuilder"]],

         state: {
            isLoading: false,
            displayedEntryId: null,
            showQueryBuilder: false
         },

         onBeforeMount(){
            this.nvhStore = window.nvhStore
            this.nvhData = this.nvhStore.data
         },

         onMounted(){
            this.dictData.search.advanced_query = ""
            this.dictData.search.searchtext = ""
            if(!this.dictData.isDictionaryExamplesLoading){
               this.reloadDictionaryExamples()
            }
            if(this.dictData.config.formatting.customCss){
               window.CustomStyles.add("nvhEditorCustomStyles", this.dictData.config.formatting.customCss, ".nvh-editor-view-items")
            }
            window.scrollTo(0, 0)
         },

         onBeforeUnmount(){
            window.CustomStyles.remove("nvhEditorCustomStyles")
         },

         isDictionaryExamplesLoadingChanged(){
            this.state.displayedEntryId = this.dictData.dictionaryExamples && this.dictData.dictionaryExamples.length ? this.dictData.dictionaryExamples[0].id : null
            this.store.changeEntryId(this.state.displayedEntryId)
            this.update()
         },

         onToggleQueryBuilder(show){
            this.update({showQueryBuilder: show ?? !this.state.showQueryBuilder})
         },

         onClone(){
            this.store.cloneDictionary(this.dictData.dictId)
         },

         onDelete(){
            window.openConfirmDialog({
               title: "Delete dictionary?",
               content: `Are you sure you want to delete dictionary "${this.dictData.title}"? You will not be able to undo this.`,
               confirmLabel: "Delete",
               onConfirm: () => {
                  this.update({isLoading: true})
                  this.store.deleteDictionary(this.dictData.dictId)
                        .done(() => {route("/")})
                        .fail(() => {this.update({isLoading: false})})
               }
            })
         },

         reloadDictionaryExamples(){
            if(this.dictData.public || this.authData.authorized){
               this.store.reloadDictionaryExamples()
            }
         },

         search(){
            this.store.loadEntryList()
                  .done(response => {
                     if(response.success && response.entries.length){
                        this.store.changeEntryId(response.entries[0].id)
                     }
                  })
            route(`/${this.dictData.dictId}/edit${this.store.getEntrySearchUrlQueryString()}`)
         },

         onRandomEntryClick(entry){
            this.state.displayedEntryId = entry.id
            this.store.changeEntryId(entry.id)
         },

         onReloadExamplesClick(evt){
            M.Tooltip.getInstance(evt.currentTarget).destroy()
            this.reloadDictionaryExamples()
            this.update()
         },

         onDictionaryChanged(){
            this.reloadDictionaryExamples()
         },

         getEntryUrl(){
            let editorMode = this.dictData.userAccess
                  && this.dictData.userAccess.canEdit ? "edit" : "view"
            return `#/${this.dictData.dictId}/edit/${this.state.displayedEntryId}/${editorMode}`
         }
      }
   </script>

   <style type="scss">
      dict-header{
         border-bottom: 1px solid #e0e0e0;
      }
      advanced-query-builder{
         h2{
            color: #9e9e9e;
         }
      }
      .btnOpenInEditor{
         position: absolute;
         right: 0;
         top: 10px;
         z-index: 99;
      }
      .sectionDivider{
         width: 1px;
         border-left: 1px solid #e0e0e0;
         margin-right: 30px;
      }
      .panel{
         flex: 1;
         padding-bottom: 30px;
      }
      .panel .divider{
         margin-top: 30px;
      }
      .description{
         word-break: break-word;
      }
      .search,
      .randomEntries{
         padding-right: 30px;
      }
      .randomEntryList{
         min-height: 46px;
         ul{
            margin: 0
         }
      }
      .randomEntry{
         padding-top: 40px;
         min-height: 200px;
      }
      .activeEntryLink{
         a{
            font-weight: bold;
         }
      }
      .entry-list li {
         display: inline-block;
         padding: 3px 10px;
      }
      .entry-list li a:hover {
         text-decoration: underline;
      }
      .loadingExamples{
         min-height: 20px;
         margin: 15px 10px;
      }
   </style>
</dict-public>

