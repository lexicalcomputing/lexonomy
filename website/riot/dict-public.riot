<dict-public>
   <loading-overlay if={state.isLoading || dictData.isDictionaryLoading || state.isEntryListLoading}/>
   <template if={!dictData.isDictionaryLoading}>
      <h1 class="header">
         { dictData.title }
         <dict-favorite-toggle if={authData.authorized}
               dict-id={dictData.dictId}/>
         <div class="dictBtns buttons">
            <a if={dictData.userAccess.canEdit}
                  href="#/{dictData.dictId}/edit"
                  class="btn">edit</a>
            <a if={dictData.userAccess.canConfig}
                  href="#/{dictData.dictId}/config"
                  class="btn">config</a>
            <a if={dictData.userAccess.canUpload}
                  href="#/{dictData.dictId}/upload"
                  class="btn">upload</a>
            <a if={dictData.userAccess.canDownload}
                  href="#/{dictData.dictId}/download"
                  class="btn">download</a>
            <a if={dictData.userAccess.canEdit}
                  href="#/{dictData.dictId}/links"
                  class="btn">links</a>
            <a if={dictData.userAccess.canConfig || dictData.userAccess.canEdit}
                  class="dropdown-trigger btn btn-floating btn-flat"
                  href="#"
                  data-target="dictMenuDropdown">
               <i class="material-icons black-text">more_horiz</i>
            </a>
            <ul id="dictMenuDropdown"
                  class="dropdown-content">
               <li if={dictData.userAccess.canConfig}>
                  <a href=""
                        onclick={onClone}>
                     <i class="material-icons left">content_copy</i>
                     Clone
                  </a>
               </li>
               <li if={dictData.userAccess.canEdit}>
                  <a href="javascript:void(0);"
                        onclick={onDelete}>
                     <i class="material-icons left">delete</i>
                     Delete
                  </a>
               </li>
            </ul>
         </div>
      </h1>

      <div class="firstRowContainer">
         <div class="firstRowCol description">
            <h3>Description</h3>
            <raw-html content={dictData.blurb}></raw-html>
         </div>
         <template if={dictData.public || dictData.userAccess}>
            <div class="sectionDivider"></div>
            <div class="firstRowCol">
               <div class="search">
                  <h3>Search</h3>
                  <dict-entry-filter search-func={search}/>
                  <div if={!state.isEntryListLoading && state.showFoundEntries && dictData.entryList}
                        class="searchResult">
                     <ul if={dictData.entryList.length}
                           class="entry-list found-entries">
                        <li each={entry in dictData.entryList}>
                           <a href={getEntryUrl(entry)}>
                              <raw-html content={entry.title}></raw-html>
                           </a>
                        </li>
                     </ul>
                     <div if={dictData.entryCount > 20}
                           class="serchResultNote grey-text">
                           Showing first 20 entries of {dictData.entryCount}.
                     </div>
                     <div if={!dictData.entryList.length}
                           class="noEntries">
                         <h2 class="grey-text center-align">No entries</h2>
                     </div>
                  </div>
               </div>
               <div class="divider"></div>
               <div class="randomEntries">
                  <a if={dictData.dictionaryExamplesHasMore}
                        class="refreshExamplesBtn btn btn-floating waves-effect waves-light right"
                        onclick={ onReloadExamplesClick }>
                     <i class="material-icons">refresh</i>
                  </a>
                  <h3>Random entries</h3>
                  <div if={dictData.isDictionaryExamplesLoading}
                        class="loadingExamples grey-text">
                     Loading...
                  </div>
                  <ul if={ !dictData.isDictionaryExamplesLoading && dictData.dictionaryExamples }
                        class="entry-list random-entries">
                     <li each={ entry in dictData.dictionaryExamples }>
                        <a href={getEntryUrl(entry)}>{ entry.titlePlain }</a>
                     </li>
                  </ul>
               </div>
            </div>
         </template>
      </div>

      <div if={ dictData.public || dictData.userAccess }>
         <div class="divider"></div>
         <div class="licence section right">
            { dictData.licence }
         </div>
      </div>
   </template>

   <style>
      dict-favorite-toggle{
         font-size: 0.6em;
         margin-left: 0.5rem;
      }
      .dictBtns{
         margin-top: 5px;
      }
      .firstRowContainer{
         display: flex;
      }
      .sectionDivider{
         width: 1px;
         border-left: 1px solid #e0e0e0;
         margin-left: 30px;
      }
      .firstRowCol{
         flex: 1;
         padding-bottom: 30px;
      }
      .firstRowCol .divider{
         margin-top: 30px;
      }
      .description{
         word-break: break-word;
      }
      dict-entry-filter{
         max-width: 500px;
      }
      .search,
      .randomEntries{
         padding-left: 30px;
      }
      .searchResult{
         min-height: max(15vh, 200px);
      }
      .searchResultNote{
         font-size: 0.8rem;
         margin-left: 10px;
      }
      .noEntries{
         padding-top: 50px;
      }
      .entry-list li {
         display: inline-block;
         padding: 3px 10px;
      }
      .entry-list li a:hover {
         text-decoration: underline;
      }
      .refreshExamplesBtn{
         margin-top: 15px;
      }
      .loadingExamples{
         min-height: 20px;
         margin: 15px 10px;
      }
      .licence{
         opacity: .5;
      }
   </style>

   <script>
      export default {
         bindings: [["store", "dictionaryChanged", "onDictionaryChanged"],
                    ["store", "isDictionaryExamplesLoading", "update"]],

         state: {
            isLoading: false,
            isEntryListLoading: false,
            showFoundEntries: false
         },

         onClone(){
            this.store.cloneDictionary(this.dictData.dictId)
         },

         onDelete(){
            var dictTitle = this.store.getDictionary(this.dictData.dictId).title
            if (confirm("Are you sure you want to delete dictionary " + dictTitle + "? You will not be able to undo this.")) {
               this.update({isLoading: true})
               this.store.deleteDictionary(this.dictData.dictId)
                     .done(() => {route("#/")})
                     .fail(() => {this.update({isLoading: false})})
            }
         },

         reloadDictionaryExamples(){
            if(this.dictData.public || this.authData.authorized){
               this.store.reloadDictionaryExamples()
            }
         },

         search(){
            this.update({isEntryListLoading: true})
            let request = this.store.loadEntryList(20)
            request && request.done(() => {
                     this.state.showFoundEntries = true
                  })
                  .always(() => {
                     this.update({isEntryListLoading: false})
                  })
         },

         onReloadExamplesClick(){
            this.reloadDictionaryExamples()
            this.update()
         },

         onDictionaryChanged(){
            this.reloadDictionaryExamples()
            this.initializeDropdown()
         },

         onCloseSearchResultClick(){
            this.update({showFoundEntries: false})
         },

         initializeDropdown(){
            $(".dropdown-trigger").dropdown({
               coverTrigger: false,
               constrainWidth: false
            })
         },

         getEntryUrl(entry){
            if(this.dictData.userAccess && this.dictData.userAccess.canEdit){
               return `#/${this.dictData.dictId}/edit/${this.dictData.doctype}/${entry.id}/view`
            } else {
               return `#/${this.dictData.dictId}/${entry.id}`
            }
         },

         onUpdated(){
            // make all items in list same width to create columns
            [".entry-list li", ".random-entries li"].forEach(selector => {
               let maxWidth = 0;
               $(selector).each((i, e) => {maxWidth = Math.max(maxWidth, $(e).width())})
               $(selector).each((i, e) => {$(e).css("width", Math.min(300, maxWidth + 20) + "px")})
            })
         },

         onMounted(){
            this.dictData.searchtext = ""
            if(!this.dictData.dictionaryExamples && !this.dictData.isDictionaryExamplesLoading){
               this.reloadDictionaryExamples()
            }
            if(!this.dictData.isDictionaryLoading){
               this.initializeDropdown()
            }
         }
      }
   </script>
</dict-public>

