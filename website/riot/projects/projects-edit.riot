<projects-edit>
   <div if={!props.projectID}
         class="message error">
      <h2>Bad request</h2>
      Missing project ID. <a href="#projects/dashboard">Go to projects dashboard</a>.
   </div>

   <div if={state.error}
         class="message error">
      <h2 class="mt-8">Could not load the project</h2>
      {state.error}
      <div class="mt-4">
         <a href="#projects/dashboard">Go to projects dashboard</a>
      </div>
   </div>

   <loading-overlay if={state.isBusy || dictData.isDictionaryListLoading}/>
   <div if={state.project}>
   <h1 class="pageTitle">
      <a href="#projects/view/${props.projectID}"
            class="clickable mr-2 tooltipped"
            data-tooltip="Back to projects">
         <i class="material-icons grey-text">
            arrow_back
         </i>
      </a>
      {state.project.project_name}
   </h1>
   <div class="displayFlex">
      <div>
         <h3>Project</h3>
         <div class="input-field mb-8">
            <input type="text"
                  id="name"
                  value={state.project.project_name}
                  oninput={onNameInput}>
            <label>Name</label>
         </div>

         <div class="input-field mb-8">
            <textarea id="description"
                  class="materialize-textarea"
                  oninput={onDescriptionInput}
                  rows="3">{state.project.description}</textarea>
            <label>Description</label>
         </div>

         <div class="input-field mb-8">
            <input disabled
                  value={store.getLanguageName(state.project.language)}
                  id="language">
            <label>Language</label>
         </div>

         <div class="input-field mb-8">
            <input disabled
                  value={state.project.workflow.name}/>
            <label>Workflow</label>
         </div>

         <div class="sourceDictInput input-field mb-8">
            <input disabled
                  value={state.project.source_dict}/>
            <a href="#{state.project.source_dict}"
                  target="_blank">
               <i class="material-icons">open_in_new</i>
            </a>
            <label>Central dictionary</label>
         </div>
         <div class="input-field inputFieldWithProgressBar mb-8">
            <input if={auth.data.ske_apiKey}
                  type="text"
                  id="referenceCorpus"
                  value={getReferenceCorpusValue()}
                  placeholder="Type to search in the list of corpora"
                  class="autocomplete"
                  placeholder="Retrieving available corpora from Sketch Engine, please wait..."/>
            <label>Reference corpus</label>
            <div if={state.isCorporaLoading}
                  class="progress">
               <div class="indeterminate"></div>
            </div>
         </div>
         <div if={!auth.data.ske_apiKey}
               class="warning">
            To select reference corpus you need to set up Sketch Engine connection first. You can do it on your <a href="#/member-profile">profile page</a>.
         </div>
      </div>

      <div class="columnTeam">
         <h3>Team</h3>
         <div class="teamRole displayFlex mb-8">
            <label>Managers</label>
            <div>
               <div>
                  <div if={!state.project.managers.length}
                        class="noTeamMember grey-text">
                     No manager selected.
                  </div>
                  <span each={email in state.project.managers}
                        class="chip">
                     {email}
                     <i class="close material-icons"
                           onclick={onRemoveMemberClick.bind(this, "managers", email)}>close</i>
                  </span>
               </div>
               <div class="input-field mt-2">
                  <user-dropdown id="managersMemberDropdown"
                        on-change={onAddMember.bind(this, "managers")}
                        dataProcessor={getMemberList.bind(this, "managers")}/>
                  <span class="helper-text">
                     Enter email address to add a new manager.
                  </span>
               </div>
            </div>
         </div>
         <div class="teamRole displayFlex">
            <label>Editors</label>
            <div>
               <div>
                  <div if={!state.project.annotators.length}
                        class="noTeamMember grey-text">
                     No editor selected.
                  </div>
                  <span each={email in state.project.annotators}
                        class="chip">
                     {email}
                     <i class="close material-icons"
                           onclick={onRemoveMemberClick.bind(this, "annotators", email)}>close</i>
                  </span>
               </div>
               <div class="input-field mt-2">
                  <user-dropdown id="editorsMemberDropdown"
                        on-change={onAddMember.bind(this, "annotators")}
                        data-processor={getMemberList.bind(this, "annotators")}/>
                  <span class="helper-text">
                     Enter email address to add a new editor.
                  </span>
               </div>
            </div>
         </div>
      </div>
   </div>

   <div class="buttons mt-6">
      <a href="javascript:window.history.back()"
            class="btn btn-secondary">
         back
      </a>
      <button id="btnUpdateProject"
            class="btn btn-primary"
            onclick={onUpdateProjectClick}>
         update
      </button>
   </div>

   <script>
      export default{
         bindings: [["store", "dictionaryListLoadingChanged", "update"]],

         state: {
            project: null,
            isCorporaLoading: true,
            corpora: [],
            isBusy: true
         },

         onMounted(){
            if(this.props.projectID){
               this.store.loadProject(this.props.projectID)
                     .done(response => {
                        if(response.error){
                           this.state.project = null
                           this.state.error = response.error
                           /*this.state.project = {
                        name: "English-Nepali dictionary",
                        description: "adsasd ad\nadasdsdfas\nafdgssaf\nsfsfsafdsfasfd\n",
                        managers: ["asda@asdad.asd", "aaaaa@asdad.com"],
                        editors: ["asda@asdad.asd", "aaaaa@asdad.com"],
                        workflow: [{
                           name: "headword annotation",
                           inputDict: {
                              id: "fap4jkbg",
                              name: "entry dict"
                           },
                           outputDict: {
                              id: "wtimijs4",
                              name: "output dict"
                           },
                           batches: [{
                              editor: "bbbbb@asdad.com",
                              progress: 0.75
                           }, {
                              editor: "cccc@asdad.com",
                              progress: 1
                           }]

                        }],
                        centralDictionary: "someDictionary",
                        referenceCorpus: "preloaded/bnc2_tt31"
                     }*/
                        } else {
                           this.state.error = null
                           this.state.project = response
                        }
                     })
                  .always(response => {
                     this.update({isBusy: false})
                     M.updateTextFields()
                     M.textareaAutoResize($("textarea", this.root))
                  })
            }

            this.store.skeLoadCorpora()
                  .done(response => {
                     this.state.corpusList = response.data.map(corpus => {
                        return {
                              value: corpus.corpname,
                              label: corpus.name,
                              info: corpus.language_name
                           }
                        })
                     $("#referenceCorpus").autocomplete({
                        data: this.state.corpusList,
                        onAutocomplete: corpus => {
                           this.state.project.referenceCorpus = corpus.value
                           this.refreshUpdateBtnDisabled()
                        },
                        dropdownOptions: {
                           constrainWidth: false
                        }
                     })
                  })
                  .always(() => {
                     this.update({isCorporaLoading: false})
                  })

            $("#name", this.root).focus()
            window.initFormSelects(this.root)
         },

         onUpdated(){
            window.initFormSelects(this.root)
         },

         onNameInput(evt){
            this.state.project.name = evt.target.value
            this.refreshUpdateBtnDisabled()
         },

         onDescriptionInput(evt){
            this.state.project.description = evt.target.value
         },

         onAddMember(type, member){
            this.state.project[type].push(member.email)
            this.update()
            $(`#${type}MemberDropdown input`).val("")
            this.refreshCreateBtnDisabled()
         },

         onRemoveMemberClick(type, email, evt){
            evt.stopPropagation()
            this.state.project[type] = this.state.project[type].filter(u => u.email != email)
            this.update()
            this.refreshCreateBtnDisabled()
         },

         onUpdateProjectClick(){
            this.update({isBusy: true})
            this.store.updateProject(this.state.project)
                  .done(() => {
                     route(`projects/view/${this.props.projectID}`)
                  })
                  .always(() => {
                     this.update({isBusy: false})
                  })
         },

         getReferenceCorpusValue(){
            if(this.state.project && this.state.corpusList && this.state.project.referenceCorpus){
               let corpus = this.state.corpusList.find(c => c.value == this.state.project.referenceCorpus)
               if(corpus){
                  return corpus.label
               }
            }
            return ""
         },

         getMemberList(type, members, query){
            if(!members.length && window.isEmail(query) && !this.state.project[type].includes(query)){
               return [{
                  html: `create  user <b>${query}</b>`,
                  value: query,
                  user: {
                     email: query
                  }
               }]
            }
            return members.filter(member => !this.state.project[type].includes(member.email))
         },

         refreshReferenceCorporaList(){
            let corpora = this.state.corpora.filter(corpus => corpus.language_id == this.state.project.language)
                  .map(corpus => {
                     return {
                           value: corpus.corpname,
                           label: corpus.name,
                           info: corpus.language_name
                        }
                     })
            M.Autocomplete.getInstance($("#ref_corpus")).updateData(corpora)
         },

         refreshUpdateBtnDisabled(){
            let disabled = !this.state.project.name
                  || !this.state.project.managers.length
                  || !this.state.project.annotators.length
                  || !this.state.project.referenceCorpus
            $("#btnUpdateProject").toggleClass("disabled", disabled)
         }
      }
   </script>


   <style type="scss">
      .input-field{
         width: 400px;
      }
      .sourceDictInput{
         display: flex;
         gap: 5px;
         align-items: center;
      }
      .columnTeam{
         margin-left: 30px;
         padding-left: 30px;
         border-left: 1px solid lightgrey;
         label{
            min-width: 90px;
         }
         .teamRole{
            gap: 20px;
         }
         .noTeamMember{
            min-height: 37px;
         }
      }
   </style>
</projects-edit>
