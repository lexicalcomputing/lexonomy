<projects-new>
   <loading-overlay if={state.isBusy || dictData.isDictionaryListLoading}/>
   <h1 class="pageTitle">
      <a href="#projects/dashboard"
            class="clickable mr-2 tooltipped"
            data-tooltip="Back to projects">
         <i class="material-icons grey-text">
            arrow_back
         </i>
      </a><!--
   -->New project
   </h1>
   <div class="displayFlex">
      <div>
         <h3>Project</h3>
         <div class="input-field mb-8">
            <input type="text"
                  id="name"
                  oninput={onNameInput}>
            <label>Name</label>
         </div>

         <div class="input-field mb-8">
            <textarea id="description"
                  class="materialize-textarea"
                  oninput={onDescriptionInput}
                  rows="3"></textarea>
            <label>Description</label>
         </div>

         <div class="input-field mb-8">
            <input type="text"
                  id="language">
            <label>Language</label>
         </div>

         <div class="input-field mb-8">
            <select id="workflow"
                  onchange={onWorkflowChange}>
               <option value="" selected>-select-</option>
               <option each={workflow in state.workflows}
                     value={workflow.name}>{workflow.name}</option>
            </select>
            <label>Workflow</label>
         </div>

         <div class="input-field mb-8">
            <select id="source_dict"
                  onchange={onSourceDictionaryChange}>
               <option value="" selected>-select-</option>
               <option each={dict in dictData.dictionaryList}
                     value={dict.id}
                     selected={dict.id == state.project.source_dict}>{dict.title}</option>
            </select>
            <label>Central dictionary</label>
         </div>

         <div class="input-field inputFieldWithProgressBar mb-8">
            <input if={auth.data.ske_apiKey}
                  type="text"
                  id="ref_corpus"
                  class="{state.project.language ? '' : 'disabled'}"
                  placeholder={state.project.language ? "Type to search in the list of corpora" : "Select language first"}
                  disabled={state.isCorporaLoading}
                  placeholder="Retrieving available corpora from Sketch Engine, please wait..."/>
            <label>Reference corpus</label>
            <div if={state.isCorporaLoading}
                  class="progress">
               <div class="indeterminate"></div>
            </div>
         </div>
         <div if={!auth.data.ske_apiKey}
               class="warning">
            To select reference corpus you need to set up Sketch Engine connection first. You can do it on your <a href="#/member-profile">profile page</a>.
         </div>
      </div>

      <div class="columnTeam">
         <h3>Team</h3>
         <div class="teamRole displayFlex mb-8">
            <label>Managers</label>
            <div>
               <div>
                  <div if={!state.project.managers.length}
                        class="noTeamMember grey-text">
                     No manager selected.
                  </div>
                  <span each={email in state.project.managers}
                        class="chip">
                     {email}
                     <i class="close material-icons"
                           onclick={onRemoveMemberClick.bind(this, "managers", email)}>close</i>
                  </span>
               </div>
               <div class="input-field mt-2">
                  <user-dropdown id="managersMemberDropdown"
                        on-change={onAddMember.bind(this, "managers")}
                        dataProcessor={getMemberList.bind(this, "managers")}/>
                  <span class="helper-text">
                     Enter email address to add a new manager.
                  </span>
               </div>
            </div>
         </div>
         <div class="teamRole displayFlex">
            <label>Editors</label>
            <div>
               <div>
                  <div if={!state.project.editors.length}
                        class="noTeamMember grey-text">
                     No editor selected.
                  </div>
                  <span each={email in state.project.editors}
                        class="chip">
                     {email}
                     <i class="close material-icons"
                           onclick={onRemoveMemberClick.bind(this, "editors", email)}>close</i>
                  </span>
               </div>
               <div class="input-field mt-2">
                  <user-dropdown id="editorsMemberDropdown"
                        on-change={onAddMember.bind(this, "editors")}
                        data-processor={getMemberList.bind(this, "editors")}/>
                  <span class="helper-text">
                     Enter email address to add a new editor.
                  </span>
               </div>
            </div>
         </div>
      </div>
   </div>

   <div class="buttons mt-6">
      <a href="javascript:window.history.back()"
            class="btn btn-secondary">
         back
      </a>
      <button id="btnCreateProject"
            class="btn btn-primary disabled"
            onclick={onCreateProjectClick}>
         create
      </button>
   </div>

   <script>
      export default{
         bindings: [["store", "dictionaryListLoadingChanged", "update"]],

         state: {
            project: null,
            isCorporaLoading: true,
            isWorkflowsLoading: true,
            corpora: []
         },








         // TODO add option "create user" if manager/editor email is not found





         onBeforeMount(){
            this.state.project = {
               name: null,
               description: null,
               managers: [window.auth.data.email],
               editors: [],
               workflow: null,
               source_dict: null,
               ref_corpus: null
            }
         },

         onMounted(){
            window.initFormSelects(this.root)
            this.store.skeLoadCorpora()
                  .done(response => {
                     this.state.corpora = response.data
                     $("#ref_corpus").autocomplete({
                        onAutocomplete: corpus => {
                           this.state.project.ref_corpus = corpus.value
                           this.refreshCreateBtnDisabled()
                        },
                        dropdownOptions: {
                           constrainWidth: false
                        }
                     })
                     if(this.state.project.language){
                        this.refreshReferenceCorporaList()
                     }
                  })
                  .always(() => {
                     this.update({isCorporaLoading: false})
                  })
            this.store.loadWorkflows()
                  .done(response => {
                     this.state.workflows = response.workflows
                  })
                  .always(() => {
                     this.update({isWorkflowLoading: false})
                  })

            $("#language").autocomplete({
               data: this.store.data.siteconfig.langs.map(lang => {
                  return {
                     value: lang.code,
                     label: lang.lang
                  }
               }),
               onAutocomplete: language => {
                  this.state.project.language = language.value
                  this.state.project.ref_corpus = null
                  this.update()
                  $("#ref_corpus").val("")
                  this.refreshReferenceCorporaList()
               }
            })

            $("#name", this.root).focus()
         },

         onUpdated(){
            window.initFormSelects(this.root)
         },

         onNameInput(evt){
            this.state.project.name = evt.target.value
            this.refreshCreateBtnDisabled()
         },

         onDescriptionInput(evt){
            this.state.project.description = evt.target.value
         },

         refreshReferenceCorporaList(){
            if(this.state.corpora){
               let corpora = this.state.corpora.filter(corpus => corpus.language_id == this.state.project.language)
                     .map(corpus => {
                        return {
                              value: corpus.corpname,
                              label: corpus.name,
                              info: corpus.language_name
                           }
                        })
               let instance = M.Autocomplete.getInstance($("#ref_corpus"))
               instance && instance.updateData(corpora)
            }
         },

         onAddMember(type, member){
            this.state.project[type].push(member.email)
            this.update()
            $(`#${type}MemberDropdown input`).val("")
            this.refreshCreateBtnDisabled()
         },

         onRemoveMemberClick(type, email, evt){
            evt.stopPropagation()
            this.state.project[type] = this.state.project[type].filter(u => u.email != email)
            this.update()
            this.refreshCreateBtnDisabled()
         },

         onSourceDictionaryChange(evt){
            this.state.project.source_dict = evt.target.value
            this.refreshCreateBtnDisabled()
         },

         onWorkflowChange(evt){
            this.state.project.workflow = evt.target.value
            this.refreshCreateBtnDisabled()
         },

         onCreateProjectClick(){
            this.update({isBusy: true})
            let project = {



               //TODO
               id: Math.round(Math.random() * 10000000),
               name: this.state.project.name,
               description: this.state.project.description,
               source_dict_id: this.state.project.source_dict,
               ref_corpus: this.state.project.ref_corpus,
               language: this.state.project.language,
               workflow: this.state.project.workflow,
               managers: JSON.stringify(this.state.project.managers),
               annotators: JSON.stringify(this.state.project.editors)
            }
            this.store.createProject(project)
                  .done(response => {
                     if(!response.error){
                        route("projects/dashboard")
                     }
                  })
                  .always(() => {
                     this.update({isBusy: false})
                  })
         },

         getMemberList(type, members, query){
            if(!members.length && window.isEmail(query) && !this.state.project[type].includes(query)){
               return [{
                  html: `create  user <b>${query}</b>`,
                  value: query,
                  user: {
                     email: query
                  }
               }]
            }
            return members.filter(member => !this.state.project[type].includes(member.email))
         },

         refreshCreateBtnDisabled(){
            let disabled = !this.state.project.name
                  || !this.state.project.managers.length
                  || !this.state.project.editors.length
                  || !this.state.project.source_dict
                  || !this.state.project.workflow
                  //|| !this.state.project.ref_corpus
            $("#btnCreateProject").toggleClass("disabled", disabled)
         }
      }
   </script>

   <style type="scss">
      .input-field{
         width: 400px;
      }
      .columnTeam{
         margin-left: 30px;
         padding-left: 30px;
         border-left: 1px solid lightgrey;
         label{
            min-width: 90px;
         }
         .teamRole{
            gap: 20px;
         }
         .noTeamMember{
            min-height: 37px;
         }
      }
   </style>
</projects-new>
