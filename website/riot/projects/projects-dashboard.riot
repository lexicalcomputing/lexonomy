<projects-dashboard>
   <loading-overlay if={state.isBusy}/>
   <a href="#projects/new"
         class="btn right">
      new project
      <i class="material-icons left">add</i>
   </a>
   <label if={state.archived_projects.length > 0}
         class="checkbox mr-8 mt-2 right">
      <input type="checkbox"
            checked={state.showArchived}
            onclick={onShowArchivedChange}/>
      <span>
         show archived ({state.archived_projects.length})
      </span>
   </label>
   <h1 class="pageTitle">
      Projects
   </h1>
   <div if={state.error}
         class="center-align grey-text grey lighten-5 pt-8 pb-8">
      <h3>
         Could not load projects
      </h3>
      <div>
         {state.error}
      </div>
   </div>
   <template if={!state.error && state.projectsLoaded}>
      <table if={state.displayedProjects.length && state.displayedProjects}
            class="projectTable highlight">
         <thead>
            <tr>
               <th class="pl-8">
                  Name
               </th>
               <th>
                  Language
               </th>
               <th>
                  Central Dictionary
               </th>
               <!--th>
                  Tasks
               </th-->
               <th>
                  Managers
               </th>
               <th>
                  Project ID
               </th>
               <th>
               </th>
            </tr>
         </thead>
         <tbody>
            <tr each={project in state.displayedProjects}
                  class="positionRelative {project.isBusy ? 'pointerEventsNone' : ''} {project.archived ? 'grey lighten-4' : ''}"
                  onclick={onProjectClick.bind(this, project.projectID)}>
               <td>
                  <span class="{project.active ? 'green-text' : 'red-text'} ml-2 mr-2 tooltipped"
                        data-tooltip={project.active ? 'active' : 'inactive'}>
                     ‚óè
                  </span>
                  {project.project_name}
                  <div if={project.isBusy}
                        class="projectLoadingOverlay">
                     <i class="material-icons spin grey-text">donut_large</i>
                  </div>
               </td>
               <td>
                  {store.getLanguageName(project.language)}
               </td>
               <td>
                  <a href="#{project.source_dict}"
                        class="sourceDictLink verticalMiddle pl-2"
                        onclick={window.stopEvtPropagation}>
                     <trim-text text={store.getDictionary(project.source_dict)?.title} 
                        max=20/>
                     <i class="pl-2 material-icons tiny">open_in_new</i>
                  </a>
               </td>
               <!--td>
                  <table class="workflowTable">
                     <tr each={workflow in project.workflow}>
                        <td>
                           {workflow.name}
                        </td>
                        <td>
                           <div class="workflowProgressBar progress">
                              <div class="determinate {window.getProgressColorClass(workflow.progress)}"
                                    style="width: {workflow.progress * 100}%"></div>
                           </div>
                        </td>
                        <td>
                           <span class="workflowProgressPercentage">
                              {workflow.progress * 100}%
                           </span>
                        </td>
                     </tr>
                  </table>
               </td-->
               <td>
                  {project.managers.join(", ")}
               </td>
               <td>
                  {project.projectID}
               </td>
               <td>
                  <div class="buttons">
                     <button if={!!project.description}
                           class="btn btn-flat btn-floating tooltipped"
                           data-tooltip="Project description"
                           onclick={onShowDescriptionClick.bind(this, project)}>
                        <i class="material-icons">
                           info_outline
                        </i>
                     </button>
                     <button if={project.archived}
                           class="btn btn-flat btn-floating tooltipped"
                           data-tooltip="Unarchive project"
                           onclick={onUnarchiveClick.bind(this, project)}>
                        <i class="material-icons">
                           unarchive
                        </i>
                     </button>
                     <button if={!project.archived}
                           class="btn btn-flat btn-floating tooltipped"
                           data-tooltip="Archive project"
                           onclick={onArchiveClick.bind(this, project)}>
                        <i class="material-icons">
                           archive
                        </i>
                     </button>
                  </div>
               </td>
            </tr>
         </tbody>
      </table>

      <div if={!state.displayedProjects.length && !state.error}
            class="center-align grey-text grey lighten-5 pt-8 pb-8">
         <h3>
            No projects
         </h3>
         <div>
            Create a <a href="#projects/new">new project</a>.
         </div>
      </div>
   </template>


   <script>
      export default{
         bindings: [["dispatcher", "userCameBack", "reloadProjects"],
                    ["store", "isProjectsLoadingChanged", "update"]],

         state:{
            isBusy: true,
            projectsLoaded: false,
            projects: [],
            error: null,
            showArchived: false,
            displayedProjects: [],
            archived_projects: []
         },

         onBeforeMount(){
            this.reloadProjects()
            this.store.loadWorkflowList()
         },

         onShowArchivedChange(evt){
            this.state.showArchived = !this.state.showArchived
            this.refreshDisplayedProjects()
            this.update()
         },

         onProjectClick(projectID){
            route(`projects/view/${projectID}`)
         },

         onShowDescriptionClick(project, evt){
            evt.stopPropagation()
            window.modal.open({
               title: project.project_name,
               tag: "raw-html",
               props: {
                  content: project.description
               }
            })
         },

         onArchiveClick(project, evt){
            evt.stopPropagation()
            project.isBusy = true
            this.store.archiveProject(project.projectID)
                  .done(response => {
                     if(response.success){
                        this.reloadProjects()
                     }
                  })
                  .always(response => {
                     project.isBusy = false
                     this.update()
                  })
            this.update()
         },

         onUnarchiveClick(project, evt){
            evt.stopPropagation()
            project.isBusy = true
            this.store.unarchiveProject(project.projectID)
                  .done(response => {
                     if(response.success){
                        this.reloadProjects()
                     }
                  })
                  .always(response => {
                     project.isBusy = false
                     this.update()
                  })
            this.update()
         },

         reloadProjects(){
            this.store.loadProjects()
                  .done(response => {
                     if(!response.error){
                        this.state.error = null
                        this.state.projects = response.projects_active
                        this.state.archived_projects = response.projects_archived.map(project => {
                           project.archived = true
                           return project
                        })
                        this.state.projectsLoaded = true
                        this.refreshDisplayedProjects()
                     } else {
                        this.state.error = response.error
                     }
                  })
                  .fail(response => {
                     this.state.error = response && response.error ? response.error : "Unknown error"
                  })
                  .always(response => {
                     this.update({isBusy: false})
                  })
         },

         refreshDisplayedProjects(){
            this.state.displayedProjects = [...this.state.projects]
            if(this.state.showArchived){
               this.state.displayedProjects.push(...this.state.archived_projects)
            }
         }
      }
   </script>


   <style type="scss">
      .noProject{
         min-height: 50vh;
         text-align: center;
         padding-top: 20vh;
      }
      .noProjectTitle{
         margin-top: -30px;
         font-size: 30px;
      }
      .workflowTable{
         width: auto;
         tr{
            border-bottom: 0;
         }
         td{
            padding: 0 5px;
         }
         .workflowProgressBar{
            width: 70px;
            margin: 0;
         }
         .workflowProgressPercentage{
            font-size: 0.8rem;
            color: grey;
         }
      }
      .projectTable{
         thead{
            th:last-child{
               width: 1px;
            }
         }
         tbody{
            tr{
               cursor: pointer;
               button{
                  opacity: 0.5
               }
               &:hover{
                  button{
                     opacity: 1
                  }
               }
            }
         }
      }
      .sourceDictLink{
         text-decoration: none;
      }
      .projectLoadingOverlay{
         position: absolute;
         left: 0;
         right: 0;
         top: 0;
         bottom: 0;
         background-color: rgb(250 250 250 / 85%);
         z-index: 100;
         text-align: center;
         i{
            position: absolute;
            top: calc(50% - 12px);
            left: calc(50% - 12px);
         }
      }
   </style>
</projects-dashboard>
