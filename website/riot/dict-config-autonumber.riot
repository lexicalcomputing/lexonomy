<dict-config-autonumber>
   <loading-overlay if={state.isSaving}/>
   <h1 class="pageTitle">Auto-numbering of elements</h1>
   <div class="row">
      <p>If you need to number some of entry elements automatically, Lexonomy can do that for you. First, go to Entry structure and add element where you want to store the number. Eg. in element <tt>sense</tt> add child element <tt>number</tt>. When you're ready, select element to number (eg. <tt>sense</tt>) and element to store numbering (eg. <tt>number</tt>). Lexonomy will fill the numbers where missing.</p>
   </div>
   <div class="formWrapper displayFlex">
      <div class="input-field">
         <element-select on-change={onElementChange}/>
         <label for="elements">Element to number</label>
      </div>
      <div if={state.storeElementList.length}
            class="input-field">
         <select onchange={onStoreElementChange}>
            <option each={element in state.storeElementList}
                  value={element}>{store.getElementDisplayedName(element)}</option>
         </select>
         <label for="children">Add numbers to</label>
      </div>
      <div if={!state.storeElementList.length}
            class="input-field grey-text"
            style="padding-top: 10px;">
         element has no children
      </div>
      <div class="input-field">
         <a class="btn waves-effect waves-light {state.storeElement ? '' : 'disabled'}"
               onclick={addNumbers}>
            <i class="material-icons right">send</i>Start auto-numbering
         </a>
      </div>
   </div>
   <div if={state.info}
         class="section">
      <div class="message messageInfo">
         {state.info}
      </div>
   </div>
   <br><br>
   <dict-config-buttons show-save={false}/>

   <script>
      export default {
         state: {
            isSaving: false,
            info: "",
            countElement: null,
            storeElement: null,
            storeElementList: []
         },

         onBeforeMount(){
            this.state.countElement = this.dictData.config.structure.root
            this.state.storeElementList = this.dictData.config.structure.elements[this.state.countElement].children
            this.state.storeElement = this.state.storeElementList[0]
         },

         onMounted() {
            window.initFormSelects(this.root)
         },

         onUpdated(){
            window.initFormSelects(this.root)
         },

         onElementChange(elementPath) {
            let children = this.dictData.config.structure.elements[elementPath].children
            this.update({
               countElement: elementPath,
               storeElementList: children,
               storeElement: children[0]
            })
         },

         onStoreElementChange(element){
            this.update({storeElement: element})
         },

         addNumbers() {
            if(this.state.countElement && this.state.storeElement) {
               this.update({
                  isSaving: true,
                  info: ""
               })
               this.store.autonumberElements(this.state.countElement, this.state.storeElement)
                     .done(response => {
                        if(response.success) {
                           this.update({info: `Auto-numbering finished, ${response.processed} entries updated.`})
                        }
                     })
                     .always(() => this.update({isSaving: false}))
            }
         }
      }
   </script>

   <style type="scss">
      .formWrapper{
         gap: 30px;
         &>*{
            max-width: 15.6rem;
            width: 15.6rem;
         }
      }
   </style>
</dict-config-autonumber>
