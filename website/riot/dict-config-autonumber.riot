<dict-config-autonumber>
   <loading-overlay if={state.isSaving}/>
   <h1>Auto-numbering of elements</h1>
   <div class="row">
      <p>If you need to number some of entry elements automatically, Lexonomy can do that for you. First, go to Entry structure and add element where you want to store the number. Eg. in element <tt>sense</tt> add child element <tt>number</tt>. When you're ready, select element to number (eg. <tt>sense</tt>) and element to store numbering (eg. <tt>number</tt>). Lexonomy will fill the numbers where missing.</p>
   </div>
   <div class="row">
      <div class="input-field col s4">
         <select id="elements"
               onchange={ changeElem }></select>
         <label for="elements">Element to number</label>
      </div>
      <div id="hasChildren"
            class="input-field col s4">
         <select id="children"></select>
         <label for="children">Add numbers to</label>
      </div>
      <div id="hasNoChildren"
            class="input-field col s4 grey-text"
            style="display: none; padding-top: 10px;">
         element has no children
      </div>
      <div class="input-field col s3">
         <a class="btn waves-effect waves-light"
               onclick={ addNumbers }
               id="submit_button">
            <i class="material-icons right">send</i>Start auto-numbering
         </a>
      </div>
   </div>
   <div if={state.info}
         class="section">
      <div class="message messageInfo">
         {state.info}
      </div>
   </div>
   <br><br>
   <dict-config-buttons show-save={false}/>

   <script>
      export default {
         state: {
            isSaving: false,
            data: null,
            info: ""
         },

         onMounted() {
            if (this.dictData.config.structure && this.dictData.config.structure.elements) {
               if ($('#elements option').length == 0) {
                  Object.entries(this.dictData.config.structure.elements).forEach(([key, info]) => {
                     $('#elements').append('<option value="' + key + '">' + key + '</option>')
                  })
                  this.changeElem()
               } else {
                  $('select').formSelect()
               }
               M.updateTextFields()
            }
         },

         changeElem() {
            $("#children").find('option').remove()
            var elem = $("#elements").val()
            this.dictData.config.structure.elements[elem].children.forEach(childName => {
               $("#children").append(`<option value="${childName}">${childName}</option>`)
            })
            var hasChildren = !!this.dictData.config.structure.elements[elem].children.length
            $("#submit_button").toggleClass("disabled", !hasChildren)
            $("#hasChildren").toggle(hasChildren)
            $("#hasNoChildren").toggle(!hasChildren)

            $('select').formSelect()
         },

         addNumbers() {
            var countElem = $("#elements").val()
            var storeElem = $("#children").val()
            if (countElem && storeElem) {
               this.update({
                  isSaving: true,
                  info: ''
               })
               this.store.autonumberElements(countElem, storeElem)
                     .done(response => {
                        if(response.success) {
                           this.update({info: 'Auto-numbering finished, ' + response.processed + ' entries updated.'})
                        }
                     })
                     .always(() => this.update({isSaving: false}))
            }
         }
      }
   </script>

</dict-config-autonumber>
