<dict-config-links>
   <dict-config-nav dictId={ dictId } dictTitle={ props.dictDetails.title } configId={ configId } configTitle={ configTitle }/>
   <h3>Manual linking between entries</h3>
   <div>
      <p>Elements listed here can be used as target of cross-reference link. For each element, specify unique identifier in the form of placeholders <tt>'%(element)'</tt>. Eg. element <tt>entry</tt> can have identifier <tt>%(lemma)-%(pos)</tt>, element <tt>sense</tt> can have identifier <tt>%(lemma)-%(number)</tt>. Optionally, specify element you want to show as preview when selecting links.</p>
      <div if={isLoading} class="center-align grey-text">
         <h3>loading elements...</h3>
      </div>
      <template if={!isLoading}>
         <table if={configData.elements.length}>
            <thead>
               <tr>
                  <th>Linking element</th>
                  <th>Idenitifier</th>
                  <th>Preview</th>
                  <th></th>
               </tr>
            </thead>
            <tbody>
               <tr each={ (element, idx) in configData.elements } idx={ idx }>
                  <td>
                     <div class="input-field">
                        <select linkelement={element.linkElement}></select>
                     </div>
                  </td>
                  <td>
                     <div class="input-field">
                        <input type="text" value={ element.identifier } name="identifier" onchange={onItemChange} />
                     </div>
                  </td>
                  <td>
                     <div class="input-field">
                        <input type="text" value={ element.preview } name="preview" onchange={onItemChange}/>
                     </div>
                  </td>
                  <td>
                     <a class="btn btn-floating right" data-element={ element.linkElement } onclick={ doDeleteEl.bind(this, element.linkElement) }>
                        <i class="material-icons">delete</i>
                     </a>
                  </td>
               </tr>
            </tbody>
         </table>
         <div class="buttons">
            <button class="btn {unusedElements.length ? '' : 'disabled'}" onclick={ doAddEl }>
               add element
               <i class="material-icons right">add</i>
            </button>
            <button class="btn waves-effect waves-light"
                  onclick={saveData}
                  id="submit_button">
               Save
               <i class="material-icons right">save</i>
            </button>
         </div>
      </template>
      <br><br>
      <div>
         <h4>Automatic linking using NAISC</h4>
      </div>
      <div>
         <div>
            <label for="otherdict">Other dictionary code</label>
         </div>
         <div class="input-field inlineBlock" style="max-width: 400px;">
            <input type="text" id="otherdict" oninput={ checkOtherDict }/>
         </div>
         <div class="input-field inlineBlock">
            <button class="btn waves-effect waves-light" id="naisc_link" onclick={ startLinking } data-bgjob="" disabled style="margin-left: 10px;">Checking status, wait...</button>
         </div>
      </div>
   </div>
   <br>
   <a href="#{dictId}/config" class="btn btn-secondary btn-flat">Back</a>

   <style>
      tbody tr{
         border-bottom: none;
      }
      th, td{
         padding: 10px 10px 0 0;
      }
      td{
         vertical-align: top;
      }
      td .input-field{
         margin: 0;
      }
   </style>

   <script>
      export default {
         isLoading: true,
         dictId: '',
         configId: '',
         configTitle: 'Linking',
         configData: {elements:[]},
         unusedElements: [],

         doDeleteEl(element) {
            this.configData.elements = this.configData.elements.filter(val => val.linkElement != element);
            this.update()
         },

         doAddEl(event) {
            this.configData.elements.push({linkElement: this.unusedElements[0], identifier: "", preview: ""});
            this.update();
         },

         onMounted() {
            this.dictId = this.props.dictId;
            this.configId = this.props.configId;
            this.props.loadDictDetail();
            this.fillConfigForm();
            M.updateTextFields();
            console.log(this.props);

            //check NAISC status
            $.get(window.API_URL + this.dictId + "/linking.json", (response) => {
               if (response.bgjob != -1) {
                  $("#naisc_link").html("Linking to '" + response.otherdictID + "' already in progress, please wait...");
               } else {
                  $("#naisc_link").html("Start linking");
               }
            });
         },

         onBeforeUpdate(){
            this.refreshUnusedElements()
         },

         onUpdated() {
            if (this.props.dictConfigs.xema && this.props.dictConfigs.xema.elements) {
               $("select").each(function(idx, el){
                  var $select = $(el)
                  var instance = M.FormSelect.getInstance(el);
                  $select.off("change", this.onElementChange)
                  instance && instance.destroy()
                  $select.empty()
                  var key = $select.attr("linkelement")
                  $select.append(`<option value="${key}" selected}>${key}</option>`);
                  this.unusedElements.forEach(key => {
                     $select.append(`<option value="${key}">${key}</option>`);
                  });
                  $('select').formSelect()
                     .on("change", this.onElementChange);
               }.bind(this))
            }
         },

         onElementChange(evt){
            var idx = $(evt.target).closest("tr").attr("idx")
            this.configData.elements[idx].linkElement = $(evt.target).find("option:selected").attr("value")
            this.update()
         },

         onItemChange(evt){
            var idx = $(evt.target).closest("tr").attr("idx")
            this.configData.elements[idx][evt.target.name] = evt.target.value
         },

         refreshUnusedElements(){
            var savedElements = this.configData.elements.map(e => e.linkElement)
            this.unusedElements = Object.keys(this.props.dictConfigs.xema.elements).filter(el => {
               return !savedElements.includes(el)
            })
         },

         checkOtherDict() {
            $("#naisc_link").prop("disabled", $("#otherdict").val().length == 0);
         },

         startLinking() {
            var otherdict = $("#otherdict").val();
            $("#naisc_link").html("Initiating linking ...");
            $("#naisc_link").prop("disabled", true);
            $.get(window.API_URL + this.dictId + "/linknaisc.json", {"otherdictID": otherdict}).done(function(data) {
               $("#naisc_link").html("Linking in progress, please wait...");
               $("#naisc_link").data("bgjob", data["bgjob"]);
            });
            this.waitForLinking(otherdict, this.dictId);
         },

         waitForLinking(otherdict, dictId) {
            var naiscTimer = setInterval(checkNaisc, 1000);
            function checkNaisc() {
               var jobid = $("#naisc_link").data("bgjob");
               if (jobid != "") {
                  $.get(window.API_URL + dictId + "/naiscprogress.json", {"otherdictID": otherdict, "jobid": jobid}).done(function(data) {
                     if (data["status"] == "finished") {
                        clearInterval(naiscTimer);
                        $("#naisc_link").html("Linking done. <a href='#/" + this.dictId + "/links'>See results.</a>");
                        $("#naisc_link").data("bgjob", "");
                     } else if (data["status"] == "failed") {
                        clearInterval(naiscTimer);
                        $("#naisc_link").html("Linking failed :(");
                        $("#naisc_link").data("bgjob", "");
                     }
                  });
               }
            }
         },

         async fillConfigForm() {
            this.props.loadConfigData(this.configId).then((response)=>{
               this.isLoading = false
               this.configData = {elements:[]}
               for (var key in response) {
                  this.configData.elements.push(response[key]);
               }
               this.update();
            });
         },

         saveData() {
            var data = {}
            this.configData.elements.forEach(item => {
               data[item.linkElement] = item
            })
            $('#submit_button').html('Saving...');
            this.props.saveConfigData(this.configId, data);
         }
      }
   </script>

</dict-config-links>
