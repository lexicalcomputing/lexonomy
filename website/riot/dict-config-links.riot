<dict-config-links>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <h1 class="pageTitle">Manual linking between entries</h1>
   <dict-configuration-issues config-id="links"/>
   <div>
      <p>Elements listed here can be used as target of cross-reference link. For each element, specify unique identifier in the form of placeholders <tt>'%(element)'</tt>. Eg. element <tt>entry</tt> can have identifier <tt>%(lemma)-%(pos)</tt>, element <tt>sense</tt> can have identifier <tt>%(lemma)-%(number)</tt>. Optionally, specify element you want to show as preview when selecting links.</p>
      <template if={!state.isLoading}>
         <table if={state.data.elements.length}
               class="linkTable">
            <thead>
               <tr>
                  <th>Linking element</th>
                  <th>Identifier</th>
                  <th>Preview</th>
                  <th></th>
               </tr>
            </thead>
            <tbody>
               <tr each={(element, idx) in state.data.elements}
                     idx={idx}>
                  <td>
                     <div class="input-field">
                        <select linkelement={element.linkElement}></select>
                     </div>
                  </td>
                  <td>
                     <div class="input-field">
                        <input type="text"
                              value={element.identifier}
                              name="identifier"
                              onchange={onItemChange} />
                     </div>
                  </td>
                  <td>
                     <div class="input-field">
                        <input type="text"
                              value={element.preview}
                              name="preview"
                              onchange={onItemChange}/>
                     </div>
                  </td>
                  <td>
                     <a class="btn btn-floating right"
                           data-element={element.linkElement}
                           onclick={onDeleteLinkClick.bind(this, element.linkElement)}>
                        <i class="material-icons">delete</i>
                     </a>
                  </td>
               </tr>
            </tbody>
         </table>
         <div class="buttons">
            <button class="btn {state.unusedElements.length ? '' : 'disabled'}"
                  onclick={onAddLinkClick}>
               add element
               <i class="material-icons right">add</i>
            </button>
            <button class="btn btn-primary waves-effect waves-light"
                  onclick={saveData}
                  id="submit_button">
               Save
               <i class="material-icons right">save</i>
            </button>
         </div>
      </template>
   </div>
   <br>
   <a href="javascript:window.history.back()"
         class="btn btn-secondary btn-flat">Back</a>

   <script>
   export default {
         state: {
            isLoading: true,
            isSaving: false,
            unusedElements: [],
            data: {elements: []}
         },

         onMounted() {
            this.store.loadDictionaryConfig("links")
                  .done(response => {
                     this.state.data = {elements: Object.values(response.content)}
                  })
                  .always(() => {
                     this.update({isLoading: false})
                  })
         },

         onBeforeUpdate(){
            this.refreshUnusedElements()
         },

         onUpdated() {
            if (this.dictData.config.structure && this.dictData.config.structure.elements) {
               $(".linkTable select").each(function(idx, el){
                  var $select = $(el)
                  var instance = M.FormSelect.getInstance(el)
                  $select.off("change", this.onElementChange)
                  instance && instance.destroy()
                  $select.empty()
                  var key = $select.attr("linkelement")
                  $select.append(`<option value="${key}" selected}>${key}</option>`)
                  this.state.unusedElements.forEach(key => {
                     $select.append(`<option value="${key}">${this.store.getElementDisplayedName(key)}</option>`)
                  })
                  $('.linkTable select').formSelect()
                     .on("change", this.onElementChange)
               }.bind(this))
            }
         },

         onDeleteLinkClick(element) {
            this.state.data.elements = this.state.data.elements.filter(val => val.linkElement != element)
            this.update()
         },

         onAddLinkClick(event) {
            this.state.data.elements.push({
               linkElement: this.state.unusedElements[0],
               identifier: "",
               preview: ""
            })
            this.update()
         },

         onElementChange(evt){
            var idx = $(evt.target).closest("tr").attr("idx")
            this.state.data.elements[idx].linkElement = $(evt.target).find("option:selected").attr("value")
            this.update()
         },

         onItemChange(evt){
            var idx = $(evt.target).closest("tr").attr("idx")
            this.state.data.elements[idx][evt.target.name] = evt.target.value
         },

         refreshUnusedElements(){
            var savedElements = this.state.data.elements.map(e => e.linkElement)
            this.state.unusedElements = Object.keys(this.dictData.config.structure.elements).filter(el => {
               return !savedElements.includes(el)
            })
         },

         saveData() {
            var data = {}
            this.state.data.elements.forEach(item => {
               data[item.linkElement] = item
            })
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("links", data)
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>

   <style>
      tbody tr{
         border-bottom: none;
      }
      th, td{
         padding: 10px 10px 0 0;
      }
      td{
         vertical-align: top;
      }
      td .input-field{
         margin: 0;
      }
   </style>
</dict-config-links>
