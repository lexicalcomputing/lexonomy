<structure-dnd-zone>
   <div class="structure-dnd-wrapper">
      <div class="structure-zone"
            ondragenter={onDragEnter}
            ondragleave={onDragLeave}
            ondragover={onDragOver}
            ondrop={onDrop}
            style="display: none;">
         <div class="structure-bar"></div>
      </div>
   </div>

   <script>
      export default{
         bindings: [["structureStore", "onDndStart", "onDndStart"],
                    ["structureStore", "onDndStop", "onDndStop"]],

         state: {
            active: false
         },

         onBeforeMount(){
            this.structureStore = window.structureEditorStore
         },

         onDndStart(){
            if(!this.state.active){
               this.state.lastEvtX = null
               this.state.axisXIndentThresholds = []
               this.state.availableIndents = this.getAvailableIndents()
               if(this.state.availableIndents.length){
                  if(this.state.availableIndents.length >= 2) {
                     for (let i = 0; i < this.state.availableIndents.length - 1; i++) {
                        this.state.axisXIndentThresholds.push((this.state.availableIndents[i] + this.state.availableIndents[i + 1]) / 2 * 30 + 24 /* left margin of item */)
                     }
                  } else {
                     this.state.axisXIndentThresholds = [Infinity]
                  }
                  this.update({active: true})
                  $(".structure-bar", this.root).css("margin-left", 40)
                  $(".structure-zone", this.root).show()
               }
            }
         },

         getAvailableIndents(){
            let indents = []
            let element = this.props.element
            let draggedElement = this.structureStore.data.draggedElement
            while(element){
               if(!element.path.startsWith(draggedElement.path)  // do not allow to drop to child of dragged element
                  && (!element.children.find(childPath => childPath.split(".").pop() == draggedElement.name)  // dropzone element does not already has element of this name
                           || element.path == draggedElement.parent)  // allow to drop to the same parent
                  ){
                  indents.unshift(element.indent + 1)
               }
               element = this.structureStore.getElementByPath(element.parent)
            }
            return indents
         },

         onDndStop(){
            if(this.state.active){
               this.state.active = false
               $(".structure-zone", this.root).hide()
            }
         },

         onDragEnter(){
            $(this.root).addClass("structure-hover")
         },

         onDragOver(evt){
            evt.preventDefault()
            if(this.state.lastEvtX != evt.clientX){
               this.state.lastEvtX = evt.clientX
               let fromLeft = evt.clientX - $("structure-editor")[0].getBoundingClientRect().left
               let indentIdx
               for(indentIdx = 0; indentIdx <= this.state.axisXIndentThresholds.length && this.state.axisXIndentThresholds[indentIdx] < fromLeft; indentIdx++){}
               this.state.indent = this.state.availableIndents[indentIdx]

               $(".structure-bar", this.root).css("margin-left", this.state.indent * 30)
            }
         },

         onDragLeave(){
            $(this.root).removeClass("structure-hover")
         },

         onDrop(evt){
            let ancestors = this.structureStore.getAllAncestors(this.props.element.path)
            let parentElement = ancestors.find(e => e.indent == this.state.indent - 1)
            let previousSiblingElement = ancestors.find(e => e.indent == this.state.indent)
            let position = previousSiblingElement ? parentElement.children.indexOf(previousSiblingElement.path) + 1 : 0
            this.structureStore.moveElementToAnotherParent(this.structureStore.data.draggedElement, parentElement, position)
            this.structureStore.stopElementDragging()
            $(this.root).removeClass("structure-hover")
         }
      }
   </script>

   <style type="scss">
      :host{
         transition: 0.2s;
         position: relative;
         display: block;
         min-height: 2px;
         .structure-dnd-wrapper{
            left: 0;
            width: 200px;
         }
         .structure-zone{
            transition: 0.2s;
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
         }
         .structure-bar{
            transition: min-height 0.2s;
            position: relative;
            pointer-events: none;
            min-height: 3px;
            top: 10px;
            max-width: 150px;
            margin-left: 40px;
         }
         .structure-zone{
            z-index: 998;
            min-height: 30px;
            top: -10px;
            bottom: -10px;
            left: 0px;
            right: 20px;
         }
         &.structure-hover{
            min-height: 30px;
            .structure-bar{
               min-height: 30px;
               background-color: #eee;
               border: 2px dashed #ccc;
            }
         }
      }
   </style>
</structure-dnd-zone>
