<dict-entry-filter>
   <ul class="tabs alignCenter">
      <li class="tab {dictData.search.tab == "basic" ? "active" : ""}">
         <a onclick={onTabClick.bind(this, "basic")}>simple</a>
      </li>
      <li class="tab {dictData.search.tab == "advanced" ? "active" : ""}">
         <a onclick={onTabClick.bind(this, "advanced")}>advanced</a>
      </li>
      <span class="borderLeft ml-auto pl-2 pr-2 hint">
         <i class="material-icons tooltipped grey-text"
               data-tooltip="In basic tab you can start search with '#' to search by entry ID (e.g. '#17').">help_outline</i>
      </span>
   </ul>
   <div class="filterForm tabContent">
      <div if={dictData.search.tab == "basic"}>
         <div class="displayFlex gap10">
            <span class="searchBox inputWithRightIcon">
               <input type="text"
                     id="searchtext"
                     placeholder="search"
                     class="input-field"
                     value={dictData.search.searchtext}
                     oninput={onSearchtextInput}
                     onkeyup={onSearchtextKeyUp}
                     onkeydown={onSearchtextKeyDown}/>
               <i onclick={onClearFilterClick}
                  class="material-icons rightIcon grey-text clickable">close</i>
            </span>
            <select id="modifier"
                  onchange={onModifierChange}>
               <template if={dictData.config.searchability.templates.length}>
                  <optgroup label="Custom templates">
                     <option each={template in dictData.config.searchability.templates}
                           value="template_{template.label}" selected={dictData.search.modifier == "template_" + template.label}>{template.label}</option>
                  </optgroup>
                  <optgroup label="Default options">
                     <option value="start" selected={!dictData.search.modifier || dictData.search.modifier == "start"}>starts like this</option>
                     <option value="exact" selected={dictData.search.modifier == "exact"}>is exactly</option>
                     <option value="substring" selected={dictData.search.modifier == "substring"}>contains</option>
                     <option value="id" selected={dictData.search.modifier == "id"}>entry ID is</option>
                  </optgroup>
               </template>
               <template if={!dictData.config.searchability.templates.length}>
                  <option value="start" selected={!dictData.search.modifier || dictData.search.modifier == "start"}>starts like this</option>
                  <option value="exact" selected={dictData.search.modifier == "exact"}>is exactly</option>
                  <option value="substring" selected={dictData.search.modifier == "substring"}>contains</option>
                  <option value="id" selected={dictData.search.modifier == "id"}>entry ID is</option>
               </template>
            </select>
            <button if={state.hasFilter}
                  class="buttonWithCounter btn btn-flat btn-floating {state.showFilter ? 'btn-primary' : ''} tooltipped"
                  data-tooltip={state.showFilter ? "Hide filters" : (typeof dictData.search.isCompleted == "boolean" ? "Show filters (1 filter is active)" : "Show filters")}
                  onclick={onToggleFilterClick}>
               <span class="iconWrapper">
                  <i class="material-icons {state.showFilter ? 'white-text' : ''}">filter_list</i>
                  <span if={!state.showFilter && typeof dictData.search.isCompleted == "boolean"}
                        class="iconCount">
                     1
                  </span>
               </span>
            </button>
         </div>

         <div if={state.showFilter}
               class="pt-2 pl-2 pr-2">
            <div class="inputField">
               <label>
                  <input type="checkbox"
                        checked={dictData.search.isCompleted === true}
                        onclick={onIsCompletedClick.bind(this, true)}>
                  <span>Only complete</span>
               </label>
            </div>
            <div class="inputField mb-2">
               <label>
                  <input type="checkbox"
                        checked={dictData.search.isCompleted === false}
                        onclick={onIsCompletedClick.bind(this, false)}>
                  <span>Only incomplete</span>
               </label>
            </div>
         </div>
      </div>

      <div if={dictData.search.tab == "advanced"}
            class="displayFlex gap10">
         <span class="searchBox inputWithRightIcon">
            <span class="textareaWrapper">
               <textarea id="advanced_query"
                     class="materialize-textarea monospace"
                     onkeydown={onAdvancedQueryKeyDown}
                     oninput={onAdvancedQueryInput}
                     onfocus={onAdvancedQueryFocus}
                     onblur={onAdvancedQueryBlur}>
                  {dictData.search.advanced_query}
               </textarea>
            </span>
            <i onclick={onClearFilterClick}
               class="material-icons rightIcon grey-text clickable">close</i>
            <div if={!state.isValid}
                  class="red-text" style="font-size: 0.8em;">{state.parseError}</div>
         </span>
         <button class="toggleQueryBuilderBtn btn btn-flat btn-floating tooltipped"
               data-tooltip="Open Search query builder"
               onclick={onToggleQueryBuilderBtnClick}>
            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 256 256" xml:space="preserve">
               <g><g><g><path fill="#343434" d="M73.9,138.4L58.7,89.2L10,75.1l48.7-15.5l14.8-49.3l14.8,49.3l48.6,15L88.3,89.2L73.9,138.4z M204.1,73.6l-20.9-20.9L222.9,13c0.9-1,2.1-1.5,3.4-1.5s2.5,0.5,3.4,1.5l14,13.9c0.9,1,1.4,2.1,1.4,3.5s-0.5,2.5-1.4,3.5L204.1,73.6z M26.6,244.2l-14-13.9c-0.9-1-1.4-2.1-1.4-3.5s0.5-2.5,1.4-3.5l155-155l20.9,21l-155,154.8c-0.9,1-2.1,1.5-3.4,1.5C28.6,245.7,27.5,245.2,26.6,244.2z M212.1,167l-7.8-26.2l-26.2-7.8l26.2-7.7l7.8-26.3l7.7,26.3L246,133l-26.2,7.8L212.1,167z M162.8,237l-9.9-33.9l-33.9-9.9l33.9-9.9l9.9-33.9l9.9,33.9l33.8,9.9l-33.8,9.9L162.8,237z"/>
               </g></g></g>
            </svg>
         </button>
      </div>
   </div>

   <script>
      export default {
         bindings: [["store", "toggleQueryBuilder", "onToggleQueryBuilder"],
                    ["store", "searchParamsChanged", "onSearchParamsChanged"]],

         state: {
            isValid: null,
            parseError: "",
            searchDebounceTimer: null,
            searchRequest: null,
            hasFilter: false
         },

         onBeforeMount(){
            this.state.hasFilter = this.dictData.config.progress_tracking?.tracked
         },

         onMounted(){
            this.initSelect()
         },

         onUpdated(){
            this.initSelect()
         },

         onBeforeUnmount(){
            this.state.searchRequest && this.state.searchRequest.abort()
         },

         onSearchParamsChanged(){
            this.update()
            if(this.dictData.search.advanced_query){
               $("textarea", this.root).val(this.dictData.search.advanced_query)  // Textarea value is not updated on update(), probably some riot x materialize bug.
               M.textareaAutoResize($("#textarea1", this.root))
            }
         },

         onToggleFilterClick(){
            this.update({showFilter: !this.state.showFilter})
         },

         onToggleQueryBuilder(show){
            this.update()
            $(this.root).toggleClass("showQueryBuilder", show ?? "")
         },

         onAdvancedQueryFocus(){
            $(".textareaWrapper").addClass("focused")
            M.textareaAutoResize($("#advanced_query"))
         },

         onAdvancedQueryBlur(){
            $(".textareaWrapper").removeClass("focused")
            $("#advanced_query").css("height", "48px")
         },

         onIsCompletedClick(isCompleted){
            this.dictData.search.isCompleted = isCompleted
            this.search()
         },

         search() {
            if(this.dictData.search.tab == "basic"){
               this.dictData.search.searchtext = $("#searchtext").val()
               this.dictData.search.modifier = $("#modifier").val()
            } else {
               this.dictData.search.advanced_query = $("#advanced_query").val()
            }
            this.state.searchRequest = this.props.searchFunc()
            this.update()
         },

         onTabClick(tab){
            if(tab == "basic" && this.dictData.search.tab == "advanced"){
               this.store.trigger("toggleQueryBuilder", false)
            }
            this.dictData.search.tab = tab
            this.update()
            $("input, textarea", this.root).first().focus()
            localStorage.setItem("entryFilterTab", tab)
         },

         onClearFilterClick(evt){
            let input = $("input, textarea", this.root).first()
            if(input.val()){
               input.val("")
               this.search()
            }
         },

         onSearchtextKeyDown(evt){
            this.props.onKeyDown && this.props.onKeyDown(evt)
         },

         onSearchtextKeyUp(evt){
            if (evt.keyCode == 13 && !this.props.basicSearchOnInput) {
               evt.preventDefault()
               this.search()
            } else if(evt.keyCode == 27){
               evt.target.blur()
            }
         },

         onSearchtextInput(evt){
            if(this.props.basicSearchOnInput){
               this.searchDebounceTimer && clearTimeout(this.searchDebounceTimer)
               this.searchDebounceTimer = setTimeout(() => {
                  this.state.searchRequest && this.state.searchRequest.abort()
                  clearTimeout(this.searchDebounceTimer)
                  this.search()
               }, 300)
            }
         },

         onAdvancedQueryKeyDown(evt) {
            if (evt.keyCode == 13) {
               evt.preventDefault()
               this.state.isValid && this.search()
            } else if(evt.keyCode == 27){
               evt.target.blur()
            }
            this.props.onKeyDown && this.props.onKeyDown(evt)
         },

         onAdvancedQueryInput(){
            let advanced_query = $("#advanced_query", this.root).val().trim()
            let isValid = true
            let parseError = ""
            try{
               this.store.advancedSearchParseQuery(advanced_query)
            } catch(e){
               isValid = false
               parseError = e
            }
            this.dictData.search.advanced_query = advanced_query
            if(isValid != this.state.isValid || parseError != this.state.parseError){
               this.update({
                  isValid: isValid,
                  parseError: parseError + ""
               })
            }
         },

         onToggleQueryBuilderBtnClick(){
            this.store.trigger("toggleQueryBuilder")
         },

         onModifierChange(){
            $("input", this.root).val() && this.search()
            localStorage.setItem("entryFilterModifier", $("#modifier", this.root).val())
         },

         initSelect(){
            $("select", this.root).formSelect({
                     dropdownOptions: {
                        coverTrigger: false,
                        constrainWidth: false
                     }
                  })
         }
      }
   </script>

   <style type="scss">
      :host{
         display: block;
         &.showQueryBuilder{
            .searchBox{
               pointer-events: none;
               opacity: 0.5;
            }
            .toggleQueryBuilderBtn{
               background-color: #c62132;
               path{
                  fill: #fff;
               }
            }
         }
      }
      .filterForm{
         padding: 10px;
         .searchBox{
            width: 100px;
            position: relative;
            flex: 2;
            input{
               margin-bottom: 0;
               background-color: #fff;
            }
            textarea{
               margin-bottom: 0;
               background-color: #fff;
               display: block;
            }
            .textareaWrapper{
               display: block;
               position: relative;
               background-color: #fff;
               &::after{
                  content: "";
                  position: absolute;
                  left: 1px;
                  right: 1px;
                  bottom: 1px;
                  height: 25px;
                  pointer-events: none;
                  background: linear-gradient(0deg, rgba(255,255,255,1) 0%, rgba(255,255,255,0.9) 15%, rgba(255,255,255,0) 100%);
               }
               &.focused{
                  &::after{
                     display: none;
                  }
               }

            }
         }
         .select-wrapper{
            flex: 3;
            input{
               margin-bottom: 0;
            }
         }
      }
      .tabs{
         height: 38px;
         margin-bottom: 0;
         li.tab{
            height: 38px;
            line-height: 38px;
         }
      }
      .toggleQueryBuilderBtn{
         display: inline-flex;
         align-items: center;
         justify-content: center;
         svg{
            width: 26px;
            height: 26px;
         }
      }
   </style>
</dict-entry-filter>
