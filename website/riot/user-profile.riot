<user-profile>
   <h1 class="pageTitle">Account settings</h1>
   <!-- Sketch Engine account -->
   <div if={dictData.siteconfig && !dictData.isSiteconfigLoading}
         class="row">
      <label>Sketch Engine login</label>
      <div if={dictData.siteconfig.sketchengineLoginPage && authData.ske_username}>
         <p>Your Lexonomy account is linked to your Sketch Engine account <b>{authData.ske_username}</b>
            <br/>
            <a href={dictData.siteconfig.sketchengineLoginPage}>Link to a different Sketch Engine account&nbsp;»</a>
         </p>
      </div>
      <div if={dictData.siteconfig.sketchengineLoginPage && !authData.ske_username}>
         <p><strong>Sketch Engine login</strong></p>
         <p><a href={dictData.siteconfig.sketchengineLoginPage}>Link Lexonomy to your Sketch Engine account&nbsp;»</a>
         </p>
      </div>
      <div if={!dictData.siteconfig.sketchengineLoginPage}>
         <div class="input-field">
            <div>
               <input id="skeusername"
                     type="text"
                     class="validate"
                     value={authData.ske_username}
                     style="width: 350px;" />
               <button class="btn waves-effect waves-light"
                     onclick={onChangeSkeUsernameClick}>Change username
                  <i class="material-icons right">send</i>
               </button>
            </div>
            <span class="helper-text">Set your login username to Sketch Engine.</span>
         </div>
      </div>
   </div>

   <!-- Sketch Engine API key -->
   <div class="row">
      <label>Sketch Engine API key</label>
      <p if={dictData.siteconfig.sketchengineLoginPage}>
         Unless you need special setup, Please, <a href={dictData.siteconfig.sketchengineLoginPage}>login via Sketch Engine</a> to set API key automatically.
      </p>
      <div class="input-field">
         <div>
            <input id="skeapi"
                  type="text"
                  class="validate"
                  value={authData.ske_apiKey}
                  style="width: 350px;"/>
            <button class="btn waves-effect waves-light"
                  onclick={onChangeSkeApiKeyClick}>Save API key
               <i class="material-icons right">send</i>
            </button>
         </div>
         <span class="helper-text">Set your API key for Sketch Engine.</span>
      </div>
   </div>

   <!-- Lexonomy API key -->
   <div class="row">
      <label>Lexonomy API key</label>
      <div class="input-field">
         <div>
            <input type="text"
                  value={authData.apiKey || "not set"}
                  disabled
                  style="width: 350px;">
            <button class="btn waves-effect waves-light"
                  onclick={onGenerateNewApiKeyClick}>
               Generate new API key
               <i class="material-icons right">autorenew</i>
            </button>
            <button class="btn waves-effect waves-light"
                  onclick={onDeleteApiKeyClick}>
               Remove API key
               <i class="material-icons right">delete</i>
            </button>
         </div>
         <span class="helper-text">This key allows external tools such as Sketch Engine to create a dictionary in your account and to populate it with pre-generated entries.</span>
      </div>
   </div>

   <!-- set new password -->
   <div class="passwords row">
      <div class="displayFlex">
         <div>
            <label>New password</label>
            <div class="input-field">
               <div>
                  <input id="password1"
                        type="password"
                        autocomplete="new-password"
                        onkeyup={onPasswordKeyUp}
                        style="width: 350px;"/>
               </div>
               <span class="helper-text">Set your password to access Lexonomy.</span>
            </div>
         </div>
         <div>
            <label>Confirm password</label>
            <div class="input-field">
               <div>
                  <input id="password2"
                        type="password"
                        autocomplete="new-password"
                        onkeyup={onPasswordKeyUp}
                        style="width: 350px;"/>
               </div>
               <span id="passwordsNotEqual"
                     class="helper-text red-text"
                     style="visibility: hidden">Passwords do not match</span>
            </div>
         </div>
         <button id="setPasswordButton"
               class="btn waves-effect waves-light disabled"
               onclick={onChangePasswordClick}>Change password
            <i class="material-icons right">send</i>
         </button>
      </div>
   </div>

   <div class="row">
      <label>Text size</label>
      <div class="input-field">
         <div style="">
            <select id="fontSize"
                  onchange={onFontSizeChange}>
               <option each={(item, idx) in new Array(11)}
                     value={idx + 12}
                     selected={state.fontSize == idx + 12}>
                  {100 + (-4 + idx) * 10}%
               </option>
            </select>
            <button class="btn waves-effect waves-light"
                  onclick={onResetFontSize}>reset
            </button>
         </div>
      </div>
   </div>

   <div>
      <a class="btn"
            href="javascript:window.history.back()"
            onclick="window.history.back()">Back</a>
   </div>

   <script>
      export default {
         state: {
            fontSize: 16
         },

         onBeforeMount(){
            this.state.fontSize = window.getCookie("fontSize") || 16
         },

         onMounted() {
            M.updateTextFields()
            $("select", this.root).formSelect()
         },

         onPasswordKeyUp(evt){
            let password1 = $("#password1").val()
            let password2 = $("#password2").val()
            let bothFilled = password1 && password2
            let passwordsEqual = password1 == password2
            $("#setPasswordButton").toggleClass("disabled", !bothFilled || !passwordsEqual)
            $("#passwordsNotEqual").css("visibility", !bothFilled || passwordsEqual ? "hidden" : "")
            bothFilled && passwordsEqual && evt.keyCode == 13 && this.setPassword()
         },

         onChangePasswordClick(event) {
            this.store.changePassword($("#password1").val())
         },

         onChangeSkeUsernameClick(event) {
            this.store.changeSketchEngineUsername($("#skeusername").val())
         },

         onChangeSkeApiKeyClick(event) {
            this.store.changeSketchEngineApiKey($("#skeapi").val())
         },

         onGenerateNewApiKeyClick(event) {
            let apiKey = this.generateKey()
            this.store.changeLexonomyApiKey(apiKey)
                  .always(response => {
                     this.update()
                  })
         },

         onDeleteApiKeyClick(event) {
            this.store.changeLexonomyApiKey("")
                  .always(response => {
                     this.update()
                  })
         },

         generateKey() {
            var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
            var key = ""
            while(key.length < 32) {
               var i = Math.floor(Math.random() * alphabet.length)
               key += alphabet[i]
            }
            return key
         },

         onFontSizeChange(evt){
            this.state.fontSize = $(evt.target).val()
            $("html").css("font-size", this.state.fontSize + "px")
            window.setCookie("fontSize", this.state.fontSize)
            this.update()
         },

         onResetFontSize(){
            $("html").css("font-size", "")
            window.removeCookie("fontSize")
            this.state.fontSize = 16
            this.update()
            $("select", this.root).formSelect()
         }
      }
   </script>


   <style type="scss">
      .input-field{
         margin-top: 0;
         & > div {
            display: flex; gap: 10px; align-items: center;
         }
         button{
            margin-bottom: 10px;
         }
      }
      .passwords{
         .displayFlex{
            gap: 20px;
         }
         .btn{
            margin-top: 26px;
         }
      }
      .fontSize{
         display: flex;
         user-select: none;
         margin: 0 15px;
      }
      .fontSizeArrows{
         display: flex;
         flex-direction: column;
         align-self: center;
      }
      .fontSizeArrows i{
         height: 20px;
         line-height: 20px;
      }
   </style>
</user-profile>
