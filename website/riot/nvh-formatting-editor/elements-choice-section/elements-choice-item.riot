<elements-choice-item>
  <div class="elements-choice-item-wrapper
              {isValidToActivePlaceholder() ? "elements-choice-item-wrapper-valid" : ""}
              {isInvalidToActivePlaceholder() ? "elements-choice-item-wrapper-invalid" : ""}"
      style="padding-left: {props.indentationLevel}px"
      draggable="true"
      ondragstart={onDragStart}
      ondragend={onDragEnd}>
    <div class="elements-choice-item-box"
        style="background-color: {props.state.data.color}">
    </div>
    <div style="color: {props.state.data.color}">{props.state.data.name}</div>
  </div>
  <template each={child in props.state.data.children}>
    <elements-choice-item state={child}
                          indentationLevel={props.indentationLevel + 15}/>
  </template>

  <script>
    export default {
      onDragStart(event) {
        event.dataTransfer.clearData();
        const data = JSON.stringify(this.props.state.data);
        event.dataTransfer.setData("text/plain", data);

        window.nvhFormattingEditor.global.draggedElementFullName = this.props.state.data.fullName;

        let adders = document.getElementsByClassName("adder");
        for (let adder of adders) {
          adder.classList.add("adder-highligth-plus");
        }
        window.nvhFormattingEditor.formattingEditorComponent.update();
      },
      onDragEnd(event) {
        window.nvhFormattingEditor.global.draggedElementFullName = "";

        let adders = document.getElementsByClassName("adder");
        for (let adder of adders) {
          adder.classList.remove("adder-highligth-plus");
          /*
          This is how I get the "adderIcon" and change its css.
          It is not possible via getElementsByClassName, because the element
          is not present in the markup anymore.
          */
          let adderIcon = adder.children[0].children[0].children[0].children[0];
          adderIcon.classList.remove("adder-icon-wrapper-highligth-dragged");
        }

        window.nvhFormattingEditor.formattingEditorComponent.update();
      },
      isValidToActivePlaceholder() {
        if (window.nvhFormattingEditor.global.selectedPlaceholder === null) {
          return false;
        }
        return window.nvhFormattingEditor.isChoiceElementValidToPlaceholder(this.props.state.data,
                                                                            window.nvhFormattingEditor.global.selectedPlaceholder,
                                                                            window.nvhFormattingEditor.global.selectedPlaceholderParentAreaFullName);
      },
      isInvalidToActivePlaceholder() {
        if (window.nvhFormattingEditor.global.selectedPlaceholder === null) {
          return false;
        }
        return !this.isValidToActivePlaceholder();
      }
    }
  </script>

  <style>
    .elements-choice-item-wrapper {
      display: flex;
      align-items: center;
      gap: 4px;
      cursor: grab;
    }
    .elements-choice-item-wrapper:hover {
      background-color: #d7e4f7;
    }
    .elements-choice-item-wrapper-valid {
      background-color: rgb(230, 244, 210);
    }
    .elements-choice-item-wrapper-valid:hover {
      background-color: rgb(206, 231, 170);
    }
    .elements-choice-item-wrapper-invalid {
      opacity: 0.4;
    }
    .elements-choice-item-box {
      width: 8px;
      height: 8px;
      border-radius: 2px;
    }
  </style>
</elements-choice-item>