<add-children-component>
    <div if={props.canHaveAdders && props.state.content.fullName !== "" && getChildrenList(null, props.state.content.fullName).length !== 0}
        class="add-children-component-wrapper"
        style="background-color: {window.nvhFormattingEditor.getColorLightVersion(props.state.content.color)};">
      <div class="add-children-component-label">Add:</div>
      <template each={child in getChildrenList(2, props.state.content.fullName)}>
        <div class="add-children-component-child"
            style="color: {window.nvhStore.getElementColor(child.path)};"
            onclick={() => onAddElement(props.state, child)}>
          {child.name}
        </div>
      </template>
      <div>
        <i class="material-icons tiny add-children-component-dropdown-icon"
          style="background-color: {window.nvhFormattingEditor.getColorLightVersion(props.state.content.color)};"
          onclick={onDropdownClick}>
          arrow_drop_down
        </i>
        <div if={this.state.isDropdownShown} class="add-children-component-dropdown"
            onmouseenter={onMouseEnter}
            onmouseleave={onMouseLeave}>
          <template each={child in getChildrenAndSelfList(props.state.content.fullName)}>
            <div style="color: {window.nvhStore.getElementColor(child.path)};"
                class="add-children-component-dropdown-child"
                onclick={() => onAddElement(props.state, child)}> 
              {child.name}
            </div>
          </template>
        </div>
      </div>
    </div>

<script>
  export default {
    state: {
      isDropdownShown: false,
    },
    getChildrenList(count, fullName) {
      if (fullName === "") {
        return [];
      }
      let children = window.nvhStore.getElementConfig(fullName).children;
      children = children.filter(child => !window.nvhFormattingEditor.isMarkupType(child.path)); // exclude markup type elements
      if (count === null) {
        return children;
      }
      return children.slice(0, count);
    },
    getChildrenAndSelfList(fullName) {
      let self = window.nvhStore.getElementConfig(fullName);
      let children = this.getChildrenList(null, fullName);
      children.splice(0, 0, self);
      return children;
    },
    onAddElement(currentElement, newElement) {
      if (currentElement.children.length === 0 && currentElement.content.fullName !== newElement.path) {
        window.nvhFormattingEditor.addElement(currentElement.children.length, null, currentElement, "row", this.getLabel(currentElement.content.name, currentElement.content.fullName));
      }
      window.nvhFormattingEditor.addElement(currentElement.children.length, null, currentElement, "row", this.getLabel(newElement.name, newElement.path));
    },
    getLabel(name, fullName) {
      return {
        name: name,
        fullName: fullName,
        area: name,
        areaFullName: fullName,
        color: window.nvhStore.getElementColor(fullName),
      };
    },
    onDropdownClick() {
      window.nvhFormattingEditor.dropdownTimeout = setTimeout(() => {
        this.state.isDropdownShown = false;
        this.update();
      }, 2000);
      this.state.isDropdownShown = !this.state.isDropdownShown;
      this.update();
    },
    onMouseEnter() {
      clearTimeout(window.nvhFormattingEditor.dropdownTimeout);
    },
    onMouseLeave() {
      window.nvhFormattingEditor.dropdownTimeout = setTimeout(() => {
        this.state.isDropdownShown = false;
        this.update();
      }, 500);
    }
  }
</script>

<style>
  .add-children-component-wrapper {
    display: flex;
    width: 100%;
    gap: 5px;
  }
  .add-children-component-label {
    padding-left: 7px;
    user-select: none;
  }
  .add-children-component-child {
    text-shadow:
      1px -1px 0 white,
      1px 1px 0 white,
      -1px 1px 0 white,
      -1px -1px 0 white;
    cursor: pointer;
    user-select: none;
  }
  .add-children-component-dropdown {
    position: absolute;
    z-index: 1000;
    background: white;
    border: 2px solid black;
    padding: 0 5px;
  }
  .add-children-component-dropdown-icon {
    border: 1px solid black;
    background-color: white;
    cursor: pointer;
    margin-top: 2px;
    user-select: none;
  }
  .add-children-component-dropdown-child {
    cursor: pointer;
    user-select: none;
  }
  .add-children-component-dropdown-child:hover {
    background-color: var(--color-grey-light);
  }
</style>

</add-children-component>