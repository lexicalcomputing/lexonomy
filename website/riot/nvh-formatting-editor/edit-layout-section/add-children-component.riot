<add-children-component class="add-children-component">
   <div if={isDisplayed()}
         class="add-children-component-wrapper">
      <div class="add-children-component-label grey-text text-darken-2">Add:</div>
      <template each={child in state.childrenList.slice(0, 2)}>
         <div class="add-children-component-child"
               style="background-color: {window.nvhStore.getElementColor(child.path)};"
               onclick={onAddElementClick.bind(this, child)}>
            {child.name}
         </div>
      </template>
      <template if={state.childrenList.length > 2}>
         <button id="trigger_{ddId}"
               class="btn btn-small btn-flat btn-floating"
               data-target="dropdown_{ddId}"
               onclick={window.stopEvtPropagation}>
            <i class="material-icons">
               more_horiz
            </i>
         </button>
         <ul id="dropdown_{ddId}"
               class="dropdown-content">
            <li each={child in state.childrenList}
                  class="add-children-component-dropdown-child"
                  onclick={onAddElementClick.bind(this, child)}
                  style="min-height: 30px;">
               <a style="color: {window.nvhStore.getElementColor(child.path)};padding: 0rem 1rem;line-height: 30px;">
                  {child.name}
               </a>
            </li>
         </ul>
      </template>
   </div>

   <script>
      export default {
         onBeforeMount(props) {
            this.nvhFormattingEditor = window.nvhFormattingEditor
            this.nvhStore = window.nvhStore
            this.ddId = Math.random().toString(36).substr(2)
            this.refreshChildrenList()
         },

         onBeforeUpdate(){
            this.refreshChildrenList()
         },

         onMounted(){
            $(`#trigger_${this.ddId}`, this.root)
                  .dropdown({
                     coverTrigger: false,
                     constrainWidth: false
                  })
         },

         refreshChildrenList() {
            this.state.childrenList = []
            let config = window.nvhStore.getElementConfig(this.props.schema.content.path)
            if (!config) {
               return []
            }
            let children = []
            if(this.props.schema.children.length){
               children.push(config)
            }
            children.push(...config.children)
            let originalOrder = config.children.map(child => child.path)
            children = children.filter(child => !this.nvhFormattingEditor.isMarkupType(child.path)
                  && !this.nvhFormattingEditor.hasElementInAncestors(this.props.schema, this.props.schema.content.path))
            let actualChildren = this.props.schema.children.map(child => child.content.path)
            children.sort((a, b) => {
               if(actualChildren.includes(a.path) == actualChildren.includes(b.path)){
                  return originalOrder.indexOf(a) - originalOrder.indexOf(b)
               }
               return actualChildren.includes(a.path) ? 1 : -1
            })

            this.state.childrenList = children
         },

         isDisplayed(){
            return this.props.schema.content.path
                  && this.state.childrenList.length
                  && !this.nvhFormattingEditor.hasElementInAncestors(this.props.schema, this.props.schema.content.path)
         },

         onAddElementClick(newElement) {
            let parent = this.props.schema
            if (parent.children.length === 0 && parent.content.path !== newElement.path) {
               // adding element other than parent element -> add also parent element as child (because parent element now became group)
               this.nvhFormattingEditor.addElement(parent, this.props.schema.content.path)
            }
            this.nvhFormattingEditor.addElement(parent, newElement.path)
         }
      }
   </script>

   <style type="scss">
      .add-children-component-wrapper {
         display: flex;
         width: 100%;
         min-height: 29px;
         gap: 5px;
         align-items: center;
         border-bottom: 1px solid rgba(0, 0, 0, 0.2);
      }
      .add-children-component-label {
         padding-left: 7px;
         user-select: none;
         font-size: 0.8rem;
      }
      .add-children-component-child {
         cursor: pointer;
         user-select: none;
         border-radius: 6px;
         color: #fff;
         padding: 1px 5px;
         font-size: 0.8rem;
         display: inline-block;
         height: 18px;
         vertical-align: middle;
         line-height: 16px;
         opacity: 0.7;
         &:hover{
            opacity: 1;
         }
      }
      .add-children-component-more {
         background-color: grey;
      }
   </style>
</add-children-component>
