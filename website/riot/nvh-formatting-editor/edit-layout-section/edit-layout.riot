<edit-layout>
  <div class="edit-layout-container">
    <div class="scrollable-div">
      <template each={(child, index) in props.schema.children}>
        <placeholder-component onclick={openActionPanel}
                              class="placeholder placeholder-{child.orientation} placeholder-first
                                    {child.status.isActive ? "placeholder-selected" : ""}
                                    {child.children.length === 0 ? "placeholder-no-children" : ""}"
                              state={childWithInheritedArea(child, null)}
                              parentState={props.schema}
                              editing={props.editing}
                              status={child.status}
                              global={props.global}
                              isBaseLevel={true}
                              index={index}
                              delete-element={deleteElement}
                              add-element={addElement}
                              add-element-with-children={addElementWithChildren}
                              close-action-panel={closeActionPanel}
                              child-with-inherited-area={childWithInheritedArea}/>
      </template>
    </div>
  </div>

  <script>
    export default {
      onBeforeMount(props) {
        props.global.parent = props.parent
      },
      onBeforeUpdate(props) {
        props.global.parent = props.parent
      },

      addElement(index, component, state, editingMode, label) {
        let newElement = {
          status: {
            isActive: false,
            isHovered: false,
          },
          orientation: editingMode,
          type: "placeholder",
          content: {
            name: label == null ? "" : label.name,
            fullName: label == null ? "" : label.fullName,
            area: label == null ? "" : label.area,
            color: label == null ? "": label.color,
          },
          children: []
        };
        state.children.splice(index, 0, newElement);
        component.update();
        this.props.global.canOpenActionPanel = false;
      },
      addElementWithChildren(index, component, state, element, label) {
        /*label can not be null or undefined*/
        if (label == null || label == undefined) {
          return;
        }
        let newElement = {
          status: {
            isActive: false,
            isHovered: false,
          },
          orientation: "column",
          type: "placeholder",
          content: {
            name: label.name,
            fullName: label.fullName,
            area: label.area,
            color: label.color,
          },
          children: []
        };

        if (state != null) {
          state.children.splice(index, 0, newElement);
        }
        if (label.children !== undefined && label.children !== null) {
          /*
          If element has children, append also this element,
          so that it is displayed together with its children.
          */
          if (label.children.length !== 0) {
            let selfDisplayElement = {
              status: {
                isActive: false,
                isHovered: false,
              },
              orientation: "column",
              type: "placeholder",
              content: {
                name: label.name,
                fullName: label.fullName,
                area: label.area,
                color: label.color,
              },
              children: []
            };
            newElement.children.push(selfDisplayElement);
          }
          for(let child of label.children) {
            let childElement = this.addElementWithChildren(null, null, null, newElement, child.data);
            newElement.children.push(childElement);
          }
        }
        if (component != null) {
          component.update();
        }
        return newElement;
      },
      deleteElement(indexToDelete, parentState) {
        parentState.children = Array.from(parentState.children).filter((child, index) => index != indexToDelete);
        this.props.global.canOpenActionPanel = false;
        this.update();
      },
      closeActionPanel() {
        this.closeActionPanelRec(this.props.schema);
      },
      closeActionPanelRec(state) {
        if (state === null) {
          return null;
        }
        Array.from(state.children).map(child => this.closeActionPanelRec(child));
        state.children.map(child => child.status.isActive = false);
      },
      childWithInheritedArea(child, state) {
        if (state === null) {
          return child;
        }
        child.content.area = child.content.name === "" ? state.content.area : child.content.name;
        return child;
      },
      openActionPanel() {
        this.props.global.parent.update();
      },
    }
  </script>

  <style>
    .edit-layout-container {
      border: 1px black dashed;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      width: fit-content;
      height: 100%;
      overflow: auto;
      min-width: 100%;
    }


    .placeholder {
      position: relative;
      border: 4px solid #f7f6ed;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-grow: 1;
      min-width: fit-content;
      width: calc(100% - 20px);
      margin: 10px;
      cursor: pointer;
    }
    .placeholder-first {
      cursor: default; /*action-panel can not be displayed on the base placeholder*/
      border: 4px solid #f7f6ed !important;
    }
    

    .placeholder > .placeholder-inside-wrapper > .placeholder {
      height: calc(100% - 14px); /*ensure that all "placeholders" children will have correct height*/
      width: calc(100% - 7px); /*ensure that all "placeholders" children will have correct width*/
    }
    /*
    both "placeholder-row" and "placeholder-column" have same flex-direction,
    only "placeholder-inside-wrapper" will have corresponding
    flex-direction based on its orientation
    */
    .placeholder-row {
      flex-direction: column;
      padding: 7px;
    }
    .placeholder-column {
      flex-direction: column;
      padding: 7px;
    }

    .placeholder-selected {
      border: 4px solid var(--color-is-active) !important;
    }


    .adder:hover {
      cursor: pointer;
    }
    /*
    "adder-column" is present in columns,
    and rows with no children, because it is easier to click
    */
    .adder-column {
      padding: 5px;
      width: calc(100% - 3px);
      margin: 0 10px;
      min-width: 100px;
    }
    /*
    "adder-row" is present in rows
    */
    .adder-row {
      height: calc(100% - 5px);
      padding: 5px;
      margin: 10px 0;
    }
    .adder:hover .plus-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      width: 100%;
    }


    .adder-highligth-plus .plus-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      width: 100%;
    }
    .adder-highligth-plus .plus-icon-wrapper .adder-line {
      width: 0;
      height: 0;
    }
    .adder-highligth-plus .plus-icon-wrapper .adder-line .adder-icon-wrapper {
      color: var(--color-can-be-dropped);
    }

    .placeholder-no-children {
      padding: 14px;
    }
    .placeholder-no-children:hover .adder-alone .plus-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      width: 100%;
    }
    .placeholder-no-children:hover .adder-alone .plus-icon-wrapper .adder-line {
      width: 0;
      height: 0;
    }
    .placeholder-no-children:hover .adder-alone .plus-icon-wrapper .adder-line .adder-icon-wrapper {
      color: grey;
    }
    .placeholder-no-children:hover .adder-alone .plus-icon-wrapper .adder-line .adder-icon-wrapper:hover {
      color: black;
    }


    .placeholder-highligth {
      background-color: var(--color-is-dragged-over-light) !important;
    }
    .placeholder-inside-wrapper-highligth {
      background-color: var(--color-is-dragged-over-light) !important;
    }
    .placeholder-adder-highligth {
      background-color: var(--color-is-dragged-over-light) !important;
    }
    .placeholder-highligth .placeholder {
      background-color: white;
    }
    .placeholder-inside-wrapper-highligth .placeholder {
      background-color: white;
    }
    .placeholder-adder-highligth .placeholder {
      background-color: white;
    }


    .placeholder-highligth > .placeholder-inside-wrapper {
      background-color: var(--color-is-dragged-over-light) !important;
    }
    .placeholder-inside-wrapper-highligth > .placeholder-inside-wrapper {
      background-color: var(--color-is-dragged-over-light) !important;
    }
    .placeholder-adder-highligth > .placeholder-inside-wrapper {
      background-color: var(--color-is-dragged-over-light) !important;
    }
  </style>
</edit-layout>