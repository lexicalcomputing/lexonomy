<edit-layout>
  <div class="edit-layout-container">
    <div class="scrollable-div">
      <template each={(child, index) in props.schema.children}>
        <placeholder-component onclick={openActionPanel}
                              ondragover={onDragOver}
                              ondrop={(event) => onDrop(event, child)}
                              class="placeholder placeholder-{child.orientation} placeholder-first"
                              state={childWithInheritedArea(child, null)}
                              parentState={props.schema}
                              editing={props.editing}
                              status={child.status}
                              global={props.global}
                              isBaseLevel={true}
                              index={0}
                              delete-element={deleteElement}
                              add-element={addElement}
                              close-action-panel={closeActionPanel}
                              child-with-inherited-area={childWithInheritedArea}/>
      </template>
    </div>
  </div>

  <script>
    export default {
      onBeforeMount(props) {
        props.global.parent = props.parent
      },
      onBeforeUpdate(props) {
        props.global.parent = props.parent
      },

      onDragOver(event) {
        event.preventDefault();
      },
      onDrop(event, state) {
        const rawData = event.dataTransfer.getData("text/plain");
        const data = JSON.parse(rawData);
        if (this.props.global.canBeDropped) {
          if (data.type === "choice-item") {
            state.content.name = data.name;
            state.content.area = data.name;
            state.content.color = data.color;
          }
        }
      },

      addElement(index, component, state, editingMode, label) {
        let newElement = {
          status: {
            isActive: false,
          },
          orientation: editingMode,
          type: "placeholder",
          content: {
            name: label == null ? "" : label.name,
            area: label == null ? "" : label.area,
            color: label == null ? "": label.color,
          },
          children: []
        };
        state.children.splice(index, 0, newElement);
        component.update();
        this.props.global.canOpenActionPanel = false;
      },
      deleteElement(indexToDelete, parentState) {
        parentState.children = Array.from(parentState.children).filter((child, index) => index != indexToDelete);
        this.update();
      },
      closeActionPanel() {
        this.closeActionPanelRec(this.props.schema);
      },
      closeActionPanelRec(state) {
        if (state === null) {
          return null;
        }
        Array.from(state.children).map(child => this.closeActionPanelRec(child));
        state.children.map(child => child.status.isActive = false);
      },
      childWithInheritedArea(child, state) {
        if (state === null) {
          return child;
        }
        child.content.area = child.content.name === "" ? state.content.area : child.content.name;
        return child;
      },
      openActionPanel() {
        this.props.global.parent.update();
      },
    }
  </script>

  <style>
    .edit-layout-container {
      border: 1px black dashed;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      width: fit-content;
      height: 100%;
      overflow: auto;
      min-width: 100%;
    }


    .placeholder {
      position: relative;
      border: 4px solid #f7f6ed;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-grow: 1;
      min-width: fit-content;
      width: calc(100% - 20px);
      margin: 10px;
      cursor: pointer;
    }
    .placeholder-first {
      cursor: default; /*action-panel can not be displayed on the base placeholder*/
    }

    /*
    ensure that all "placeholder" children will have same height
    */
    .placeholder > .placeholder-inside-wrapper > .placeholder {
      height: calc(100% - 20px);
    }
    /*
    both "placeholder-row" and "placeholder-column" have same flex-direction,
    only "placeholder-inside-wrapper" will have corresponding
    flex-direction based on its orientation
    */
    .placeholder-row {
      flex-direction: column;
      border: 4px solid var(--color-row);
      padding: 10px;
    }
    .placeholder-column {
      flex-direction: column;
      border: 4px solid var(--color-column);
      padding: 10px;
    }


    .adder:hover {
      cursor: pointer;
    }
    /*
    "adder-column" is present in columns,
    and rows with no children, because it is easier to click
    */
    .adder-column {
      padding: 5px;
      width: calc(100% - 10px);
      margin: 0 10px;
      min-width: 100px;
    }
    /*
    "adder-row" is present in rows
    */
    .adder-row {
      height: calc(100% - 10px);
      padding: 5px;
      margin: 10px 0;
    }
    .adder:hover .plus-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      width: 100%;
    }
  </style>
</edit-layout>