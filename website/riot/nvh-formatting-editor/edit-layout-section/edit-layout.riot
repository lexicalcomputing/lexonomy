<edit-layout>
   <div class="edit-layout-container">
      <div class="scrollable-div">
         <template each={(child, index) in nvhFormattingEditor.currentLayout.schema.children}>
         <!-- ASK: which state? -->
         <layout-container onclick={() => onLayoutContainerClick(child)}
            title={nvhFormattingEditor.isElementNonExisting(child.content.fullName)
                  ? "Entry structure changed, and element with path '" + child.content.fullName + "'' does not exist anymore. Click RESET button to fix the formatting structure." : ""}
            onmouseenter={(event) => onLayoutContainerMouseEnter(event, child)}
            onmouseleave={(event) => onLayoutContainerMouseLeave(event, child)}
            class={getCssClass(child)}
            state={nvhFormattingEditor.childWithInheritedArea(child, null)}
            parentState={nvhFormattingEditor.currentLayout.schema}
            isBaseLevel={true}
            index={index}
            canHaveAdders={true}
            isMarkupType={nvhFormattingEditor.isMarkupType(child.content.fullName)}/>
         </template>
      </div>
   </div>

   <script>
      export default {
         onBeforeMount() {
            this.nvhFormattingEditor = window.nvhFormattingEditor;
         },

         onLayoutContainerClick(child) {
            this.nvhFormattingEditor.selectLayoutContainer(child, null);
            this.nvhFormattingEditor.updateEditor();
         },

         onLayoutContainerMouseEnter(event, state) {
            if (!this.nvhFormattingEditor.data.mouseData) {
               event.currentTarget.classList.add("layout-container-mouse-hover");
               this.nvhFormattingEditor.data.hoveredLayoutContainer = state;
               this.nvhFormattingEditor.updateEditor();
            }
         },

         onLayoutContainerMouseLeave(event, state) {
            if (!this.nvhFormattingEditor.data.mouseData) {
               event.currentTarget.classList.remove("layout-container-mouse-hover");
               this.nvhFormattingEditor.data.hoveredLayoutContainer = null;
               this.nvhFormattingEditor.updateEditor();
            }
         },

         getCssClass(layoutContainer) {
            cssClass = "layout-container layout-container-first";
            cssClass += this.nvhFormattingEditor.isLayoutContainerActive(layoutContainer) ? " layout-container-selected" : "";
            cssClass += this.nvhFormattingEditor.isLayoutContainerHovered(layoutContainer) && !this.nvhFormattingEditor.data.mouseData ? " layout-container-mouse-hover" : ""
            cssClass += layoutContainer.children.length === 0 ? " layout-container-no-children" : "";
            cssClass += this.nvhFormattingEditor.isElementNonExisting(layoutContainer.content.fullName) ? " layout-container-non-existing" : "";
            return cssClass;
         }
      }
   </script>

   <style>
      .edit-layout-container {
         display: flex;
         justify-content: center;
         align-items: center;
         flex-direction: column;
         width: fit-content;
         height: 100%;
         overflow: auto;
         min-width: 100%;
      }
      .layout-container {
         position: relative;
         border: 4px solid transparent;
         display: flex;
         flex-direction: column;
         align-items: center;
         justify-content: center;
         flex-grow: 1;
         width: 100%;
         cursor: pointer;
      }
      .layout-container > .layout-container-inside-wrapper > .layout-container {
         height: 100%; /*ensure that all "layoutContainers" children will have correct height*/
         width: 100%; /*ensure that all "layoutContainers" children will have correct width*/
      }
      .layout-container-first {
         border: 4px solid transparent !important;
      }
      .layout-container-first > .action-panel {
         display: none;
         top: 0;
         left: 0;
      }
      .layout-container-first:hover > .action-panel {
         display: block;
      }
      .layout-container-first:has(.layout-container:hover) > .action-panel {
         display: none;
      }
      .layout-container-selected {
         border: 4px solid var(--color-is-active) !important;
      }
      .adder {
         cursor: pointer;
      }
      /*"adder-column" is present in columns*/
      .adder-column {
         padding: 5px 0;
         width: 100%;
         margin: 0 10px;
         min-width: 50px;
      }
      /*"adder-row" is present in rows*/
      .adder-row {
         height: 100%;
         padding: 0 5px;
         margin: 10px 0;
      }
      .adder:hover .plus-icon-wrapper {
         display: flex;
         align-items: center;
         justify-content: center;
         height: 100%;
         width: 100%;
      }
      .layout-container-no-children:hover .adder-alone .plus-icon-wrapper {
         display: flex;
         align-items: center;
         justify-content: center;
         height: 100%;
         width: 100%;
      }
      .layout-container-no-children:hover .adder-alone .plus-icon-wrapper .adder-line {
         width: 0;
         height: 0;
      }
      .layout-container-no-children:hover .adder-alone .plus-icon-wrapper .adder-line .adder-icon-wrapper {
         opacity: 0.5;
      }
      .layout-container-no-children:hover .adder-alone .plus-icon-wrapper .adder-line .adder-icon-wrapper:hover {
         opacity: 1;
      }
      .layout-container-mouse-hover {
         border: 4px solid var(--color-is-hovered) !important;
         box-shadow: 4px 4px 4px var(--color-is-hovered);
      }
      .layout-container-mouse-hover:has(.layout-container-mouse-hover) {
         border: 4px solid transparent !important;
         box-shadow: none;
      }
      .layout-container-non-existing {
         background-color: black !important;
      }
      .layout-container-non-existing .adder {
         display: none;
      }
   </style>
</edit-layout>