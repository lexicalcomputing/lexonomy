<elementholder-component>
  <div class="content-box-wrapper {props.isBaseLevel ? "content-box-wrapper-base" : ""}"
      style="border: 1px solid {props.color};
            color: {props.isAreaHolder ? "white" : props.color};
            background-color: {props.isAreaHolder ? props.color : "white"}"
      draggable={!props.isBaseLevel ? "true" : "false"}
      ondragstart={onDragStart}
      ondragend={onDragEnd}>
    <div if={props.isAreaHolder} 
        class="inside-adder inside-adder-horizontal"
        ondragenter={onDragEnterHorizontal}
        ondragleave={onDragLeaveHorizontal}
        ondragover={onDragOver}
        ondrop={(event) => onDrop(event, 1)}>
    </div>
    <div class="content-box-wrapper-2">
      <div if={props.isAreaHolder}
          class="inside-adder inside-adder-vertical"
          ondragenter={onDragEnterVertical}
          ondragleave={onDragLeaveVertical}
          ondragover={onDragOver}
          ondrop={(event) => onDrop(event, 2)}>
      </div>
      <div class="placeholder-content-box {props.isAreaHolder ? "" : "placeholder-content-box-left"}">
        {props.isAreaHolder ? props.name : props.name + " (wrapper)"}
      </div>
      <div if={props.isAreaHolder}
          class="inside-adder inside-adder-vertical"
          ondragenter={onDragEnterVertical}
          ondragleave={onDragLeaveVertical}
          ondragover={onDragOver}
          ondrop={(event) => onDrop(event, 3)}>
      </div>
    </div>
    <div if={props.isAreaHolder}
        class="inside-adder inside-adder-horizontal"
        ondragenter={onDragEnterHorizontal}
        ondragleave={onDragLeaveHorizontal}
        ondragover={onDragOver}
        ondrop={(event) => onDrop(event, 4)}>
    </div>
  </div>

<script>
  export default {
    onDragStart(event) {
      event.dataTransfer.clearData();
      transferObject = {
        type: "elementholder-label"
      };
      const data = JSON.stringify(transferObject);
      event.dataTransfer.setData("text/plain", data);

      let trash = document.getElementById("trash-icon");
      trash.classList.add("trash-enabled");
      trash.classList.remove("trash-disabled");
      this.props.global.dropInfo.wasSuccessful = false;
    },
    onDragEnd(event) {
      if (this.props.global.dropInfo.wasSuccessful) {
        this.props.state.content.name = "";
        this.props.state.content.fullName = "";
        this.props.state.content.area = "";
        this.props.state.content.areaFullName = "";
        this.props.state.content.color = "";
      }
      let trash = document.getElementById("trash-icon");
      trash.classList.add("trash-disabled");
      trash.classList.remove("trash-enabled");
      this.props.global.parent.update();
    },
    onDragEnterHorizontal(event) {
      const rawData = event.dataTransfer.getData("text/plain");
      const data = JSON.parse(rawData);
      if (data.type === "choice-item") {
        event.target.classList.add("inside-adder-horizontal-highligth-dragged");
      }
    },
    onDragLeaveHorizontal(event) {
      event.target.classList.remove("inside-adder-horizontal-highligth-dragged");
    },
    onDragEnterVertical(event) {
      const rawData = event.dataTransfer.getData("text/plain");
      const data = JSON.parse(rawData);
      if (data.type === "choice-item") {
        event.target.classList.add("inside-adder-vertical-highligth-dragged");
      }
    },
    onDragLeaveVertical(event) {
      event.target.classList.remove("inside-adder-vertical-highligth-dragged");
    },
    onDragOver(event) {
      event.preventDefault();
    },
    onDrop(event, adderIndex) {
      const rawData = event.dataTransfer.getData("text/plain");
      const data = JSON.parse(rawData);
      if (data.type === "choice-item") {
        let newContent = {
          name: data.name,
          fullName: data.fullName,
          area: data.name,
          areaFullName: data.fullName,
          color: data.color,
          children: data.children
        }

        switch (adderIndex) {
          case 1:
            // top
            this.addElementInside("row", newContent, this.props.state.content);
            break;
          case 2:
            // left
            this.addElementInside("column", newContent, this.props.state.content);
            break;
          case 3:
            // right
            this.addElementInside("column", this.props.state.content, newContent);
            break;
          case 4:
            // bottom
            this.addElementInside("row", this.props.state.content, newContent);
        }
      }
      event.target.classList.remove("inside-adder-horizontal-highligth-dragged");
      event.target.classList.remove("inside-adder-vertical-highligth-dragged");
      this.props.global.canBeDropped = false;
    },

    addElementInside(undesiredOrientation, firstLabel, secondLabel) {
      if (this.props.state.orientation === undesiredOrientation) {
        let desiredOrientation = undesiredOrientation == "column" ? "row" : "column";
        this.props.addElement(0, this.props.global.parent, this.props.state, desiredOrientation, null);
        let newWrapperPlaceholder = this.props.state.children[0];
        this.props.addElementWithChildren(0, this.props.global.parent, newWrapperPlaceholder, newWrapperPlaceholder, firstLabel);
        this.props.addElementWithChildren(1, this.props.global.parent, newWrapperPlaceholder, newWrapperPlaceholder, secondLabel);
      } else {
        this.props.addElementWithChildren(0, this.props.global.parent, this.props.state, this.props.state, firstLabel);
        this.props.addElementWithChildren(1, this.props.global.parent, this.props.state, this.props.state, secondLabel);
      }
    }
  }
</script>

<style>
  .placeholder-content-box {
    padding: 0 5px;
    margin: 2px;
    width: 100%;
    text-align: center;
  }
  .placeholder-content-box-left {
    text-align: left;
  }
  .content-box-wrapper {
    background-color: green;
    padding: 2px;
    margin-bottom: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
    cursor: grab;
  }
  .content-box-wrapper-base {
    cursor: default;
  }
  .content-box-wrapper-2 {
    display: flex;
    flex-direction: row;
    width: 100%;
  }
  .inside-adder-horizontal {
    padding: 2px 0;
    background-color: transparent;
    width: calc(100% - 20px);
  }
  .inside-adder-vertical {
    padding: 0 2px;
    background-color: transparent;
  }
  .inside-adder-highligth {
    background-color: var(--color-can-be-dropped);
    transition: all 500ms ease;
  }
  .inside-adder-horizontal-highligth-dragged {
    background-color: var(--color-is-dragged-over) !important;
    padding: 10px 0;
    transition: all 500ms ease;
  }
  .inside-adder-vertical-highligth-dragged {
    background-color: var(--color-is-dragged-over) !important;
    padding: 0 15px;
    transition: all 500ms ease;
  }
</style>

</elementholder-component>