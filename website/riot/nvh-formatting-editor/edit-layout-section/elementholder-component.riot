<elementholder-component>
  <div class="content-box-wrapper {props.isBaseLevel ? "content-box-wrapper-base" : ""}"
      style="border: 1px solid {props.state.content.color};
            color: {props.state.children.length === 0 ? "white" : props.state.content.color};
            background-color: {props.state.children.length === 0 ? props.state.content.color : "white"}"
      draggable={!props.isBaseLevel ? "true" : "false"}
      ondragstart={onDragStart}
      ondragend={onDragEnd}>
    <i if={props.state.children.length === 0 && props.canHaveAdders && window.nvhFormattingEditor.global.draggedElementFullName !== ""
              && isDraggedElementOk()}
      class="small material-icons inside-adder-icon"
      ondragenter={onDragEnter}
      ondragleave={onDragLeave}
      ondragover={onDragOver}
      ondrop={(event) => onDrop(event, 1)}>add_box</i>
    <div class="content-box-wrapper-2">
      <i if={props.state.children.length === 0 && props.canHaveAdders && window.nvhFormattingEditor.global.draggedElementFullName !== ""
                && isDraggedElementOk()}
        class="small material-icons inside-adder-icon"
        ondragenter={onDragEnter}
        ondragleave={onDragLeave}
        ondragover={onDragOver}
        ondrop={(event) => onDrop(event, 2)}>add_box</i>
      <div class="placeholder-content-box {props.state.children.length === 0 ? "" : "placeholder-content-box-left"}">
        {props.state.children.length === 0 ? props.state.content.name : props.state.content.name + " (wrapper)"}
      </div>
      <i if={props.state.children.length === 0 && props.canHaveAdders && window.nvhFormattingEditor.global.draggedElementFullName !== ""
                && isDraggedElementOk()}
        class="small material-icons inside-adder-icon"
        ondragenter={onDragEnter}
        ondragleave={onDragLeave}
        ondragover={onDragOver}
        ondrop={(event) => onDrop(event, 3)}>add_box</i>
    </div>
    <i if={props.state.children.length === 0 && props.canHaveAdders && window.nvhFormattingEditor.global.draggedElementFullName !== ""
              && isDraggedElementOk()}
      class="small material-icons inside-adder-icon"
      ondragenter={onDragEnter}
      ondragleave={onDragLeave}
      ondragover={onDragOver}
      ondrop={(event) => onDrop(event, 4)}>add_box</i>
  </div>

<script>
  export default {
    onDragStart(event) {
      event.dataTransfer.clearData();
      transferObject = {
        type: "elementholder-label"
      };
      const data = JSON.stringify(transferObject);
      event.dataTransfer.setData("text/plain", data);

      let trash = document.getElementById("trash-icon");
      trash.classList.add("trash-enabled");
      trash.classList.remove("trash-disabled");
      window.nvhFormattingEditor.global.dropInfo.wasSuccessful = false;
    },
    onDragEnd(event) {
      if (window.nvhFormattingEditor.global.dropInfo.wasSuccessful) {
        this.props.state.content.name = "";
        this.props.state.content.fullName = "";
        this.props.state.content.area = "";
        this.props.state.content.areaFullName = "";
        this.props.state.content.color = "";
        this.props.state.content.canHaveChildren = true;
      }
      let trash = document.getElementById("trash-icon");
      trash.classList.add("trash-disabled");
      trash.classList.remove("trash-enabled");
      window.nvhFormattingEditor.formattingEditorComponent.update();
    },
    onDragEnter(event) {
      const rawData = event.dataTransfer.getData("text/plain");
      const data = JSON.parse(rawData);
      if (data.type === "choice-item") {
        event.target.classList.add("inside-adder-highligth-dragged-icon");
      }
    },
    onDragLeave(event) {
      event.target.classList.remove("inside-adder-highligth-dragged-icon");
    },
    onDragOver(event) {
      event.preventDefault();
    },
    onDrop(event, adderIndex) {
      const rawData = event.dataTransfer.getData("text/plain");
      const data = JSON.parse(rawData);
      if (data.type === "choice-item") {
        let newContent = {
          name: data.name,
          fullName: data.fullName,
          area: data.name,
          areaFullName: data.fullName,
          color: data.color,
          children: data.children
        }

        switch (adderIndex) {
          case 1:
            // top
            this.addElementInside("row", newContent, this.props.state.content);
            break;
          case 2:
            // left
            this.addElementInside("column", newContent, this.props.state.content);
            break;
          case 3:
            // right
            this.addElementInside("column", this.props.state.content, newContent);
            break;
          case 4:
            // bottom
            this.addElementInside("row", this.props.state.content, newContent);
        }
      }
      event.target.classList.remove("inside-adder-highligth-dragged-icon");
      window.nvhFormattingEditor.global.canBeDropped = false;
    },

    addElementInside(undesiredOrientation, firstLabel, secondLabel) {
      if (this.props.state.orientation === undesiredOrientation) {
        let desiredOrientation = undesiredOrientation == "column" ? "row" : "column";
        window.nvhFormattingEditor.addElement(0, window.nvhFormattingEditor.formattingEditorComponent, this.props.state, desiredOrientation, null);
        let newWrapperPlaceholder = this.props.state.children[0];
        window.nvhFormattingEditor.addElementWithChildren(0, window.nvhFormattingEditor.formattingEditorComponent, newWrapperPlaceholder, newWrapperPlaceholder, firstLabel);
        window.nvhFormattingEditor.addElementWithChildren(1, window.nvhFormattingEditor.formattingEditorComponent, newWrapperPlaceholder, newWrapperPlaceholder, secondLabel);
      } else {
        window.nvhFormattingEditor.addElementWithChildren(0, window.nvhFormattingEditor.formattingEditorComponent, this.props.state, this.props.state, firstLabel);
        window.nvhFormattingEditor.addElementWithChildren(1, window.nvhFormattingEditor.formattingEditorComponent, this.props.state, this.props.state, secondLabel);
      }
    },
    isDraggedElementOk() {
      return window.nvhFormattingEditor.isChildOfParent(window.nvhFormattingEditor.global.draggedElementFullName, this.props.state.content.fullName)
              && window.nvhFormattingEditor.global.draggedElementFullName !== this.props.state.content.fullName;
    }
  }
</script>

<style>
  .placeholder-content-box {
    padding: 0 5px;
    margin: 2px;
    width: 100%;
    text-align: center;
    text-wrap: nowrap;
  }
  .placeholder-content-box-left {
    text-align: left;
  }
  .content-box-wrapper {
    background-color: green;
    padding: 2px;
    margin-bottom: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
    cursor: grab;
  }
  .content-box-wrapper-base {
    cursor: default;
  }
  .content-box-wrapper-2 {
    display: flex;
    flex-direction: row;
    width: 100%;
  }
  .inside-adder-icon {
    color: var(--color-can-be-dropped) !important;
  }
  .inside-adder-highligth-dragged-icon {
    color: var(--color-is-dragged-over) !important;
  }
</style>

</elementholder-component>