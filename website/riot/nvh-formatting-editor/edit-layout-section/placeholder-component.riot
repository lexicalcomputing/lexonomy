<placeholder-component>
  <action-panel if={!props.isBaseLevel && props.status.isActive}
                class="action-panel"
                global={props.global}
                index={props.index}
                parentState={props.parentState}
                state={props.state}
                delete-element={props.deleteElement}
                element={this}
                />
  <elementholder-component if={props.state.content.name !== ""}
                          name={props.state.content.name}
                          color={props.state.content.color}
                          isAreaHolder={props.state.children.length === 0}
                          state={props.state}
                          add-element={props.addElement}
                          global={props.global}/>
  <div class="placeholder-inside-wrapper placeholder-inside-wrapper-{props.state.orientation}
              {props.editing.enabled && props.editing.mode === "delete" ? "placeholder-inside-wrapper-deletable" : ""}">
    <adder-component if={props.editing.enabled && props.editing.mode !== "delete"}
                    onclick={() => props.addElement(0, props.global.parent, props.state, props.editing.mode, null)}
                    ondragover={onAdderDragOver}
                    ondragenter={onAdderDragEnter}
                    ondragleave={onAdderDragLeave}
                    ondrop={(event) => onAdderDrop(event, props.state, 0)}
                    class="adder adder-{props.state.children.length === 0 ? "column": props.state.orientation}"
                    orientation={props.state.children.length === 0 ? "column": props.state.orientation}/>
    <template each={(child, index) in props.state.children}>
      <placeholder-component onclick={() => openActionPanel(child.status)}
                            ondragover={onDragOver}
                            ondrop={(event) => onDrop(event, child)}
                            class="placeholder placeholder-{child.orientation}
                                  {props.editing.enabled && props.editing.mode === "delete" ? "placeholder-deletable placeholder-deletable-" + child.orientation : ""}"
                            state={props.childWithInheritedArea(child, props.state)}
                            parentState={props.state}
                            editing={props.editing}
                            isActive={child.isActive}
                            status={child.status}
                            global={props.global}
                            index={index}
                            delete-element={props.deleteElement}
                            add-element={props.addElement}
                            close-action-panel={props.closeActionPanel}
                            child-with-inherited-area={props.childWithInheritedArea}/>
      <adder-component if={props.editing.enabled && props.editing.mode !== "delete"}
                      onclick={() => props.addElement(index + 1, props.global.parent, props.state, props.editing.mode, null)}
                      ondragover={onAdderDragOver}
                      ondragenter={onAdderDragEnter}
                      ondragleave={onAdderDragLeave}
                      ondrop={(event) => onAdderDrop(event, props.state, index + 1)}
                      class="adder adder-{props.state.orientation}"
                      orientation={props.state.orientation}/>
    </template>
  </div>

  <script>
    export default {
      onDragOver(event) {
        event.preventDefault();
      },
      onDrop(event, state) {
        const rawData = event.dataTransfer.getData("text/plain");
        const data = JSON.parse(rawData);
        if (this.props.global.canBeDropped) {
          if (data.type === "choice-item") {
            state.content.name = data.name;
            state.content.area = data.name;
            state.content.color = data.color;
          }
        }
        this.props.global.canBeDropped = false;
      },
      onAdderDragOver(event) {
        event.preventDefault();
      },
      onAdderDragEnter(event) {
        const rawData = event.dataTransfer.getData("text/plain");
        const data = JSON.parse(rawData);
        if (data.type === "placeholder") {
          event.target.classList.add("adder-highligth-dragged");
        }
      },
      onAdderDragLeave(event) {
        event.target.classList.remove("adder-highligth-dragged");
      },
      onAdderDrop(event, state, index) {
        const rawData = event.dataTransfer.getData("text/plain");
        /*TODO: exception handling for invalid objects*/
        const data = JSON.parse(rawData);
        if (this.props.global.canBeDropped) {
          if (data.type === "placeholder") {
            state.children.splice(index, 0, data);
            this.props.global.wasDropSuccessful = true;
            event.target.classList.remove("adder-highligth-dragged");
          } else if (data.type === "choice-item") {
            state.content.name = data.name;
            state.content.area = data.name;
            state.content.color = data.color;
          }
        }
        this.props.global.canBeDropped = false;
      },

      openActionPanel(status) {
        if (this.props.global.canOpenActionPanel) {
          this.props.closeActionPanel(); /*close actionPanel if any was opened*/
          status.isActive = true;
        } else {
          status.isActive = false;
        }
        this.props.global.canOpenActionPanel = false;
      }
    }
  </script>

  <style>
    .placeholder-inside-wrapper {
      background-color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: white;
      width: 100%;
      height: 100%;
    }
    .placeholder-inside-wrapper-column {
      flex-direction: column;
    }
    .placeholder-inside-wrapper-row {
      flex-direction: row;
    }


    .placeholder-deletable:hover {
      background-color: rgb(241, 165, 159) !important;
      cursor: pointer;
    }
    /*
    "placeholder-deletable" is hovered and has no descendants that are hovered
    */
    .placeholder-deletable:hover:not(:has(.placeholder-deletable:hover)) * {
      background-color: rgb(241, 165, 159) !important;
    }
    /*
    "placeholder-deletable" has any hovered descendant
    */
    .placeholder-deletable:has(.placeholder-deletable:hover) {
      background-color: white !important;
    }


    .item-dragged {
      background-color: rgb(212, 210, 203);
    }
    .item-dragged * {
      display: none;
    }
    .adder-highligth {
      background-color: rgb(237, 205, 116);
    }
    .adder-highligth-dragged {
      background-color: rgb(162, 127, 31) !important;
    }


    .action-panel {
      position: absolute;
      top: -40px;
      left: -4px;
      z-index: 100;
    }
  </style>
</placeholder-component>