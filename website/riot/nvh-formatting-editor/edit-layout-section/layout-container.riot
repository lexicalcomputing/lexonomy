<layout-container class={getLayoutContainerCssClass()}
      style="background-color: {getBackgroundColor()};"
      draggable="true"
      ondragstart={onDragStart}
      ondragend={onDragEnd}
      onmousedown={onMouseDown}
      onmouseover={onMouseOver}
      onmouseleave={onMouseLeave}
      onclick={onRootClick}>
   <elementholder-component class="elementholder"
         schema={props.schema}/>
   <add-children-component schema={props.schema}/>
   <div if={state.canHaveChildren && state.hasNotSameElementInAncestors}
         class={getLayoutContainerInsideWrapperCssClass(props.schema)}>
      <adder-component if={state.canHaveChildren && state.hasNotSameElementInAncestors}
            schema={props.schema}
            position=0/>
      <template each={(child, index) in props.schema.children}>
         <layout-container schema={child}/>
         <adder-component if={state.canHaveChildren && state.hasNotSameElementInAncestors}
               schema={props.schema}
               position={index + 1}/>
      </template>
   </div>

   <script>
      export default {
         bindings: [["nvhFormattingEditor", "selectedLayoutContainerChange", "onSelectedLayoutContainerChange"]],

         onBeforeMount(props) {
            this.nvhFormattingEditor = window.nvhFormattingEditor;
            this.nvhStore = window.nvhStore;
            this.refreshState()
         },

         onBeforeUpdate(props) {
            this.refreshState()
         },

         onSelectedLayoutContainerChange(){
            let shouldBeSelected = this.nvhFormattingEditor.data.selectedLayoutContainer == this.props.schema
            if(shouldBeSelected != this.isSelected){
               this.isSelected = shouldBeSelected
               this.update()
            }
         },

         onRootClick(evt){
            if(evt.target.closest("layout-container") == this.root){
               this.nvhFormattingEditor.selectLayoutContainer(this.props.schema)
            }
         },

         onMouseDown(evt){
            this.state.target = evt.target
         },

         onDragStart(evt){
            if ($(".layout-container-drag-handle", this.root).first()[0]?.contains(this.state.target)) {
               setTimeout(() => {
                  // prevent DOM manipulation to fire ondragend event immediately after ondragstart
                  $(this.root).addClass("layout-container-is-dragging")
                  this.nvhFormattingEditor.startElementDragging(this.props.schema)

               }, 0)
            } else {
               evt.preventDefault()
            }
            evt.stopPropagation()
         },

         onDragEnd(){
            $(this.root).removeClass("layout-container-is-dragging")
            this.nvhFormattingEditor.stopElementDragging()
         },

         onMouseOver(evt) {
            if(evt.target.closest("layout-container") == this.root){
               this.nvhFormattingEditor.setHoveredLayoutContainer(this.props.schema)
            }
         },

         onMouseLeave(event, schema, parentSchema) {
            this.nvhFormattingEditor.setHoveredLayoutContainer(null)
         },

         refreshState(){
            this.state.canHaveChildren = this.nvhFormattingEditor.canHaveChildren(this.props.schema)
            this.state.hasNotSameElementInAncestors = !this.props.schema.content.path  // empty container
                  || !this.nvhFormattingEditor.hasElementInAncestors(this.props.schema, this.props.schema.content.path)
         },

         getBackgroundColor() {
            if (!this.props.schema.content.name || !this.props.schema.parent) {
               return "#0000000a";
            }
            return this.nvhFormattingEditor.getColorLightVersion(this.nvhStore.getElementColor(this.props.schema.content.path), this.props.schema.children.length ? 0.85 : 0.95);
         },

         /*getOutlineColor(){
            let color = window.nvhStore.getElementColor(this.props.schema.content.path)
            if(!this.props.schema.children.length) {
               return this.nvhFormattingEditor.getColorLightVersion(color)
            }
            return color
         },*/

         getLayoutContainerCssClass() {
            return window.getClasses([
               ["layout-container",              true],
               ["layout-container-selected",     this.nvhFormattingEditor.isLayoutContainerActive(this.props.schema)],
               ["layout-container-dragged",      this.nvhFormattingEditor.isLayoutContainerDragged(this.props.schema)],
               ["layout-container-non-existing", this.nvhFormattingEditor.isElementNonExisting(this.props.schema.content.path)],
               ["layout-container-mouse-hover",  this.nvhFormattingEditor.data.hoveredLayoutContainer == this.props.schema]
            ])
         },

         getLayoutContainerInsideWrapperCssClass(layoutContainer) {
            let cssClass = `layout-container-inside-wrapper layout-container-inside-wrapper-${layoutContainer.orientation}`;
            cssClass += !layoutContainer.content.path ? " layout-container-inside-wrapper-no-content" : "";
            cssClass += !layoutContainer.content.path && layoutContainer.children.length !== 0 ? " layout-container-inside-wrapper-group" : "";
            return cssClass;
         }
      }
   </script>

   <style type="scss">
      :host{
         position: relative;
         display: flex;
         flex-direction: column;
         align-items: center;
         justify-content: flex-start;
         flex-grow: 1;
         width: 100%;
         cursor: pointer;
         transition: box-shadow 0.1s ease-in-out;
         box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.2), 0px 0px 2px rgba(0, 0, 0, 0.2);
         border-radius: 10px;
         &.layout-container-selected{
            //animation: pulse 1.7s infinite;
            transform: scale(1);
            outline: 3px solid #F44336;
         }
         & > .elementholder{
            overflow: hidden;
            border-radius: 10px;
         }
         &.layout-container-is-dragging{
            opacity: 0.3;
            filter: grayscale(50%);
         }
         &.layout-container-mouse-hover{
            &:not(.layout-container-selected){
               box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3), 0 0 5000px rgba(255, 255, 255, 0.5) inset!important;
               & > .layout-container-inside-wrapper > adder-component{
                  // highlight all adders directly placed in this container
                  .adder-dnd-zone-inner-wrapper{
                     opacity: 0.2;
                  }
               }
            }
         }
         &.layout-container-non-existing {
            background-color: black !important;
            .adder {
               display: none;
            }
         }
         & > .layout-container-inside-wrapper > .layout-container {
            height: 100%;
            width: 100%;
         }
      }
      .layout-container-inside-wrapper {
         display: flex;
         align-items: stretch;
         justify-content: center;
         width: 100%;
         padding: 4px 4px 4px 8px;
      }
      .layout-container-inside-wrapper-column {
         flex-direction: column;
      }
      .layout-container-inside-wrapper-row {
         flex-direction: row;
      }
      .layout-container-no-content {
         padding: 10px;
      }
      .elementholder {
         width: 100%;
         align-self: flex-start;
         min-width: 100px;
      }
      .add-children-component {
         width: 100%;
         margin-right: auto;
      }
      /*@keyframes pulse {
         0% {
            box-shadow: 0 0 0px 3px white,0 0 0 0 rgba(222, 84, 72, 1);
         }
         80% {
            box-shadow: 0 0 0px 3px white,0 0 0 16px rgba(222, 84, 72, 0);
         }
         100% {
            box-shadow: 0 0 0px 3px white,0 0 0 0 rgba(222, 84, 72, 0);
         }
      }*/
   </style>
</layout-container>
