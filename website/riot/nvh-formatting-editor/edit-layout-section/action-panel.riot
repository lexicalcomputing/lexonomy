<action-panel>
  <div class="action-panel-wrapper">
    <div class="action"
        id="action-drag"
        title="Drag"
        draggable="true"
        ondragstart={(event) => onDragStart(event, props.state)}
        ondragend={(event) => onDragEnd(props.index, props.parentState)}>
      <i class="small material-icons">drag_handle</i>
    </div>
    <div class="action"
        id="action-duplicate"
        title="Duplicate"
        onclick={duplicateElement}>
      <i class="small material-icons">control_point_duplicate</i>
    </div>
    <div class="action"
        id="action-delete"
        title="Delete"
        onclick={() => props.deleteElement(props.index, props.parentState)}>
      <i class="small material-icons">delete</i>
    </div>
    <div if={props.parentState.orientation === "column"} 
        class="action"
        id="action-moveup"
        title="Move up"
        onclick={decreaseElementIndex}>
      <i class="small material-icons">arrow_upward</i>
    </div>
    <div if={props.parentState.orientation === "column"} 
        class="action"
        id="action-movedown"
        title="Move down"
        onclick={increaseElementIndex}>
      <i class="small material-icons">arrow_downward</i>
    </div>
    <div if={props.parentState.orientation === "row"} 
        class="action"
        id="action-moveleft"
        title="Move left"
        onclick={decreaseElementIndex}>
      <i class="small material-icons">arrow_back</i>
    </div>
    <div if={props.parentState.orientation === "row"} 
        class="action"
        id="action-moveright"
        title="Move right"
        onclick={increaseElementIndex}>
      <i class="small material-icons">arrow_forward</i>
    </div>
    <div class="action"
        id="action-close"
        title="Close"
        onclick={closeActionPanel}>
      <i class="small material-icons">close</i>
    </div>
  </div>

<script>
  export default {
    onDragStart(event, state) {
      if (this.props.global.canBeDragged) {
        event.dataTransfer.clearData();
        const data = JSON.stringify(state);
        event.dataTransfer.setData("text/plain", data);

        let adders = document.getElementsByClassName("adder");
        for (let adder of adders) {
          adder.classList.add("adder-highligth");
        }
        this.props.element.root.classList.add("item-dragged");
      }
      this.props.global.canBeDragged = false;
    },
    onDragEnd(indexToDelete, parentState) {
      if (this.props.global.wasDropSuccessful) {
        parentState.children = Array.from(parentState.children).filter((child, index) => index != indexToDelete);
      }

      let adders = document.getElementsByClassName("adder");
      for (let adder of adders) {
        adder.classList.remove("adder-highligth");
      }
      this.props.element.root.classList.remove("item-dragged");

      this.props.global.parent.update();
    },

    closeActionPanel() {
      this.props.global.canOpenActionPanel = false;
    },
    duplicateElement() {
      let copiedElement = JSON.parse(JSON.stringify(this.props.state)); /*deep copy*/
      this.props.parentState.children.splice(this.props.index + 1, 0, copiedElement);
      this.props.global.parent.update();
    },
    decreaseElementIndex() {
      if (this.props.index === 0) {
        return;
      }
      this.props.parentState.children = Array.from(this.props.parentState.children).filter((child, index) => index !== this.props.index);
      this.props.parentState.children.splice(this.props.index - 1, 0, this.props.state);
    },
    increaseElementIndex() {
      if (this.props.index === this.props.parentState.children.length - 1) {
        return;
      }
      this.props.parentState.children = Array.from(this.props.parentState.children).filter((child, index) => index !== this.props.index);
      this.props.parentState.children.splice(this.props.index + 1, 0, this.props.state);
    },
  }
</script>

<style>
  .action-panel-wrapper {
    display: flex;
    height: 36px;
    border: 1px solid black;
    background-color: white;
  }
  .action {
    cursor: pointer;
    border: 1px solid black;
  }
  .action:hover {
    background-color:rgb(208, 232, 246);
  }
  #action-delete {
    background-color: red;
  }
  #action-delete:hover {
    background-color: rgb(218, 71, 51);
  }
  #action-drag {
    cursor: grab;
  }
</style>

</action-panel>