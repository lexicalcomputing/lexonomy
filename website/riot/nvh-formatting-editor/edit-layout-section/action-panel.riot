<action-panel>
  <div class="action-panel-wrapper">
    <div if={!props.isBaseLevel && !props.isMarkupTypeChild} 
        class="action"
        id="action-drag"
        title="Drag"
        onmousedown={(event) => onMouseDown(event, props.state, props.index)}>
      <i class="small material-icons">drag_handle</i>
    </div>
    <div if={!props.isBaseLevel && !props.isMarkupTypeChild}
        class="action"
        id="action-duplicate"
        title="Duplicate"
        onclick={duplicateElement}>
      <i class="small material-icons">content_copy</i>
    </div>
    <div if={props.parentState.orientation === "column" && !props.isBaseLevel} 
        class="action"
        id="action-moveup"
        title="Move up"
        onclick={decreaseElementIndex}>
      <i class="small material-icons">arrow_upward</i>
    </div>
    <div if={props.parentState.orientation === "column" && !props.isBaseLevel} 
        class="action"
        id="action-movedown"
        title="Move down"
        onclick={increaseElementIndex}>
      <i class="small material-icons">arrow_downward</i>
    </div>
    <div if={props.parentState.orientation === "row" && !props.isBaseLevel} 
        class="action"
        id="action-moveleft"
        title="Move left"
        onclick={decreaseElementIndex}>
      <i class="small material-icons">arrow_back</i>
    </div>
    <div if={props.parentState.orientation === "row" && !props.isBaseLevel} 
        class="action"
        id="action-moveright"
        title="Move right"
        onclick={increaseElementIndex}>
      <i class="small material-icons">arrow_forward</i>
    </div>
    <div if={!props.isMarkupTypeChild}
        class="action action-orientation-{props.state.orientation}"
        title={props.state.orientation === "column"
          ? "Content of this area is VERTICALLY aligned.\nClick to align the content HORIZONTALLY."
            : "Content of this area is HORIZONTALLY aligned.\nClick to align the content VERTICALLY."}
        onclick={changeOrientation}>
      <i class="small material-icons" if={props.state.orientation === "column"}>swap_vert</i>
      <i class="small material-icons" if={props.state.orientation === "row"}>swap_horiz</i>
    </div>
    <div if={!props.isBaseLevel}
        class="action"
        id="action-delete"
        title="Delete"
        onclick={() => window.nvhFormattingEditor.deleteElement(props.index, props.parentState, props.state)}>
      <i class="small material-icons">delete</i>
    </div>
  </div>

<script>
  export default {
    parentLengthOriginal: null,

    onBeforeMount(props) {
      this.parentLengthOriginal = props.parentState.children.length;
    },
    onBeforeUpdate(props) {
      this.parentLengthOriginal = props.parentState.children.length;
    },
  
    onMouseDown(event, state, indexToDrag) {
      if (window.nvhFormattingEditor.global.canBeDragged) {
        let releaseFunction = {
          parameters: [event.currentTarget.parentElement.parentElement.parentElement.parentElement, this.props.index, this.props.parentState, this.props.state],
          run: this.onRelease,
        };
        state["releaseFunction"] = releaseFunction;
        window.nvhFormattingEditor.global.mouseData = state;

        window.nvhFormattingEditor.global.draggedElementFullName = state.content.fullName;
        window.nvhFormattingEditor.global.draggedPlaceholder = state;
        state.status.isDragged = true;

        this.hideCloseAdders(event.currentTarget.parentElement.parentElement.parentElement.parentElement, indexToDrag);

        let adders = document.getElementsByClassName("adder");
        for (let adder of adders) {
          adder.classList.add("adder-highligth");
        }
        window.nvhFormattingEditor.formattingEditorComponent.update(); /*This forces Chrome browser to rerender placeholders and adders*/
      }
      window.nvhFormattingEditor.global.canBeDragged = false;
    },
    onRelease(htmlElement, indexToDelete, parentState, state) {
      /*
      If placeholder was dragged within the same parent but its index was decreased,
      it is necessary that "indexToDelete" has to be increased by one, so that I delete
      the desired element.
      */
      const wasIndexDecreased = this.props.parentState.children.length > this.parentLengthOriginal
                                && window.nvhFormattingEditor.global.dropInfo.index < indexToDelete;

      if (window.nvhFormattingEditor.global.dropInfo.wasSuccessful) {
        if (wasIndexDecreased) {
          parentState.children = Array.from(parentState.children).filter((child, index) => index != indexToDelete + 1);
        } else {
          parentState.children = Array.from(parentState.children).filter((child, index) => index != indexToDelete);
        }
      }
      // window.nvhFormattingEditor.formattingEditorComponent.update(); // IMPORTANT, NOT TO HAVE HERE, BUT ONLY AFTER THIS FUNCTION FINISHES
    },
    hideCloseAdders(htmlElement, indexToDrag) {
      let htmlElementChildren = Array.from(htmlElement.children);
      let leftAdder = htmlElementChildren[indexToDrag * 2];
      let rightAdder = htmlElementChildren[indexToDrag * 2 + 2];
      leftAdder.style.display = "none";
      rightAdder.style.display = "none";
    },
    duplicateElement() {
      let copiedElement = JSON.parse(JSON.stringify(this.props.state)); /*deep copy*/
      this.props.parentState.children.splice(this.props.index + 1, 0, copiedElement);
      this.props.state.status.isActive = false; /*onClick in placeholder will cause that the placeholder will have active status*/
      copiedElement.status.isHovered = false;
      window.nvhFormattingEditor.formattingEditorComponent.update();
    },
    decreaseElementIndex() {
      if (this.props.index === 0) {
        return;
      }
      this.props.parentState.children = Array.from(this.props.parentState.children).filter((child, index) => index !== this.props.index);
      this.props.parentState.children.splice(this.props.index - 1, 0, this.props.state);
      this.props.state.status.isHovered = false;
      this.props.state.status.isActive = false; /*onClick in placeholder will cause that the placeholder will have active status*/
    },
    increaseElementIndex() {
      if (this.props.index === this.props.parentState.children.length - 1) {
        return;
      }
      this.props.parentState.children = Array.from(this.props.parentState.children).filter((child, index) => index !== this.props.index);
      this.props.parentState.children.splice(this.props.index + 1, 0, this.props.state);
      this.props.state.status.isHovered = false;
      this.props.state.status.isActive = false; /*onClick in placeholder will cause that the placeholder will have active status*/
    },
    changeOrientation() {
      this.props.state.orientation === "column" ? this.props.state.orientation = "row" : this.props.state.orientation = "column";
      this.props.state.status.isActive = false; /*onClick in placeholder will cause that the placeholder will have active status*/
    }
  }
</script>

<style>
  .action-panel-wrapper {
    display: flex;
    height: 36px;
    border: 1px solid black;
    background-color: white;
  }
  .action {
    cursor: pointer;
    border: 1px solid black;
  }
  .action:hover {
    background-color:rgb(208, 232, 246);
  }
  #action-delete {
    background-color: red;
  }
  #action-delete:hover {
    background-color: rgb(218, 71, 51);
  }
  #action-drag {
    cursor: grab;
    user-select: none;
  }


  .action-orientation-label {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 26px;
  }

  .action-orientation-column {
    background-color: var(--color-column);
  }
  .action-orientation-column:hover {
    background-color:rgb(102, 184, 239);
  }
  .action-orientation-row {
    background-color: var(--color-row);
  }
  .action-orientation-row:hover {
    background-color: rgb(239, 122, 96);
  }
</style>

</action-panel>