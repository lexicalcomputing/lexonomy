<dict-config-formatting>
  <h1 class="formatting-page-title">Entry Formatting</h1>
  <div class="formatting-page-visibility-container">
    <div onclick={onLayoutClick.bind(this, "showElements")}
        class="formatting-page-visibility-item {!state.showElements ? "item-inactive" : ""}">
      <i class="small material-icons">sort</i>
    </div>
    <div onclick={onLayoutClick.bind(this, "showStyle")}
        class="formatting-page-visibility-item {!state.showStyle ? "item-inactive" : ""}">
      <i class="small material-icons">format_paint</i>
    </div>
    <div onclick={onLayoutClick.bind(this, "showEditing")}
        class="formatting-page-visibility-item {!state.showEditing ? "item-inactive" : ""}">
      <i class="small material-icons">edit</i>
    </div>
    <div onclick={onLayoutClick.bind(this, "showExample")}
        class="formatting-page-visibility-item {!state.showExample ? "item-inactive" : ""}">
      <i class="small material-icons">view_compact</i>
    </div>
  </div>
  <div class="formatting-page-wrapper-container">
    <div if={state.showElements}
        id="elements-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">sort</i>
        <h2>Elements</h2>
        <div id="trash-icon-wrapper"
            ondragenter={onDragEnter}
            ondragleave={onDragLeave}
            ondragover={onDragOver}
            ondrop={onDrop}>
          <i class="small material-icons trash-disabled" id="trash-icon">delete</i>
        </div>
      </div>
      <div class="elements-choice-section-wrapper">
        <elements-choice-section class="elements-choice-section"
                                parent={this}
                                elementsSchema={elementsSchema}/>
      </div>
    </div>
    <div if={state.showStyle}
        id="style-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">format_paint</i>
        <h2>Style</h2>
      </div>
      <div>TBD</div>
    </div>
    <div if={state.showEditing}
        id="editing-container"
        class="formatting-page-container">
      <div class="editing-header">
        <div class="header-box">
          <i class="small material-icons">edit</i>
          <h2>Editing</h2>
          <div id="reset-icon-wrapper"
              onclick={resetSchema}>
            RESET
          </div>
        </div>
      </div>
      <div class="editing-layout-wrapper">
        <edit-layout class="edit-layout"
                    editing={state.editing}
                    schema={schema}
                    parent={this}
                    global={global}/>
      </div>
    </div>
    <div if={state.showExample} 
        id="example-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">view_compact</i>
        <h2>Example</h2>
      </div>
      <div class="example-section-wrapper">
        <example-section class="example-section"
                        schema={schema}
                        exampleEntry={entryInfo}/>
      </div>
    </div>
  </div>
  
  <script>
    export default {
      entryInfoRaw: null,
      entryInfo: null,
      state: {
        showElements: true,
        showStyle: false,
        showEditing: true,
        showExample: true,
        editing: {
          enabled: true,
          mode: "column" /*types: "column", "row", "delete" */
        },
      },
      global: null,
      schema: {
        orientation: "column", /*orientation of scrollable-div is always "column"*/
        children: [
          {
            status: {
              isActive: false, /*action panel is displayed*/
              isHovered: false,
            },
            orientation: "column", /*default placeholder is of type "column"*/
            type: "placeholder",
            content: {
              name: "",
              fullName: "",
              area: "",
              color: ""
            },
            contentColor: "",
            children: [],
          }
        ]
      },
      elementsSchema: null,

      onBeforeMount() {
        this.elementsSchema = this.createElementsSchema(window.store.schema.schema);
        this.global = {
          canBeRemovedIfHovered: true, /*remove only the deepest hovered "placeholder", the other ones should stay as they are*/
          canBeDropped: true, /*drop element only to deepest hovered "placeholder"*/
          canBeDragged: true, /*drag only the deepest hovered "placeholder"*/
          dropInfo: {
            wasSuccessful: false,
            index: null,
          },
          canOpenActionPanel: true, /*open only action panel of the deepest hovered "placeholder"*/
          parent: null,
        };
        this.schema.children[0].content = {
          name: "entry",
          fullName: "entry",
          area: "entry",
          color: window.nvhStore.getElementColor("entry")
        };
        this.loadEntry();
      },
      onBeforeUpdate() {
        this.elementsSchema = this.createElementsSchema(window.store.schema.schema);
        this.global = {
          canBeRemovedIfHovered: true,
          canBeDropped: true,
          canBeDragged: true,
          dropInfo: {
            wasSuccessful: false,
            index: null,
          },
          canOpenActionPanel: true,
          parent: null,
        };
        this.entryInfo = this.createEntryStructure(Object.entries(JSON.parse(entryInfoRaw.json).entry[0]));
      },

      onDragEnter() {
        let trashIcon = document.getElementById("trash-icon");
        trashIcon.classList.add("trash-dragged-over");
      },
      onDragLeave() {
        let trashIcon = document.getElementById("trash-icon");
        trashIcon.classList.remove("trash-dragged-over");
      },
      onDragOver(event) {
        event.preventDefault();
      },
      onDrop() {
        this.global.dropInfo.wasSuccessful = true;
        let trashIcon = document.getElementById("trash-icon");
        trashIcon.classList.remove("trash-dragged-over");
      },

      onLayoutClick(sectionName) {
        this.update({[sectionName]: !this.state[sectionName]});
      },
      onToggleEditing() {
        this.state.editing.enabled = !this.state.editing.enabled;
        this.update();
      },
      onEditModeChange(editModeType) {
        this.state.editing.mode = editModeType;
        this.update();
      },
      /*
      TODO: figure out how to call this only after onMounted is called.
      The problem is that I need to refresh "edit" and "example" section, but "elements"
      section should remain the same.
      */
      createElementsSchema(element) {
        let objectStructure = {
          data: {
            type: "choice-item",
            name: element.name,
            fullName: element.path,
            color: window.nvhStore.getElementColor(element.path),
          },
          children: []
        };
        for (let child of element.children) {
          let newElement = this.createElementsSchema(child);
          objectStructure.children.push(newElement)
        }
        return objectStructure;
      },
      resetSchema() {
        this.schema = {
          orientation: "column",
          children: [
            {
              status: {
                isActive: false,
              },
              orientation: "column",
              type: "placeholder",
              content: {
                name: "entry",
                fullName: "entry",
                area: "entry",
                color: window.nvhStore.getElementColor("entry")
              },
              contentColor: "",
              children: [],
            }
          ]
        },

        this.update();
      },
      loadEntry() {
        /*Just loading example entry for testing*/
        window.store.changeEntryId(4);
        let entryPromise = window.store.loadEntry();
        entryPromise.then(result => {
          entryInfoRaw = result;
          this.update();
        });
      },
      createEntryStructure(entry) {
        let objectHolder = {
          name: null,
          fullName: "entry",
          value: null,
          children: []
        };
        
        for (let element of entry) {
          if (element[0] === "_name") {
            objectHolder.name = element[1];
          } else if (element[0] === "_value") {
            objectHolder.value = element[1];
          } else {
            for (let childHolder of element[1]) {
              let child = this.createEntryStructure(Object.entries(childHolder));
              child.fullName = element[0];
              objectHolder.children.push(child);
            }
          }
        }
        return objectHolder;
      },
    }
  </script>

  <style>
    * {
      --color-row:rgb(241, 137, 113);
      --color-column:rgb(121, 195, 245);
      --color-can-be-dropped: rgb(237, 205, 116);
      --color-is-dragged-over: rgb(162, 127, 31);
      --color-is-dragged-over-light: rgb(255, 245, 217);
      --color-is-active: rgb(21, 93, 225);
      --color-is-hovered: rgb(132, 155, 237);
    }


    .scrollable-div {
      position: relative;
      display: flex;
      flex-direction: column;
      min-width: 450px;
      width: fit-content;
      height: 100%;
      overflow: auto;
      min-width: 100%;
      padding: 5px;
    }
    .icon-svg {
      height: 20px;
      width: 20px;
    }
    .header-box {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    #trash-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .trash-disabled {
      color: rgb(176, 192, 205);
      cursor: not-allowed;
    }
    .trash-enabled {
      color: black;
    }
    .trash-dragged-over {
      transform: scale(1.1);
      color: red;
    }
    #reset-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid black;
      padding: 2px 4px;
      margin-left: 5px;
      background-color: rgb(232, 108, 102);
    }
    #reset-icon-wrapper:hover {
      transform: scale(1.05);
      background-color: rgb(240, 94, 87);
      cursor: pointer;
    }
    #reset-icon-wrapper:active {
      transform: scale(1.1);
    }


    .formatting-page-title {
      text-wrap: nowrap;
    }
    .formatting-page-visibility-container {
      display: flex;
    }
    .formatting-page-wrapper-container {
      display: flex;
      height: 700px;
      overflow-x: auto;
    }


    .elements-choice-section {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
    .elements-choice-section-wrapper {
      width: 100%;
      height: 600px;
    }


    .example-section {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
    .example-section-wrapper {
      min-width: 600px;
      height: 600px;
    }


    .formatting-page-visibility-item {
      padding: 5px;
      background-color: #40e675;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .formatting-page-visibility-item:hover {
      cursor: pointer;
      background-color:rgb(32, 214, 90);
      transform: scale(1.05);
    }
    .formatting-page-visibility-item:active {
      transform: scale(1.1);
    }
    .item-inactive {
      background-color: #d3e8d9;
    }


    .formatting-page-container {
      width: 100%;
    }
    #elements-container {
      border-right: 1px solid #dcdee3;
      padding-right: 1.5em;
      flex: 2 5 auto;
      min-width: 220px
    }
    #style-container {
      border-right: 1px solid #dcdee3;
      padding-left: 1.5em;
      padding-right: 1.5em;
      flex: 1 6 auto;
      min-width: 150px;
    }
    #editing-container {
      border-right: 1px solid #dcdee3;
      padding-left: 1.5em;
      padding-right: 1.5em;
      flex: auto;
      width: auto;
    }
    #example-container {
      border-right: 1px solid #dcdee3;
      padding-left: 1.5em;
      padding-right: 1.5em;
      flex: auto;
      width: auto;
    }


    .editing-header {
      display: flex;
      align-items: center;
      gap: 10px;
      min-width: 600px;
    }
    .editing-layout-wrapper {
      width: 100%;
      height: 600px;
    }
    .edit-layout {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
  </style>
</dict-config-formatting>