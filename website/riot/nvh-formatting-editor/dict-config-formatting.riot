<dict-config-formatting>
  <loading-overlay if={state.isSaving}/>
  <h1 class="formatting-page-title">Entry Formatting</h1>
  <nvh-formatting-editor-toolbar state={state.toolbar} save-schemas={saveSchemas}/>
  <div class="formatting-page-wrapper-container">
    <div if={state.toolbar.isSectionVisible.elements}
        id="elements-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">sort</i>
        <h2>Elements</h2>
        <div id="trash-icon-wrapper"
            onmouseenter={onMouseEnter}
            onmouseleave={onMouseLeave}
            onmouseup={onMouseUp}>
          <i class="small material-icons trash-disabled" id="trash-icon">delete</i>
        </div>
      </div>
      <div class="elements-choice-section-wrapper">
        <elements-choice-section class="elements-choice-section"
                                elementsSchema={window.nvhFormattingEditor.elementsSchema}/>
      </div>
    </div>
    <div if={state.toolbar.isSectionVisible.elements} class="resizeHandle"
        onmousedown={(event) => onResizeHandleMouseDown(event, ".elements-choice-section-wrapper", 200, 300)}></div>
    <div if={state.toolbar.isSectionVisible.editing}
        id="editing-container"
        class="formatting-page-container">
      <div class="editing-header">
        <div class="header-box">
          <i class="small material-icons">view_compact</i>
          <h2>Layout</h2>
          <label if={window.nvhFormattingEditor.global.activeLayout !== "desktop" && window.nvhStore.data.formatting.layout !== undefined}
                class="checkbox"
                style="margin-left: 20px;">
              <input type="checkbox" checked={window.nvhFormattingEditor.currentLayout.configured}/>
              <span class="tooltipped"
                  style="padding-left: 25px;"
                  onclick={saveAndToggleLayoutUsage}
                  data-tooltip={window.nvhFormattingEditor.currentLayout.configured ?
                                "Layout for this device is used.\nWhen viewing the dictionary on this device, current layout will be seen."
                                : "Layout for this device is not used.\nWhen viewing the dictionary on this device,\nthe layout will be inherited from bigger device."}>
                Use {window.nvhFormattingEditor.global.activeLayout} layout
              </span>
          </label>
        </div>
      </div>
      <div class="editing-layout-wrapper">
        <edit-layout class="edit-layout"/>
      </div>
    </div>
    <div if={state.toolbar.isSectionVisible.style}
        id="style-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">palette</i>
        <h2>Style</h2>
      </div>
      <div class="style-section-wrapper">
        <styles-section class="style-section"/>
      </div>
    </div>
    <div if={state.toolbar.isSectionVisible.style} class="resizeHandle"
        onmousedown={(event) => onResizeHandleMouseDown(event, ".style-section-wrapper", 200, 600)}></div>
    <div if={state.toolbar.isSectionVisible.example} 
        id="example-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">visibility</i>
        <h2>Preview</h2>
      </div>
      <div class="example-section-wrapper">
        <example-section class="example-section"/>
      </div>
    </div>
  </div>
  
  <script>
    export default {
      state: {
        toolbar: {
          isSaving: false,
          isSectionVisible: {
            elements: true,
            style: false,
            editing: true,
            example: true,
          },
        },
        mousePos: null,
        leftContainer: {
          className: null,
          minWidth: null,
          maxWidth: null,
        }
      },

      onBeforeMount() {
        window.nvhFormattingEditor.elementsSchema = window.nvhFormattingEditor.createElementsSchema();
        window.nvhFormattingEditor.formattingEditorComponent = this;
        window.nvhFormattingEditor.global = window.nvhFormattingEditor.initializeGlobalAttributes();
        document.addEventListener("mouseup", this.globalOnMouseUp);
        document.addEventListener("mousedown", this.globalOnMouseDown);

        let formatting = window.store.data.config.formatting;

        if (formatting.layout !== undefined && formatting.layout !== null) {
          let desktopElements = formatting.layout.desktop.elements !== undefined && formatting.layout.desktop.elements !== null
                                  ? formatting.layout.desktop.elements : formatting.elements;
          let tabletElements = formatting.layout.tablet.elements !== undefined && formatting.layout.tablet.elements !== null
                                  ? formatting.layout.tablet.elements : formatting.elements;
          let mobileElements = formatting.layout.mobile.elements !== undefined && formatting.layout.mobile.elements !== null
                                  ? formatting.layout.mobile.elements : formatting.elements;
          let pdfElements = formatting.layout.pdf.elements !== undefined && formatting.layout.pdf.elements !== null
                                  ? formatting.layout.pdf.elements : formatting.elements;

          window.nvhFormattingEditor.layout = {
            desktop: {
              configured: true,
              schema: formatting.layout.desktop.schema,
              elements: JSON.parse(JSON.stringify(desktopElements)),
              history: {
                index: 0,
                schema: [JSON.parse(JSON.stringify(formatting.layout.desktop.schema))],
                elements: [JSON.parse(JSON.stringify(desktopElements))],
              }
            },
            tablet: {
              configured: formatting.layout.tablet.configured === undefined ? false : formatting.layout.tablet.configured,
              schema: formatting.layout.tablet.schema,
              elements: JSON.parse(JSON.stringify(tabletElements)),
              history: {
                index: 0,
                schema: [JSON.parse(JSON.stringify(formatting.layout.tablet.schema))],
                elements: [JSON.parse(JSON.stringify(tabletElements))],
              }
            },
            mobile: {
              configured: formatting.layout.mobile.configured === undefined ? false : formatting.layout.mobile.configured,
              schema: formatting.layout.mobile.schema,
              elements: JSON.parse(JSON.stringify(mobileElements)),
              history: {
                index: 0,
                schema: [JSON.parse(JSON.stringify(formatting.layout.mobile.schema))],
                elements: [JSON.parse(JSON.stringify(mobileElements))],
              }
            },
            pdf: {
              configured: formatting.layout.pdf.configured === undefined ? false : formatting.layout.pdf.configured,
              schema: formatting.layout.pdf.schema,
              elements: JSON.parse(JSON.stringify(pdfElements)),
              history: {
                index: 0,
                schema: [JSON.parse(JSON.stringify(formatting.layout.pdf.schema))],
                elements: [JSON.parse(JSON.stringify(pdfElements))],
              }
            }
          }
        } else {
          window.nvhFormattingEditor.initializeSchemas();
        }
        window.nvhFormattingEditor.currentLayout = window.nvhFormattingEditor.layout.desktop;
      },
      onBeforeUnmount() {
        document.removeEventListener("mouseup", this.globalOnMouseUp);
        document.removeEventListener("mousedown", this.globalOnMouseDown);
      },
      onBeforeUpdate() {
        window.nvhFormattingEditor.global = {
          canBeRemovedIfHovered: true,
          canBeDropped: true,
          canBeDragged: true,
          draggedElementFullName: window.nvhFormattingEditor.global.draggedElementFullName,
          draggedPlaceholder: window.nvhFormattingEditor.global.draggedPlaceholder,
          dropInfo: {
            wasSuccessful: false,
            index: null,
          },
          mouseData: window.nvhFormattingEditor.global.mouseData,
          canOpenActionPanel: true,
          selectedPlaceholder: window.nvhFormattingEditor.global.selectedPlaceholder,
          selectedPlaceholderParentAreaFullName: window.nvhFormattingEditor.global.selectedPlaceholderParentAreaFullName,
          parent: null,
          activeLayout: window.nvhFormattingEditor.global.activeLayout,
        };
        /*
        Change history, if I modified edit section in other way that using 'undo' or 'redo'.
        */
        if (this.isElementsStyleChanged(window.nvhFormattingEditor.currentLayout.history.elements.at(window.nvhFormattingEditor.currentLayout.history.index), window.nvhFormattingEditor.currentLayout.elements)
            || this.isSchemaChanged(window.nvhFormattingEditor.currentLayout.history.schema.at(window.nvhFormattingEditor.currentLayout.history.index), window.nvhFormattingEditor.currentLayout.schema)) {
          window.nvhFormattingEditor.currentLayout.history.elements.length = window.nvhFormattingEditor.currentLayout.history.index + 1;
          window.nvhFormattingEditor.currentLayout.history.schema.length = window.nvhFormattingEditor.currentLayout.history.index + 1;
          window.nvhFormattingEditor.currentLayout.history.elements.push(JSON.parse(JSON.stringify(window.nvhFormattingEditor.currentLayout.elements)));
          window.nvhFormattingEditor.currentLayout.history.schema.push(JSON.parse(JSON.stringify(window.nvhFormattingEditor.currentLayout.schema)));
          window.nvhFormattingEditor.currentLayout.history.index += 1;
        }
      },

      onMouseEnter() {
        const data = window.nvhFormattingEditor.global.mouseData;
        if (data !== null && data.type === "elementholder-label") {
          let trashIcon = document.getElementById("trash-icon");
          if (Array.from(trashIcon.classList).includes("trash-enabled")) {
            trashIcon.classList.add("trash-dragged-over");
          }
        }
      },
      onMouseLeave() {
        let trashIcon = document.getElementById("trash-icon");
        trashIcon.classList.remove("trash-dragged-over");
      },
      onMouseUp() {
        const data = window.nvhFormattingEditor.global.mouseData;
        if (data === null) {
          return;
        }
        if (data.type === "choice-item" || data.type === "elementholder-label") {
          window.nvhFormattingEditor.global.dropInfo.wasSuccessful = true;
          // Remove following line during selected placeholder refactor
          // window.nvhFormattingEditor.global.selectedPlaceholder = null;
          window.nvhFormattingEditor.global.selectedPlaceholderParentAreaFullName = "";
          let trashIcon = document.getElementById("trash-icon");
          trashIcon.classList.remove("trash-dragged-over");
        }
        if (data.releaseFunction !== undefined && data.releaseFunction !== null) {
          data.releaseFunction.run(...data.releaseFunction.parameters);
          data.releaseFunction = null;
        }
        window.nvhFormattingEditor.formattingEditorComponent.update();
      },
      isSchemaChanged(oldSchema, newSchema) {
        if (oldSchema.orientation !== newSchema.orientation) {
          return true;
        }
        if (JSON.stringify(oldSchema.styles) !== JSON.stringify(newSchema.styles)) {
          return true;
        }
        if (JSON.stringify(oldSchema.markupStyles) !== JSON.stringify(newSchema.markupStyles)) {
          return true;
        }
        if (JSON.stringify(oldSchema.labelStyles) !== JSON.stringify(newSchema.labelStyles)) {
          return true;
        }
        if (JSON.stringify(oldSchema.bulletStyles) !== JSON.stringify(newSchema.bulletStyles)) {
          return true;
        }
        if (oldSchema.content !== undefined && oldSchema.content !== undefined) {
          if (oldSchema.content.fullName !== newSchema.content.fullName) {
            return true;
          }
          if (oldSchema.content.fullName !== newSchema.content.fullName) {
            return true;
          }
        }
        if (oldSchema.children.length !== newSchema.children.length) {
          return true;
        }

        for (let i = 0; i < newSchema.children.length; i++) {
          if (this.isSchemaChanged(oldSchema.children.at(i), newSchema.children.at(i))) {
            return true;
          }
        }

        return false;
      },
      isElementsStyleChanged(oldElements, newElements) {
        for (let element of Object.entries(oldElements)) {
          let path = element[0];

          if (Object.entries(oldElements[path]).length !== Object.entries(newElements[path]).length) {
            return true;
          }

          for (let style of Object.entries(oldElements[path])) {
            let styleName = style[0];
            if (oldElements[path][styleName] !== newElements[path][styleName]) {
              return true;
            }
          }
        }
        return false;
      },
      saveSchemas() {
        this.update({isSaving: true});
        window.nvhFormattingEditor.clearStatuses(window.nvhFormattingEditor.currentLayout.schema);
        window.nvhFormattingEditor.global.selectedPlaceholder = null;
        let elementsConfig = window.nvhStore.data.formatting.elements;
        let layoutConfig = {
          desktop: {
            schema: window.nvhFormattingEditor.layout.desktop.schema,
            elements: window.nvhFormattingEditor.layout.desktop.elements,
            configured: true,
          },
          tablet: {
            schema: window.nvhFormattingEditor.layout.tablet.schema,
            elements: window.nvhFormattingEditor.layout.tablet.elements,
            configured: window.nvhFormattingEditor.layout.tablet.configured,
          },
          mobile: {
            schema: window.nvhFormattingEditor.layout.mobile.schema,
            elements: window.nvhFormattingEditor.layout.mobile.elements,
            configured: window.nvhFormattingEditor.layout.mobile.configured,
          },
          pdf: {
            schema: window.nvhFormattingEditor.layout.pdf.schema,
            elements: window.nvhFormattingEditor.layout.pdf.elements,
            configured: window.nvhFormattingEditor.layout.pdf.configured,
          },
        };
        this.store.updateDictionaryConfig("formatting", {
          elements: elementsConfig,
          layout: layoutConfig,
        })
              .always(() => {
                this.state.isSaving = false;
                this.update();
              });
      },
      saveAndToggleLayoutUsage() {
        this.update({isSaving: true});
        let formatting = window.nvhStore.data.formatting;
        let layoutConfig = formatting.layout;
        layoutConfig[window.nvhFormattingEditor.global.activeLayout].configured = !window.nvhFormattingEditor.currentLayout.configured;
        this.store.updateDictionaryConfig("formatting", formatting)
              .always(() => {
                this.state.isSaving = false;
                window.nvhFormattingEditor.currentLayout.configured = layoutConfig[window.nvhFormattingEditor.global.activeLayout].configured;
                this.update();
              });
      },
      globalOnMouseUp() {
        clearTimeout(window.nvhFormattingEditor.timeout);
        if (window.nvhFormattingEditor.global.mouseData !== null) {
          let adders = document.getElementsByClassName("adder");
          for (let adder of adders) {
            adder.classList.remove("adder-highligth");
            adder.classList.remove("adder-highligth-dragged");
            adder.style.display = "";
          }

          window.nvhFormattingEditor.global.draggedElementFullName = "";
          window.nvhFormattingEditor.global.draggedPlaceholder = null;
          window.nvhFormattingEditor.global.mouseData = null;

          let trash = document.getElementById("trash-icon");
          if (trash != null) {
            trash.classList.add("trash-disabled");
            trash.classList.remove("trash-enabled");
            trash.classList.remove("trash-dragged-over");
          }

          let allElements = document.querySelectorAll("*");
          for (element of allElements) {
            element.classList.remove("cursor-grabbing");
          }
          window.nvhFormattingEditor.clearDraggedStatuses(window.nvhFormattingEditor.currentLayout.schema);
          window.nvhFormattingEditor.formattingEditorComponent.update();
        }
      },
      globalOnMouseDown() {
        if (window.nvhFormattingEditor.global.mouseData !== null) {
          let allElements = document.querySelectorAll("*");
          for (element of allElements) {
            element.classList.add("cursor-grabbing");
          }
          window.nvhFormattingEditor.formattingEditorComponent.update();
        }
      },

      /*Taken from dict-edit.riot*/
      onResizeHandleMouseDown(evt, leftContainerClassName, minWidth, maxWidth) {
        this.state.leftContainer.className = leftContainerClassName;
        this.state.leftContainer.minWidth = minWidth;
        this.state.leftContainer.maxWidth = maxWidth;

        this.state.mousePos = evt.x
        document.addEventListener("mouseup", this.onDocumentMouseUp, false)
        document.addEventListener("mousemove", this.resizeColumn, false)
        $("body").css("user-select", "none")
        $(leftContainerClassName).css("transition", "unset")
      },
      onDocumentMouseUp() {
        document.removeEventListener("mousemove", this.resizeColumn, false)
        document.removeEventListener("mouseup", this.onDocumentMouseUp, false)
        this.state.leftContainer.className = null;
        this.state.leftContainer.minWidth = null;
        this.state.leftContainer.maxWidth = null;
        $("body").css("user-select", "")
        $(this.state.leftContainer.className).css("transition", "")
      },
      resizeColumn(evt, leftContainerClassName) {
        const distance = evt.x - this.state.mousePos
        this.state.mousePos = evt.x
        let leftColWidth = $(this.state.leftContainer.className).width()
        let width = Math.min(this.state.leftContainer.maxWidth, Math.max(this.state.leftContainer.minWidth, leftColWidth + distance))
        $(this.state.leftContainer.className).css("width", width + "px")
      },
    }
  </script>

  <style>
    * {
      --color-row:rgb(241, 137, 113);
      --color-column:rgb(121, 195, 245);
      --color-can-be-dropped: rgb(237, 205, 116);
      --color-is-dragged-over: rgb(162, 127, 31);
      --color-is-dragged-over-light: rgb(255, 245, 217);
      --color-yellow-light: rgb(240, 224, 180);;
      --color-is-active: rgb(11, 78, 202);
      --color-is-hovered: rgb(90, 141, 236);
      --color-grey-light: #ebebeb;
      --color-grey-very-light: #f5f5f5;
      --color-grey-normal: #d3d3d3;
      --color-black-normal: #231f20;
      --color-black-dark: #000;
      --color-red-normal: #c62132;
      --color-red-dark: #a61423;
    }


    .scrollable-div {
      position: relative;
      display: flex;
      flex-direction: column;
      min-width: 450px;
      width: fit-content;
      height: 100%;
      overflow: auto;
      min-width: 100%;
      padding: 5px;
    }
    .header-box {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    #trash-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .trash-disabled {
      color: rgb(176, 192, 205);
      cursor: not-allowed;
    }
    .trash-enabled {
      color: black;
    }
    .trash-dragged-over {
      transform: scale(1.1);
      color: red;
    }

    .formatting-page-title {
      text-wrap: nowrap;
    }
    .formatting-page-wrapper-container {
      display: flex;
      height: 700px;
      overflow-x: auto;
    }


    .elements-choice-section {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
    .elements-choice-section-wrapper {
      width: 200px;
      height: 600px;
    }

    .style-section {
      width: inherit;
      display: block;
      height: 100%;
    }
    .style-section-wrapper {
      width: 430px;
      height: 600px;
    }

    .example-section {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
    .example-section-wrapper {
      height: 600px;
    }

    .formatting-page-container {
      padding-right: 1.5em;
      padding-left: 1.5em;
    }
    #editing-container, #example-container {
      border-right: 1px solid #dcdee3;
    }


    .editing-header {
      display: flex;
      align-items: center;
      gap: 10px;
      min-width: 600px;
    }
    .editing-layout-wrapper {
      width: 100%;
      height: 600px;
    }
    .edit-layout {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
    .cursor-grabbing {
      cursor: grabbing !important;
    }

    /*Taken from dict-edit.riot*/
    .resizeHandle{
        cursor: ew-resize;
        width: 5px;
        min-width: 5px;
        min-height: 100%;
        background-color: whitesmoke;
        margin: 0 10px;
    }
    .resizeHandle:hover{
        background-color: #cfcfcf;
    }
  </style>
</dict-config-formatting>