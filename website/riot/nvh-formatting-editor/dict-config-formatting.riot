<dict-config-formatting>
  <h1 class="formatting-page-title">Entry Formatting</h1>
  <div class="formatting-page-visibility-container">
    <div onclick={onLayoutClick.bind(this, "showElements")}
        class="formatting-page-visibility-item {!state.showElements ? "item-inactive" : ""}">
      <i class="small material-icons">sort</i>
    </div>
    <div onclick={onLayoutClick.bind(this, "showStyle")}
        class="formatting-page-visibility-item {!state.showStyle ? "item-inactive" : ""}">
      <i class="small material-icons">format_paint</i>
    </div>
    <div onclick={onLayoutClick.bind(this, "showEditing")}
        class="formatting-page-visibility-item {!state.showEditing ? "item-inactive" : ""}">
      <i class="small material-icons">edit</i>
    </div>
    <div onclick={onLayoutClick.bind(this, "showExample")}
        class="formatting-page-visibility-item {!state.showExample ? "item-inactive" : ""}">
      <i class="small material-icons">view_compact</i>
    </div>
  </div>
  <div class="formatting-page-wrapper-container">
    <div if={state.showElements}
        id="elements-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">sort</i>
        <h2>Elements</h2>
        <div id="trash-icon-wrapper"
            ondragenter={onDragEnter}
            ondragleave={onDragLeave}
            ondragover={onDragOver}
            ondrop={onDrop}>
          <i class="small material-icons trash-disabled" id="trash-icon">delete</i>
        </div>
      </div>
      <div class="elements-choice-section-wrapper">
        <elements-choice-section class="elements-choice-section"
                                parent={this}
                                elementsSchema={elementsSchema}/>
      </div>
    </div>
    <div if={state.showStyle}
        id="style-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">format_paint</i>
        <h2>Style</h2>
      </div>
      <div>TBD</div>
    </div>
    <div if={state.showEditing}
        id="editing-container"
        class="formatting-page-container">
      <div class="editing-header">
        <div class="header-box">
          <i class="small material-icons">edit</i>
          <h2>Editing</h2>
        </div>
        <div onclick={/*TODO: decide if keeping edit mode makes sense*/ () => {}}
            id="toggle-edit-mode"
            class="{state.editing.enabled ? "toggle-edit-mode-active" : "toggle-edit-mode-inactive"}">
          Edit mode
        </div>
        <div if={state.editing.enabled}
            onclick={onEditModeChange.bind(this, "column")}
            class="edit-option-mode {state.editing.mode == "column" ? "edit-option-mode-active" : "edit-option-mode-inactive"}">
          Add Column mode
        </div>
        <div if={state.editing.enabled}
            onclick={onEditModeChange.bind(this, "row")}
            class="edit-option-mode {state.editing.mode == "row" ? "edit-option-mode-active" : "edit-option-mode-inactive"}">
          Add Row mode
        </div>
        <div if={state.editing.enabled && false}
            onclick={onEditModeChange.bind(this, "delete")}
            class="edit-option-mode {state.editing.mode == "delete" ? "edit-option-mode-active" : "edit-option-mode-inactive"}">
          Delete mode
        </div>
        <div id="columns-color">Columns</div>
        <div id="rows-color">Rows</div>
      </div>
      <div class="editing-layout-wrapper">
        <edit-layout class="edit-layout"
                    editing={state.editing}
                    schema={schema}
                    parent={this}
                    global={global}/>
      </div>
    </div>
    <div if={state.showExample} 
        id="example-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">view_compact</i>
        <h2>Example</h2>
      </div>
      <div class="example-section-wrapper">
        <example-section class="example-section"
                        schema={schema}/>
      </div>
    </div>
  </div>
  
  <script>
    export default {
      state: {
        showElements: true,
        showStyle: true,
        showEditing: true,
        showExample: true,
        editing: {
          enabled: true,
          mode: "column" /*types: "column", "row", "delete" */
        },
      },
      global: null,
      schema: {
        orientation: "column", /*orientation of scrollable-div is always "column"*/
        children: [
          {
            status: {
              isActive: false, /*action panel is displayed*/
            },
            orientation: "column", /*default placeholder is of type "column"*/
            type: "placeholder",
            content: {
              name: "",
              area: "",
              color: ""
            },
            contentColor: "",
            children: [],
          }
        ]
      },
      elementsSchema: null,

      onBeforeMount() {
        this.elementsSchema = this.createElementsSchema(Object.entries(window.store.data.config.structure.elements));
        this.global = {
          canBeRemovedIfHovered: true, /*remove only the deepest hovered "placeholder", the other ones should stay as they are*/
          canBeDropped: true, /*drop element only to deepest hovered "placeholder"*/
          canBeDragged: true, /*drag only the deepest hovered "placeholder"*/
          wasDropSuccessful: false,
          canOpenActionPanel: true, /*open only action panel of the deepest hovered "placeholder"*/
          parent: null,
        };
      },
      onBeforeUpdate() {
        this.elementsSchema = this.createElementsSchema(Object.entries(window.store.data.config.structure.elements));
        this.global = {
          canBeRemovedIfHovered: true,
          canBeDropped: true,
          canBeDragged: true,
          wasDropSuccessful: false,
          canOpenActionPanel: true,
          parent: null,
        };
      },

      onDragEnter() {
        let trashIcon = document.getElementById("trash-icon");
        trashIcon.classList.add("trash-dragged-over");
      },
      onDragLeave() {
        let trashIcon = document.getElementById("trash-icon");
        trashIcon.classList.remove("trash-dragged-over");
      },
      onDragOver(event) {
        event.preventDefault();
      },
      onDrop() {
        this.global.wasDropSuccessful = true;
        let trashIcon = document.getElementById("trash-icon");
        trashIcon.classList.remove("trash-dragged-over");
      },

      onLayoutClick(sectionName) {
        this.update({[sectionName]: !this.state[sectionName]});
      },
      onToggleEditing() {
        this.state.editing.enabled = !this.state.editing.enabled;
        this.update();
      },
      onEditModeChange(editModeType) {
        this.state.editing.mode = editModeType;
        this.update();
      },
      /*
      TODO: figure out how to call this only after onMounted is called.
      The problem is that I need to refresh "edit" and "example" section, but "elements"
      section should remain the same.
      */
      createElementsSchema(elements) {
        let stateStructure = [];
        for (let element of elements) {
          let newElement = {
            data: {
              type: "choice-item",
              name: element[1].name,
              fullName: element[0],
              color: window.nvhStore.getElementColor(element[0]),
            }
          }
          stateStructure.push(newElement)
        }
        return stateStructure;
      },
    }
  </script>

  <style>
    * {
      --color-row: #e3401c;
      --color-column: #47a6e6;
      --color-can-be-dropped: rgb(237, 205, 116);
      --color-is-dragged-over: rgb(162, 127, 31);
    }


    .scrollable-div {
      position: relative;
      display: flex;
      flex-direction: column;
      min-width: 450px;
      width: fit-content;
      height: 100%;
      overflow: auto;
      min-width: 100%;
      padding: 5px;
    }
    .icon-svg {
      height: 20px;
      width: 20px;
    }
    .header-box {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    #trash-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .trash-disabled {
      color: rgb(176, 192, 205);
      cursor: not-allowed;
    }
    .trash-enabled {
      color: black;
    }
    .trash-dragged-over {
      transform: scale(1.1);
      color: red;
    }


    .formatting-page-title {
      text-wrap: nowrap;
    }
    .formatting-page-visibility-container {
      display: flex;
    }
    .formatting-page-wrapper-container {
      display: flex;
      height: 700px;
      overflow-x: auto;
    }


    .elements-choice-section {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
    .elements-choice-section-wrapper {
      width: 100%;
      height: 600px;
    }


    .example-section {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
    .example-section-wrapper {
      width: 100%;
      height: 600px;
    }


    .formatting-page-visibility-item {
      padding: 5px;
      background-color: #40e675;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .formatting-page-visibility-item:hover {
      cursor: pointer;
      background-color:rgb(32, 214, 90);
      transform: scale(1.05);
    }
    .formatting-page-visibility-item:active {
      transform: scale(1.1);
    }
    .item-inactive {
      background-color: #d3e8d9;
    }


    .formatting-page-container {
      width: 100%;
    }
    #elements-container {
      border-right: 1px solid #dcdee3;
      padding-right: 1.5em;
      flex: 2 5 auto;
      min-width: 220px
    }
    #style-container {
      border-right: 1px solid #dcdee3;
      padding-left: 1.5em;
      padding-right: 1.5em;
      flex: 1 6 auto;
      min-width: 150px;
    }
    #editing-container {
      border-right: 1px solid #dcdee3;
      padding-left: 1.5em;
      padding-right: 1.5em;
      flex: auto;
      width: auto;
    }
    #example-container {
      border-right: 1px solid #dcdee3;
      padding-left: 1.5em;
      padding-right: 1.5em;
      flex: auto;
      min-width: 450px;
    }


    .editing-header {
      display: flex;
      align-items: center;
      gap: 10px;
      min-width: 450px;
    }
    .editing-layout-wrapper {
      width: 100%;
      height: 600px;
    }
    .edit-layout {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }


    #rows-color {
      background-color: var(--color-row);
    }
    #columns-color {
      background-color: var(--color-column);
    }


    #toggle-edit-mode {
      padding: 5px;
      cursor: pointer;
      text-wrap: nowrap;
    }
    #toggle-edit-mode:hover {
      transform: scale(1.05);
      background-color:rgb(72, 120, 249);
    }
    #toggle-edit-mode:active {
      transform: scale(1.1);
    }
    .toggle-edit-mode-active {
      padding: 5px;
      background-color: rgb(87, 129, 244);
      font-weight: bold;
    }
    .toggle-edit-mode-inactive {
      background-color: rgb(175, 193, 243);;
    }


    .edit-option-mode {
      padding: 5px;
      cursor: pointer;
      text-wrap: nowrap;
    }
    .edit-option-mode:hover {
      transform: scale(1.05);
      background-color:rgb(53, 242, 204);
    }
    .edit-option-mode:active {
      transform: scale(1.1);
    }
    .edit-option-mode-active {
      padding: 5px;
      background-color:rgb(97, 246, 216);
      font-weight: bold;
    }
    .edit-option-mode-inactive {
      background-color: rgb(176, 249, 235);
    }
  </style>
</dict-config-formatting>