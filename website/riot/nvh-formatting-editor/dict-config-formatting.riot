<dict-config-formatting>
   <loading-overlay if={nvhFormattingEditor.isSaving}/>
   <h1 id="formatting-page-title">Entry Formatting</h1>
   <dict-configuration-issues config-id="formatting"/>
   <div id="formatting-fullscreen-wrapper"
         class="white">
      <nvh-formatting-editor-toolbar/>
      <div id="formatting-page-wrapper-container">
         <div if={nvhFormattingEditor.visibleSections.elements}
               id="elements-container"
               class="formatting-page-container">
            <div class="header-box">
               <i class="small material-icons">sort</i>
               <h2>Elements</h2>
            </div>
            <div class="elements-choice-section-wrapper">
               <elements-choice-section/>
            </div>
         </div>

         <div if={nvhFormattingEditor.visibleSections.elements}
               class="resizeHandle"
               onmousedown={onResizeHandleMouseDown.bind(this, ".elements-choice-section-wrapper", 200, 300)}></div>
         <div if={nvhFormattingEditor.visibleSections.editing}
               id="editing-container"
               class="formatting-page-container">
            <div class="editing-header">
               <div class="header-box">
                  <i class="small material-icons">view_compact</i>
                  <h2>Layout</h2>
                  <label if={nvhFormattingEditor.data.activeLayout !== "desktop" && nvhStore.data.formatting.layout}
                        class="checkbox"
                        style="margin-left: 20px;">
                     <input type="checkbox"
                           checked={nvhFormattingEditor.currentLayout.configured}/>
                     <span class="tooltipped"
                           style="padding-left: 25px;"
                           onclick={saveAndToggleLayoutUsage}
                           data-tooltip={nvhFormattingEditor.currentLayout.configured
                              ? "Layout for this device is used.\nWhen viewing the dictionary on this device, current layout will be seen."
                              : "Layout for this device is not used.\nWhen viewing the dictionary on this device,\nthe layout will be inherited from bigger device."}>
                        Use {nvhFormattingEditor.data.activeLayout} layout
                     </span>
                  </label>
               </div>
            </div>
            <div class="editing-layout-wrapper">
               <edit-layout class="edit-layout"/>
            </div>
         </div>

         <div if={nvhFormattingEditor.visibleSections.style}
               id="style-container"
               class="formatting-page-container">
            <div class="header-box">
               <i class="small material-icons">palette</i>
               <h2>Style</h2>
            </div>
            <div class="style-section-wrapper">
               <styles-section class="style-section"/>
            </div>
         </div>

         <div if={nvhFormattingEditor.visibleSections.style} class="resizeHandle"
               onmousedown={onResizeHandleMouseDown.bind(this, ".style-section-wrapper", 200, 600)}></div>

         <div if={nvhFormattingEditor.visibleSections.example}
               id="example-container"
               class="formatting-page-container">
            <div class="header-box">
               <i class="small material-icons">visibility</i>
               <h2 class="mr-2">Preview</h2>
               <div if={!dictData.isEntryListLoaded || dictData.entryList.length}
                     class="entry-dropdown-wrapper">
                  <entry-dropdown on-change={onExampleEntryChanged}/>
                  <i class="small material-icons grey-text">search</i>
               </div>
            </div>
            <div class="example-section-wrapper">
               <example-section class="example-section"/>
            </div>
         </div>
      </div>
   </div>

   <script>
      export default {
         bindings: [["nvhFormattingEditor", "updateEditor", "update"],
                    ["nvhFormattingEditor", "isSavingChanged", "update"]],

         state: {
            mousePos: null,
            leftContainer: {
               className: null,
               minWidth: null,
               maxWidth: null,
            }
         },

         onBeforeMount(props) {
            this.nvhFormattingEditor = window.nvhFormattingEditor
            this.nvhStore = window.nvhStore
            this.nvhFormattingEditor.reset()
            this.nvhFormattingEditor.initLayout()
         },

         onMounted(){
            document.addEventListener("fullscreenchange", this.onFullscreenChanged)
            window.addEventListener('resize', this.onResizeDebounced)
            this.resize()
         },

         onBeforeUnmount(){
            document.removeEventListener("fullscreenchange", this.onFullscreenChanged)
            window.removeEventListener('resize', this.onResizeDebounced)
         },

         onResizeDebounced(){
            this.state.timer && clearTimeout(this.state.timer)
            this.state.timer = setTimeout(() => {
                clearTimeout(this.state.timer)
                this.resize()
            }, 200)
         },

         onFullscreenChanged(evt){
            this.resize()
         },

         resize(){
            let container = document.getElementById("formatting-page-wrapper-container")
            if(container){
               let height
               if(window.document.fullscreenElement){
                  let toolbarHeight = document.querySelector("nvh-formatting-editor-toolbar").clientHeight
                  height = `calc(100vh - ${toolbarHeight}px)`
               } else {
                  let topOffset = container.getBoundingClientRect().top + window.scrollY
                  height = `calc(100vh - ${topOffset}px)`
               }
               container.style.height = height
            }
         },

         onBeforeUpdate(props) {
            let currentLayout = this.nvhFormattingEditor.currentLayout;
            let history = currentLayout.history;
            // TODO track history on user actions
            if (!this.nvhFormattingEditor.draggedElement
                  && !this.nvhFormattingEditor.areSchemasEquals(history.schema.at(history.index), currentLayout.schema)) {
               history.schema.length = history.index + 1;
               history.schema.push(structuredClone(currentLayout.schema));
               history.index += 1;
               //this.nvhFormattingEditor.trigger("updateToolbar");
            }
         },

         onExampleEntryChanged(entry) {
            this.store.changeEntryId(entry.id);
         },

         saveAndToggleLayoutUsage() {
            this.update({isSaving: true});
            let formatting = this.nvhStore.data.formatting;
            let layoutConfig = formatting.layout;
            layoutConfig[this.nvhFormattingEditor.data.activeLayout].configured = !this.nvhFormattingEditor.currentLayout.configured;
            this.store.updateDictionaryConfig("formatting", formatting)
                  .always(() => {
                     this.nvhFormattingEditor.isSaving = false;
                     this.nvhFormattingEditor.currentLayout.configured = layoutConfig[this.nvhFormattingEditor.data.activeLayout].configured;
                     this.update();
                  });
         },

         onResizeHandleMouseDown(leftContainerClassName, minWidth, maxWidth, evt) {
            this.state.leftContainer.className = leftContainerClassName;
            this.state.leftContainer.minWidth = minWidth;
            this.state.leftContainer.maxWidth = maxWidth;

            this.state.mousePos = evt.x
            document.addEventListener("mouseup", this.onDocumentMouseUp, false)
            document.addEventListener("mousemove", this.resizeColumn, false)
            $("body").css("user-select", "none")
            $(leftContainerClassName).css("transition", "unset")
         },

         onDocumentMouseUp() {
            document.removeEventListener("mousemove", this.resizeColumn, false)
            document.removeEventListener("mouseup", this.onDocumentMouseUp, false)
            this.state.leftContainer.className = null;
            this.state.leftContainer.minWidth = null;
            this.state.leftContainer.maxWidth = null;
            $("body").css("user-select", "")
            $(this.state.leftContainer.className).css("transition", "")
         },

         resizeColumn(evt, leftContainerClassName) {
            const distance = evt.x - this.state.mousePos
            this.state.mousePos = evt.x
            let leftColWidth = $(this.state.leftContainer.className).width()
            let width = Math.min(this.state.leftContainer.maxWidth, Math.max(this.state.leftContainer.minWidth, leftColWidth + distance))
            $(this.state.leftContainer.className).css("width", width + "px")
         },
      }
   </script>

   <style type="scss">
      * {
         --color-grey-light: #ebebeb;
         --color-grey-toolbar: #eeeeee;
         --color-grey-normal: #d3d3d3;
         --color-red-normal: #c62132;
         --color-red-dark: #a61423;
      }

      .scrollable-div {
         position: relative;
         display: flex;
         flex-direction: column;
         min-width: 450px;
         width: fit-content;
         height: 100%;
         overflow: auto;
         min-width: 100%;
         padding: 14px;
         margin: -9px; // make space for pulse effect if entry is selected
      }
      .header-box {
         display: flex;
         align-items: center;
         gap: 5px;
      }
      #formatting-page-title {
         text-wrap: nowrap;
      }
      #formatting-page-wrapper-container {
         display: flex;
         overflow-x: auto;
      }
      .elements-choice-section {
         width: fit-content;
         display: block;
         height: 100%;
         min-width: 100%;
      }
      .elements-choice-section-wrapper {
         width: 200px;
         height: 90%;
      }
      .style-section {
         width: inherit;
         display: block;
         height: 100%;
      }
      .style-section-wrapper {
         width: 430px;
         height: 90%;
      }
      .example-section {
         width: fit-content;
         display: block;
         height: 100%;
         min-width: 100%;
      }
      .example-section-wrapper {
         height: 90%;
      }
      .formatting-page-container {
         height: 100%;
         &:not(:first-child){
            padding-left: 1em;
         }
         &:not(:last-child){
            padding-right: 1em;
         }
      }
      #editing-container, #example-container {
         border-right: 1px solid #dcdee3;
      }
      #editing-container {
         flex-grow: 1;
      }
      .editing-header {
         display: flex;
         align-items: center;
         gap: 10px;
         min-width: 600px;
      }
      .editing-layout-wrapper {
         width: 100%;
         height: 90%;
      }
      .edit-layout {
         width: fit-content;
         display: block;
         height: 100%;
         min-width: 100%;
      }
      .cursor-grabbing {
         cursor: grabbing !important;
      }
      .resizeHandle {
         cursor: ew-resize;
         width: 5px;
         min-width: 5px;
         min-height: 100%;
         background-color: whitesmoke;
         margin: 0 10px;
      }
      .resizeHandle:hover {
         background-color: #cfcfcf;
      }
      .entry-dropdown-wrapper {
         display: flex;
         align-items: center;
         gap: 5px;
      }
      input[type="text"] {
         margin: 0;
      }
   </style>
</dict-config-formatting>
