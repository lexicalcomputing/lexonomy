<dict-config-formatting>
  <loading-overlay if={state.isLoading || state.isSaving}/>
  <h1 class="formatting-page-title">Entry Formatting</h1>
  <div class="formatting-page-layout-container">
    <div onclick={onLayoutClick.bind(this, "desktop")}
        class="formatting-page-layout-item {window.nvhFormattingEditor.global.activeLayout !== "desktop" ? "item-inactive" : ""}">
      <i class="small material-icons">desktop_windows</i>
    </div>
    <div onclick={onLayoutClick.bind(this, "tablet")}
        class="formatting-page-layout-item {window.nvhFormattingEditor.global.activeLayout !== "tablet" ? "item-inactive" : ""}">
      <i class="small material-icons">tablet</i>
    </div>
    <div onclick={onLayoutClick.bind(this, "mobile")}
        class="formatting-page-layout-item {window.nvhFormattingEditor.global.activeLayout !== "mobile" ? "item-inactive" : ""}">
      <i class="small material-icons">phone_android</i>
    </div>
    <div onclick={onLayoutClick.bind(this, "pdf")}
        class="formatting-page-layout-item {window.nvhFormattingEditor.global.activeLayout !== "pdf" ? "item-inactive" : ""}">
      <i class="small material-icons">picture_as_pdf</i>
    </div>
  </div>
  <div class="formatting-page-visibility-container">
    <div onclick={onSectionClick.bind(this, "showElements")}
        class="formatting-page-visibility-item {!state.showElements ? "item-inactive" : ""}">
      <i class="small material-icons">sort</i>
    </div>
    <div onclick={onSectionClick.bind(this, "showStyle")}
        class="formatting-page-visibility-item {!state.showStyle ? "item-inactive" : ""}">
      <i class="small material-icons">format_paint</i>
    </div>
    <div onclick={onSectionClick.bind(this, "showEditing")}
        class="formatting-page-visibility-item {!state.showEditing ? "item-inactive" : ""}">
      <i class="small material-icons">edit</i>
    </div>
    <div onclick={onSectionClick.bind(this, "showExample")}
        class="formatting-page-visibility-item {!state.showExample ? "item-inactive" : ""}">
      <i class="small material-icons">view_compact</i>
    </div>
  </div>
  <div class="formatting-page-wrapper-container">
    <div if={state.showElements}
        id="elements-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">sort</i>
        <h2>Elements</h2>
        <div id="trash-icon-wrapper"
            ondragenter={onDragEnter}
            ondragleave={onDragLeave}
            ondragover={onDragOver}
            ondrop={onDrop}>
          <i class="small material-icons trash-disabled" id="trash-icon">delete</i>
        </div>
      </div>
      <div class="elements-choice-section-wrapper">
        <elements-choice-section class="elements-choice-section"
                                elementsSchema={window.nvhFormattingEditor.createElementsSchema()}/>
      </div>
    </div>
    <div if={state.showStyle}
        id="style-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">format_paint</i>
        <h2>Style</h2>
      </div>
      <div class="style-section-wrapper">
        <styles-section />
      </div>
    </div>
    <div if={state.showEditing}
        id="editing-container"
        class="formatting-page-container">
      <div class="editing-header">
        <div class="header-box">
          <i class="small material-icons">edit</i>
          <h2>Editing</h2>
          <div id="buttons-box">
            <div id="undo-icon-wrapper"
                onclick={window.nvhFormattingEditor.undoSchema}>
              UNDO
            </div>
            <div id="redo-icon-wrapper"
                onclick={window.nvhFormattingEditor.redoSchema}>
              REDO
            </div>
            <div id="import-json-wrapper"
                title="Import schema from JSON">
              <input id="import-json-input"
                  type="file"
                  accept=".json"
                  onchange={importSchema}/>
              <label id="import-json-label" for="import-json-input">
                <i class="material-icons">file_download</i>
              </label>
            </div>
            <div id="export-json-wrapper"
                title="Export schema to JSON"
                onclick={onExportJSON}>
              <i class="material-icons">file_upload</i>
            </div>
            <div id="save-button-wrapper"
                onclick={saveSchemas}>
              SAVE
            </div>
            <div style="width: 250px;"></div>
            <div id="reset-icon-wrapper"
                onclick={window.nvhFormattingEditor.resetSchema}>
              RESET
            </div>
          </div>
        </div>
      </div>
      <div class="editing-layout-wrapper">
        <edit-layout class="edit-layout"/>
      </div>
    </div>
    <div if={state.showExample} 
        id="example-container"
        class="formatting-page-container">
      <div class="header-box">
        <i class="small material-icons">view_compact</i>
        <h2>Example</h2>
        <div id="export-pdf"
            title="Export all entries of dictionary to PDF"
            onclick={onExportPDF}>
          Export to PDF
        </div>
      </div>
      <div class="example-section-wrapper">
        <example-section class="example-section"/>
      </div>
    </div>
  </div>
  
  <script>
    export default {
      state: {
        isSaving: false,
        isLoading: true,
        showElements: true,
        showStyle: false,
        showEditing: true,
        showExample: true,
        fileReader: null,
      },

      onBeforeMount() {
        this.state.fileReader = new FileReader();
        this.state.fileReader.onload = function(e) {
          this.setSchemaFromImportedFile(this.state.fileReader.result);
        }.bind(this),
        window.nvhFormattingEditor.formattingEditorComponent = this;
        window.nvhFormattingEditor.global = window.nvhFormattingEditor.initializeGlobalAttributes();
        if (window.nvhFormattingEditor.currentLayout.schema === null) {
          window.nvhFormattingEditor.initializeBlankSchemas();
          window.nvhFormattingEditor.currentLayout = window.nvhFormattingEditor.layout.desktop;
        }
      },
      onMounted() {
        this.store.loadDictionaryConfig("formatting")
          .done(response => {
              if (response.content.layout) {
                window.nvhFormattingEditor.layout = {
                  desktop: {
                    schema: response.content.layout.desktop.schema,
                    schemaHistory: [JSON.parse(JSON.stringify(response.content.layout.desktop.schema))],
                    schemaHistoryIndex: 0,
                  },
                  tablet: {
                    schema: response.content.layout.tablet.schema,
                    schemaHistory: [JSON.parse(JSON.stringify(response.content.layout.tablet.schema))],
                    schemaHistoryIndex: 0,
                  },
                  mobile: {
                    schema: response.content.layout.mobile.schema,
                    schemaHistory: [JSON.parse(JSON.stringify(response.content.layout.mobile.schema))],
                    schemaHistoryIndex: 0,
                  },
                  pdf: {
                    schema: response.content.layout.pdf.schema,
                    schemaHistory: [JSON.parse(JSON.stringify(response.content.layout.pdf.schema))],
                    schemaHistoryIndex: 0,
                  }
                }
              } else {
                window.nvhFormattingEditor.initializeSchemas();
              }
              window.nvhFormattingEditor.currentLayout = window.nvhFormattingEditor.layout.desktop;
          })
          .always(() => {
              this.update({isLoading: false})
          })
      },
      onBeforeUpdate() {
        window.nvhFormattingEditor.global = {
          canBeRemovedIfHovered: true,
          canBeDropped: true,
          canBeDragged: true,
          draggedElementFullName: window.nvhFormattingEditor.global.draggedElementFullName,
          draggedPlaceholder: window.nvhFormattingEditor.global.draggedPlaceholder,
          dropInfo: {
            wasSuccessful: false,
            index: null,
          },
          canOpenActionPanel: true,
          selectedPlaceholderAreaFullName: window.nvhFormattingEditor.global.selectedPlaceholderAreaFullName,
          selectedPlaceholderFullName: window.nvhFormattingEditor.global.selectedPlaceholderFullName,
          selectedPlaceholder: window.nvhFormattingEditor.global.selectedPlaceholder,
          selectedPlaceholderParentAreaFullName: window.nvhFormattingEditor.global.selectedPlaceholderParentAreaFullName,
          parent: null,
          activeLayout: window.nvhFormattingEditor.global.activeLayout,
        };
        /*
        Change history, if I modified edit section in other way that using 'undo' or 'redo'.
        */
        if (this.isSchemaChanged(window.nvhFormattingEditor.currentLayout.schemaHistory.at(window.nvhFormattingEditor.currentLayout.schemaHistoryIndex), window.nvhFormattingEditor.currentLayout.schema)) {
          window.nvhFormattingEditor.currentLayout.schemaHistory.length = window.nvhFormattingEditor.currentLayout.schemaHistoryIndex + 1;
          window.nvhFormattingEditor.currentLayout.schemaHistory.push(JSON.parse(JSON.stringify(window.nvhFormattingEditor.currentLayout.schema)));
          window.nvhFormattingEditor.currentLayout.schemaHistoryIndex += 1;
        }
      },

      onDragEnter() {
        const rawData = event.dataTransfer.getData("text/plain");
        const data = JSON.parse(rawData);
        if (data.type === "elementholder-label") {
          let trashIcon = document.getElementById("trash-icon");
          trashIcon.classList.add("trash-dragged-over");
        }
      },
      onDragLeave() {
        let trashIcon = document.getElementById("trash-icon");
        trashIcon.classList.remove("trash-dragged-over");
      },
      onDragOver(event) {
        event.preventDefault();
      },
      onDrop() {
        window.nvhFormattingEditor.global.dropInfo.wasSuccessful = true;
        window.nvhFormattingEditor.closeActionPanel();
        window.nvhFormattingEditor.global.selectedPlaceholderAreaFullName = "";
        window.nvhFormattingEditor.global.selectedPlaceholderFullName = "";
        window.nvhFormattingEditor.global.selectedPlaceholder = null;
        window.nvhFormattingEditor.global.selectedPlaceholderParentAreaFullName = "";
        let trashIcon = document.getElementById("trash-icon");
        trashIcon.classList.remove("trash-dragged-over");
      },

      onLayoutClick(layoutName) {
        window.nvhFormattingEditor.global.activeLayout = layoutName;
        /*TODO: Is there a way how to simplify this?*/
        switch(layoutName) {
          case "desktop":
            window.nvhFormattingEditor.currentLayout = window.nvhFormattingEditor.layout.desktop;
            window.nvhFormattingEditor.clearStatuses(window.nvhFormattingEditor.currentLayout.schema);
            break;
          case "tablet":
            window.nvhFormattingEditor.currentLayout = window.nvhFormattingEditor.layout.tablet;
            window.nvhFormattingEditor.clearStatuses(window.nvhFormattingEditor.currentLayout.schema);
            break;
          case "mobile":
            window.nvhFormattingEditor.currentLayout = window.nvhFormattingEditor.layout.mobile;
            window.nvhFormattingEditor.clearStatuses(window.nvhFormattingEditor.currentLayout.schema);
            break;
          case "pdf":
            window.nvhFormattingEditor.currentLayout = window.nvhFormattingEditor.layout.pdf;
            window.nvhFormattingEditor.clearStatuses(window.nvhFormattingEditor.currentLayout.schema);
            break;
        }
        this.update();
      },
      onSectionClick(sectionName) {
        this.update({[sectionName]: !this.state[sectionName]});
      },
      isSchemaChanged(oldSchema, newSchema) {
        if (oldSchema.orientation !== newSchema.orientation) {
          return true;
        }
        if (oldSchema.content !== undefined && oldSchema.content !== undefined) {
          if (oldSchema.content.fullName !== newSchema.content.fullName) {
            return true;
          }
          if (oldSchema.content.fullName !== newSchema.content.fullName) {
            return true;
          }
        }
        if (oldSchema.children.length !== newSchema.children.length) {
          return true;
        }

        for (let i = 0; i < newSchema.children.length; i++) {
          if (this.isSchemaChanged(oldSchema.children.at(i), newSchema.children.at(i))) {
            return true;
          }
        }

        return false;
      },
      onExportJSON() {
        /*
        I do not export first "entry" placeholder, because it is default.
        I export only "orientation" and "fullName" of each placeholder because I can derive
        all the attributes from them.
        */
        let exportSchema = {children: []};
        this.createExportedSchema(exportSchema, window.nvhFormattingEditor.currentLayout.schema.children[0]);
        let blobContent = [JSON.stringify(exportSchema)];
        let blob = new Blob(blobContent, { type: "application/json" });
        let schemaURL = URL.createObjectURL(blob);

        const tmpLink = document.createElement("a");
        tmpLink.href = schemaURL;
        tmpLink.download = "schema.json"
        document.body.appendChild(tmpLink)
        tmpLink.click();
        document.body.removeChild(tmpLink)

        URL.revokeObjectURL(schemaURL);
      },
      importSchema(event) {
        let file = event.target.files[0];
        file && this.state.fileReader.readAsText(file, 'UTF-8');
      },
      setSchemaFromImportedFile(importedSchemaString) {
        let importedSchema = JSON.parse(importedSchemaString);
        if (!this.isImportedSchemaValid(importedSchema, "entry")) {
          console.log("Imported schema is not valid");
          return;
        }
        let defaultNewSchema = window.nvhFormattingEditor.createSchema();
        let newSchema = {children: []};
        this.recreateImportedSchema(newSchema, importedSchema, "entry");
        defaultNewSchema.children[0].children = newSchema.children;
        window.nvhFormattingEditor.currentLayout.schema = defaultNewSchema;
        window.nvhFormattingEditor.formattingEditorComponent.update();
      },
      createExportedSchema(exportSchema, editingSchema) {
        for (let child of editingSchema.children) {
          exportSchema.children.push({
            orientation: child.orientation,
            fullName: child.content.fullName,
            children: [],
          });
          this.createExportedSchema(exportSchema.children.at(exportSchema.children.length - 1), child);
        }
      },
      recreateImportedSchema(newSchema, importedSchema, areaFullName) {
        for (let child of importedSchema.children) {
          let newAreaFullName = child.fullName === "" ? areaFullName : child.fullName;
          newSchema.children.push({
            status: {
              isActive: false,
              isHovered: false,
              isDragged: false,
            },
            orientation: child.orientation,
            type: "placeholder",
            content: {
              name: this.getNameFromFullName(child.fullName),
              fullName: child.fullName,
              area: this.getNameFromFullName(newAreaFullName),
              areaFullName: newAreaFullName,
              color: window.nvhStore.getElementColor(child.fullName),
              canHaveChildren: child.fullName !== "" ? window.store.schema.getElementByPath(child.fullName).children.length !== 0 : true,
            },
            children: [],
          });
          this.recreateImportedSchema(newSchema.children.at(newSchema.children.length - 1), child, newAreaFullName);
        }
      },

      getNameFromFullName(fullName) {
        let nameParts = fullName.split(".");
        return nameParts.at(nameParts.length - 1);
      },
      isImportedSchemaValid(importedSchema, areaFullName) {
        for (let child of importedSchema.children) {
          if (child.orientation !== "column" && child.orientation !== "row") {
            // Invalid orientation
            return false;
          }
          if (child.fullName !== "" && !window.nvhFormattingEditor.getChoiceElementsFullNamesList().includes(child.fullName)) {
            // Invalid element
            return false;
          }
          if (child.fullName !== "" && !child.fullName.includes(areaFullName)) {
            // Invalid child
            return false;
          }
          if (child.fullName === areaFullName && child.children.length !== 0) {
            // Nested wrappers of same name
            return false;
          }
          if (child.fullName !== "" && window.store.schema.getElementByPath(child.fullName).children.length === 0 && child.children.length !== 0) {
            // Element has child but it should not have
            return false;
          }
          let newAreaFullName = child.fullName === "" ? areaFullName : child.fullName;
          if (!this.isImportedSchemaValid(child, newAreaFullName)) {
            return false;
          }
        }
        return true;
      },
      async onExportPDF() {
        /*
          Exported PDF file is prepared on backend via pdfkit library
        */
        let stringHTML = await window.nvhFormattingEditor.parseAllEntries();
        let response = await window.nvhFormattingEditor.createPDF(stringHTML);
        const encodedPDFString = response.pdf_string;

        /*
          Convert encoded PDF string to array of bytes, and use it as an input for Blob to generate URL.
          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/fromBase64
        */
        const bytesArrayPDF = Uint8Array.fromBase64(encodedPDFString);
        const blob = new Blob([bytesArrayPDF], { type: 'application/pdf' });
        const blobUrl = URL.createObjectURL(blob);
        
        /*
          Because of asynchronous creating of a PDF file,
          I need to create a temporary <a> element a simulate clicking on it.
          <a> element in html code would not download PDF file.
        */
        const tmpLink = document.createElement("a");
        tmpLink.href = blobUrl;
        tmpLink.download = "entries.pdf"
        document.body.appendChild(tmpLink)
        tmpLink.click();
        document.body.removeChild(tmpLink)

        URL.revokeObjectURL(blobUrl);
      },
      saveSchemas() {
        this.update({isSaving: true});
        let elementsConfig = window.nvhStore.data.formatting.elements;
        let layoutConfig = {
          desktop: {
            schema: window.nvhFormattingEditor.layout.desktop.schema,
          },
          tablet: {
            schema: window.nvhFormattingEditor.layout.tablet.schema,
          },
          mobile: {
            schema: window.nvhFormattingEditor.layout.mobile.schema,
          },
          pdf: {
            schema: window.nvhFormattingEditor.layout.pdf.schema,
          },
        };
        this.store.updateDictionaryConfig("formatting", {
          elements: elementsConfig,
          layout: layoutConfig,
        })
              .always(() => this.update({isSaving: false}));
      }
    }
  </script>

  <style>
    * {
      --color-row:rgb(241, 137, 113);
      --color-column:rgb(121, 195, 245);
      --color-can-be-dropped: rgb(237, 205, 116);
      --color-is-dragged-over: rgb(162, 127, 31);
      --color-is-dragged-over-light: rgb(255, 245, 217);
      --color-is-active: rgb(21, 93, 225);
      --color-is-hovered: rgb(132, 155, 237);
    }


    .scrollable-div {
      position: relative;
      display: flex;
      flex-direction: column;
      min-width: 450px;
      width: fit-content;
      height: 100%;
      overflow: auto;
      min-width: 100%;
      padding: 5px;
    }
    .icon-svg {
      height: 20px;
      width: 20px;
    }
    .header-box {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    #trash-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .trash-disabled {
      color: rgb(176, 192, 205);
      cursor: not-allowed;
    }
    .trash-enabled {
      color: black;
    }
    .trash-dragged-over {
      transform: scale(1.1);
      color: red;
    }

    #buttons-box {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 5px;
      padding: 2px;
      background-color: rgb(240, 247, 246)
    }

    #reset-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid black;
      padding: 2px 4px;
      background-color: rgb(232, 108, 102);
    }
    #reset-icon-wrapper:hover {
      transform: scale(1.05);
      background-color: rgb(240, 94, 87);
      cursor: pointer;
    }
    #reset-icon-wrapper:active {
      transform: scale(1.1);
    }

    #undo-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid black;
      padding: 2px 4px;
      background-color: rgb(166, 227, 240);
    }
    #undo-icon-wrapper:hover {
      transform: scale(1.05);
      background-color: rgb(147, 219, 235);
      cursor: pointer;
    }
    #undo-icon-wrapper:active {
      transform: scale(1.1);
    }

    #redo-icon-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid black;
      padding: 2px 4px;
      background-color: rgb(166, 240, 202);
    }
    #redo-icon-wrapper:hover {
      transform: scale(1.05);
      background-color: rgb(146, 235, 189);
      cursor: pointer;
    }
    #redo-icon-wrapper:active {
      transform: scale(1.1);
    }

    #import-json-input {
      display: none;
    }
    #import-json-label {
      color: black;
      cursor: pointer;
      height: 24px;
    }

    #export-pdf {
      margin-left: 10px;
    }

    #export-json-wrapper, #import-json-wrapper, #export-pdf, #save-button-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px solid black;
      padding: 2px 4px;
      background-color: rgb(188, 223, 219);
    }

    #export-json-wrapper:hover, #import-json-wrapper:hover, #export-pdf:hover, #save-button-wrapper:hover {
      transform: scale(1.05);
      background-color: rgb(174, 203, 199);
      cursor: pointer;
    }
    #export-json-wrapper:active, #import-json-wrapper:active, #export-pdf:active, #save-button-wrapper:active {
      transform: scale(1.1);
    }


    .formatting-page-title {
      text-wrap: nowrap;
    }
    .formatting-page-visibility-container, .formatting-page-layout-container {
      display: flex;
    }
    .formatting-page-wrapper-container {
      display: flex;
      height: 700px;
      overflow-x: auto;
    }


    .elements-choice-section {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
    .elements-choice-section-wrapper {
      width: 100%;
      height: 600px;
    }


    .example-section {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
    .example-section-wrapper {
      height: 600px;
    }

    .formatting-page-layout-item, .formatting-page-visibility-item {
      padding: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .formatting-page-layout-item:hover, .formatting-page-visibility-item:hover {
      cursor: pointer;
      transform: scale(1.05);
    }
    .formatting-page-layout-item:active, .formatting-page-visibility-item:active {
      transform: scale(1.1);
    }
    .formatting-page-layout-item {
      background-color:rgb(230, 147, 64);
    }
    .formatting-page-layout-item:hover {
      background-color:rgb(214, 153, 32);
    }
    .formatting-page-visibility-item {
      background-color:rgb(64, 230, 117);
    }
    .formatting-page-visibility-item:hover {
      background-color:rgb(32, 214, 90);
    }

    .item-inactive {
      background-color:rgb(211, 232, 217);
    }


    .formatting-page-container {
      width: 100%;
    }
    #elements-container {
      border-right: 1px solid #dcdee3;
      padding-right: 1.5em;
      width: 220px;
      min-width: 220px;
    }
    #style-container {
      border-right: 1px solid #dcdee3;
      padding-left: 1.5em;
      padding-right: 1.5em;
      width: 430px;
      min-width: 430px;
    }
    #editing-container {
      border-right: 1px solid #dcdee3;
      padding-left: 1.5em;
      padding-right: 1.5em;
      flex: auto;
      width: auto;
    }
    #example-container {
      border-right: 1px solid #dcdee3;
      padding-left: 1.5em;
      padding-right: 1.5em;
      width: auto;
    }


    .editing-header {
      display: flex;
      align-items: center;
      gap: 10px;
      min-width: 600px;
    }
    .editing-layout-wrapper {
      width: 100%;
      height: 600px;
    }
    .edit-layout {
      width: fit-content;
      display: block;
      height: 100%;
      min-width: 100%;
    }
  </style>
</dict-config-formatting>