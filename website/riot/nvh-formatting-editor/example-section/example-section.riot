<example-section class="example-section">
   <div class="scrollable-div-layout scrollable-div-layout-{nvhFormattingEditor.data.activeLayout}">
      <div if={!nvhStore.data.entry}>Preview is loading ...</div>
      <entry-styled-element if={nvhStore.data.entry}
            schema={nvhFormattingEditor.currentLayout.schema}
            element={nvhStore.data.entry}/>
   </div>

   <script>
      export default {
         bindings: [["store", "entryChanged", "update"],
                    ["nvhFormattingEditor", "selectedLayoutContainerChange", "update"]],

         async getEntry() {
            // TOOD use entires loaded by default
            let entriesList = await this.store.loadEntryList();
            if (!entriesList || entriesList.entries.length === 0) {
               return null;
            }
            this.store.changeEntryId(entriesList.entries[0].id);
            return await this.store.loadEntry();
         },

         onBeforeMount(props) {
            this.nvhFormattingEditor = window.nvhFormattingEditor;
            this.store = window.store;
            this.nvhStore = window.nvhStore;
            // TODO move to the formatting editor
            this.getEntry()
                  .then(this.update.bind(this))
         }
      }
   </script>

   <style type="scss">
      :host{
         width: fit-content;
         height: 100%;
         overflow-y: auto;
      }
      .scrollable-div-layout {
         display: flex;
         flex-wrap: wrap;
         flex-direction: column;
         width: 80vw !important;
         height: 100%;
         padding: 15px; //for pulsing shadow of active element to be visible
         overflow-y: auto;
      }
      .scrollable-div-layout-tablet {
         width: 1024px !important;
      }
      .scrollable-div-layout-pdf {
         width: 980px !important;
         font-family: sans-serif;
      }
      .scrollable-div-layout-mobile {
         width: 768px !important;
      }
      .entry-styled-element {
         cursor: pointer;
      }
   </style>
</example-section>
