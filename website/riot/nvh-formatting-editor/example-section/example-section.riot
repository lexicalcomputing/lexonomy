<example-section>
  <div class="example-section-container">
    <div class="scrollable-div-layout scrollable-div-layout-{nvhFormattingEditor.data.activeLayout}">
      <div if={state.exampleEntry === undefined}>Preview is loading ...</div>
      <div if={state.exampleEntry === null}>Preview can not be loaded, you do not have any entries in your dictionary, or the browser logged you out.</div>
      <example-section-item if={state.exampleEntry}
        each={child in nvhFormattingEditor.currentLayout.schema.children}
        onclick={() => onExampleSectionItemClick(child)}
        onmouseenter={(event) => onExampleItemMouseEnter(event, child)}
        onmouseleave={(event) => onExampleItemMouseLeave(event, child)}
        schema={child}
        entry={state.exampleEntry}
        class="example-section-item"
        isFormatting={true}
        bulletIndex={1}
        maxPossibleWidth={nvhFormattingEditor.getMaxPossibleWidth()}/>
    <div>
  </div>

  <script>
    export default {
      state: {
        exampleEntry: undefined
      },
      nvhFormattingEditor: null,
      store: null,
      nvhStore: null,

      async getEntry() {
        let entriesList = await this.store.loadEntryList();
        if (!entriesList || entriesList.entries.length === 0) {
          return null;
        }
        this.store.changeEntryId(entriesList.entries[0].id);
        return await this.store.loadEntry();
      },

      onBeforeMount(props) {
        this.nvhFormattingEditor = window.nvhFormattingEditor;
        this.store = window.store;
        this.nvhStore = window.nvhStore;

        this.getEntry().then(res => {
          if (!res) {
            this.state.exampleEntry = null;
          } else if (!this.nvhStore.data || !this.nvhStore.data.entry) {
            this.state.exampleEntry = null;
          } else {
            this.state.exampleEntry = this.nvhStore.data.entry;
          }
          this.update();
        });
      },

      onExampleSectionItemClick(state) {
        this.nvhFormattingEditor.selectPlaceholder(state, null);
        this.nvhFormattingEditor.updateEditor();
      },
      onExampleItemMouseEnter(event, state) {
        if (!nvhFormattingEditor.data.mouseData) {
          event.currentTarget.classList.add("placeholder-mouse-hover");
          this.nvhFormattingEditor.data.hoveredPlaceholder = state;
          this.nvhFormattingEditor.updateEditor();
        }
      },
      onExampleItemMouseLeave(event, state) {
        if (!nvhFormattingEditor.data.mouseData) {
          event.currentTarget.classList.remove("placeholder-mouse-hover");
          this.nvhFormattingEditor.data.hoveredPlaceholder = null;
          this.nvhFormattingEditor.updateEditor();
        }
      },
    }
  </script>

  <style>
    .example-section-container {
      width: fit-content;
      height: 100%;
    }

    .scrollable-div-layout {
      display: flex;
      flex-wrap: wrap;
      flex-direction: column;
      width: 80vw !important;
      height: 100%;
      padding: 5px;
      overflow-y: auto;
    }

    .scrollable-div-layout-tablet {
      width: 1020px !important;
    }
    .scrollable-div-layout-pdf {
      width: 980px !important;
      font-family: sans-serif;
    }
    .scrollable-div-layout-mobile {
      width: 440px !important;
    }

    .example-section-item {
      cursor: pointer;
    }
  </style>
</example-section>