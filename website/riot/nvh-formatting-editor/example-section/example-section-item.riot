<example-section-item>
  <div class="element-holder element-holder-{props.schema.orientation} {isDisplayLabel() ? "element-holder-single-wrapper" : ""}
              {props.schema.status.isActive && (hasChildWithContent(props.schema) || isDisplayLabel()) ? "element-holder-active" : ""}
              {props.schema.status.isHovered && (hasChildWithContent(props.schema) || isDisplayLabel()) ? "element-holder-hovered" : ""}">
    <div if={props.schema.children.length === 0}
        class="element-holder-content-wrapper">
      <div if={props.schema.content.fullName === props.entry.fullName}
          class="element-holder-content
          {props.schema.content.fullName !== "" ? getCssStyleClass(props.schema.content.fullName) : ""}">
        {props.entry.value}
      </div>
    </div>
    <div each={childSchema in props.schema.children}
        class="element-holder element-holder-{childSchema.orientation}">
      <example-section-item if={childSchema.content.name === "" /*empty placeholder*/}
                            schema={childSchema}
                            entry={props.entry}/>
      <example-section-item if={props.schema.content.area === childSchema.content.area
                                && childSchema.content.name !== "" /*render parent label*/}
                            schema={childSchema}
                            entry={props.entry}/>
      <template if={props.schema.content.area !== childSchema.content.area
                    && childSchema.content.name !== ""}
                each={childEntry in this.getEntryChildren(props.entry, [])}>
        <example-section-item if={childSchema.content.fullName === childEntry.fullName}
                              schema={childSchema}
                              entry={childEntry}/>
      </template>
    </div>
  </div>

  <script>
    export default {
      hasChildWithContent(state) {
        for (let child of state.children) {
          if (child.content.name !== "" && child.children.length === 0) {
            return true;
          }
          if (this.hasChildWithContent(child)) {
            return true;
          }
        }
        return false;
      },
      isDisplayLabel() {
        return this.props.schema.children.length === 0 && this.props.schema.content.name !== "";
      },
      /*This allows displaying non-direct children*/
      getEntryChildren(entry, resultChildren) {
        for (let child of entry.children) {
          this.getEntryChildren(child, resultChildren);
          resultChildren.push(child);
        }
        return resultChildren;
      },
      getCssStyleClass(fullName) {
        /* NOTE: Inspiration from: nvh-editor-view-item.riot */
        let styles = window.nvhStore.getElementStyle(fullName);
        let result_classes = "";
        for (let i = 0; i < Object.keys(styles).length; i++) {
          let option = Object.keys(styles)[i];
          let value = styles[option];
          if (value === null || value === undefined) {
            continue;
          }
          result_classes += "example_section_item_" + option + "_" + value + " ";
        }
        return result_classes;
      }
    }
  </script>

  <style>
    .element-holder {
      display: flex;
      width: fit-content;
    }
    .element-holder-single-wrapper {
      border: 1px solid rgb(187, 196, 196);
      margin: 2px;
      padding: 1px;
    }
    .element-holder-column {
      flex-direction: column;
    }
    .element-holder-hovered {
      border: 2px solid var(--color-is-hovered);
    }
    .element-holder-hovered:has(.element-holder-hovered) {
      border: none;
    }
    .element-holder-active {
      border: 2px solid var(--color-is-active) !important;
    }

    .example_section_item_colour_red {
      color: red;
    }
    .example_section_item_colour_green {
      color: green;
    }
    .example_section_item_colour_blue {
      color: blue;
    }
    .example_section_item_colour_grey {
      color: grey;
    }

    .example_section_item_weight_bold {
      font-weight: bold;
    }

    .example_section_item_textsize_1 {
      font-size: 0.8em;
    }
    .example_section_item_textsize_2 {
      font-size: 1em;
    }
    .example_section_item_textsize_3 {
      font-size: 1.2em;
    }
    .example_section_item_textsize_4 {
      font-size: 1.5em;
    }
    .example_section_item_textsize_5 {
      font-size: 2em;
    }
    .example_section_item_textsize_6 {
      font-size: 2.5em;
    }

    .example_section_item_slant_italic {
      font-style: italic;
    }

    .example_section_item_border_solid {
      border: 1px solid black;
    }
    .example_section_item_border_thick {
      border: 2px solid black;
    }
    .example_section_item_border_dotted {
      border: 1px dotted black;
    }

    .example_section_item_borderRadius_small {
      border-radius: 5px;
    }
    .example_section_item_borderRadius_medium {
      border-radius: 10px;
    }
    .example_section_item_borderRadius_large {
      border-radius: 15px;
    }

    .example_section_item_background_yellow {
      background-color: yellow;
    }
    .example_section_item_background_blue {
      background-color: blue;
    }
    .example_section_item_background_grey {
      background-color: grey;
    }

  </style>
</example-section-item>