<example-section-item>
  <div class="element-holder element-holder-{props.schema.orientation} {isDisplayLabel() ? "element-holder-single-wrapper" : ""}
              {props.schema.status.isActive && (hasChildWithContent(props.schema) || isDisplayLabel()) ? "element-holder-active" : ""}
              {props.schema.status.isHovered && (hasChildWithContent(props.schema) || isDisplayLabel()) ? "element-holder-hovered" : ""}">
    <div if={props.schema.children.length === 0}
        class="element-holder-content-wrapper">
      <div if={props.schema.content.fullName === props.entry.fullName}
          class="element-holder-content">
        {props.entry.value}
      </div>
    </div>
    <div each={childSchema in props.schema.children}
        class="element-holder element-holder-{childSchema.orientation}">
      <example-section-item if={childSchema.content.name === "" /*empty placeholder*/}
                            schema={childSchema}
                            entry={props.entry}/>
      <example-section-item if={props.schema.content.area === childSchema.content.area
                                && childSchema.content.name !== "" /*render parent label*/}
                            schema={childSchema}
                            entry={props.entry}/>
      <template if={props.schema.content.area !== childSchema.content.area
                    && childSchema.content.name !== ""}
                each={childEntry in props.entry.children}>
        <example-section-item if={childSchema.content.fullName === childEntry.fullName}
                              schema={childSchema}
                              entry={childEntry}/>
      </template>
    </div>
  </div>

  <script>
    export default {
      hasChildWithContent(state) {
        for (let child of state.children) {
          if (child.content.name !== "") {
            return true;
          }
          this.hasChildWithContent(child);
        }
        return false;
      },
      isDisplayLabel() {
        return this.props.schema.children.length === 0 && this.props.schema.content.name  !== "";
      }
    }
  </script>

  <style>
    .element-holder {
      display: flex;
      width: fit-content;
    }
    .element-holder-single-wrapper {
      border: 1px solid rgb(187, 196, 196);
      margin: 1px;
      padding: 1px;
    }
    .element-holder-column {
      flex-direction: column;
    }
    .element-holder-hovered {
      border: 2px solid var(--color-is-hovered);
    }
    .element-holder-hovered:has(.element-holder-hovered) {
      border: none;
    }
    .element-holder-active {
      border: 2px solid var(--color-is-active) !important;
    }
  </style>
</example-section-item>