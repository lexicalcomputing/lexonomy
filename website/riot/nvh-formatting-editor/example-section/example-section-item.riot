<example-section-item>
  <div class="element-holder element-holder-{props.schema.orientation}
              {hasBullet() ? "element-holder-has-bullet" : ""}
              {props.schema.status.isActive && (hasChildWithContent(props.schema) || isDisplayLabel()) ? "element-holder-active" : ""}
              {props.schema.status.isHovered && (hasChildWithContent(props.schema) || isDisplayLabel()) ? "element-holder-hovered" : ""}
              {props.schema.status.isHovered && !hasChildWithContent(props.schema) && !isDisplayLabel() ? "element-holder-hovered-empty" : ""}"
        style={props.schema.children.length !== 0 ? nvhFormattingEditor.getCssStyles(state, props.schema.styles) : ""}>
    <pre if={hasBullet()}
        style={nvhFormattingEditor.getCssStyles(state, props.schema.bulletStyles)}>
      {state.bulletValue}
    </pre>
    <pre if={this.labelStyles && isLabelBeforeValue()}
        class="example-item-label-before"
        style={nvhFormattingEditor.getCssStyles(state, props.schema.labelStyles)}>
      {props.schema.labelStyles["label-text-value"]} a-a
    </pre>
    <div if={!props.schema.children.length && props.schema.content.fullName === props.entry.path}
        class="element-holder-content-wrapper">
      <div class="element-holder-content-block">
        <example-basic-item if={props.entry.value && ["int", "string", "list", "empty"].includes(state.type) && !state.valueStylePairs}
          value={state.value}
          styles={props.schema.styles}
          labelStyles={props.schema.labelStyles}
          state={state}
        />
        <example-markup-item if={props.entry.value && ["int", "string", "list", "empty"].includes(state.type) && state.valueStylePairs}
          valueStylePairs={state.valueStylePairs}
          labelStyles={props.schema.labelStyles}
          state={state}
        />
        <example-url-item if={props.entry.value && state.type === "url"}
          value={state.value}
          styles={props.schema.styles}
          labelStyles={props.schema.labelStyles}
          state={state}
        />
        <example-bool-item if={props.entry.value && state.type === "bool"}
          value={state.value}
          styles={props.schema.styles}
          labelStyles={props.schema.labelStyles}
          state={state}
        />
        <example-image-item if={props.entry.value && state.type === "image"}
          value={state.value}
          styles={props.schema.styles}
          labelStyles={props.schema.labelStyles}
          state={state}
        />
        <example-audio-item if={props.entry.value && state.type === "audio"}
          value={state.value}
          styles={props.schema.styles}
          labelStyles={props.schema.labelStyles}
          state={state}
        />
        <example-video-item if={props.entry.value && state.type === "video"}
          value={state.value}
          styles={props.schema.styles}
          labelStyles={props.schema.labelStyles}
          state={state}
        />
      </div>
    </div>
    <div each={childSchema in props.schema.children}
        class="element-holder-list element-holder-list-{childSchema.orientation}">
      <example-section-item if={!childSchema.content.name /*empty placeholder*/}
                            onclick={() => onExampleItemClick(childSchema, props.schema)}
                            onmouseenter={(event) => onExampleItemMouseEnter(event, childSchema)}
                            onmouseleave={(event) => onExampleItemMouseLeave(event, childSchema)}
                            class="{props.isFormatting ? "example-section-item" : ""}"
                            schema={childSchema}
                            entry={props.entry}
                            isFormatting={props.isFormatting}
                            bulletIndex={props.bulletIndex}
                            haveSiblings={props.haveSiblings}
                            maxPossibleWidth={getDecreaseMaxPossibleWidth()}/>
      <example-section-item if={props.schema.content.area === childSchema.content.area
                                && childSchema.content.name /*render parent label*/}
                            onclick={() => onExampleItemClick(childSchema, props.schema)}
                            onmouseenter={(event) => onExampleItemMouseEnter(event, childSchema)}
                            onmouseleave={(event) => onExampleItemMouseLeave(event, childSchema)}
                            class="{props.isFormatting ? "example-section-item" : ""}"
                            schema={childSchema}
                            entry={props.entry}
                            isFormatting={props.isFormatting}
                            bulletIndex={props.bulletIndex}
                            haveSiblings={props.haveSiblings}
                            maxPossibleWidth={getDecreaseMaxPossibleWidth()}/>
      <template each={(childEntry, index) in nvhFormattingEditor.getValidEntryChildren(props.entry, [], childSchema.content.fullName)}
                if={props.schema.content.area !== childSchema.content.area
                    && childSchema.content.name}>
        <example-section-item onclick={() => onExampleItemClick(childSchema, props.schema)}
                                onmouseenter={(event) => onExampleItemMouseEnter(event, childSchema)}
                                onmouseleave={(event) => onExampleItemMouseLeave(event, childSchema)}
                                class="{props.isFormatting ? "example-section-item" : ""}"
                                schema={childSchema}
                                entry={childEntry}
                                isFormatting={props.isFormatting}
                                bulletIndex={index + 1}
                                haveSiblings={nvhFormattingEditor.getValidEntryChildren(props.entry, [], childSchema.content.fullName).length !== 1}
                                maxPossibleWidth={getDecreaseMaxPossibleWidth()}/>
      </template>
    </div>
    <pre if={this.labelStyles && isLabelAfterValue()} class="example-item-label-after"
        class="example-item-label-before"
        style={nvhFormattingEditor.getCssStyles(state, props.schema.labelStyles)}>
      {props.schema.labelStyles["label-text-value"]}
    </pre>
  </div>

  <script>
    export default {
      state: {
        type: null,
        value: null,
        bulletValue: null,
        valueStylePairs: null,
        maxPossibleWidth: null,
        labelStyles: null,
      },
      nvhFormattingEditor: null,
      nvhStore: null,

      onBeforeMount(props) {
        this.nvhFormattingEditor = window.nvhFormattingEditor;
        this.nvhStore = window.nvhStore;
        props.schema["labelStyles"] = props?.schema?.labelStyles || {};
        props.schema["bulletStyles"] = props?.schema?.bulletStyles || {};
        this.state.maxPossibleWidth = props.maxPossibleWidth;
        this.labelStyles = props.schema.labelStyles;
        this.formatBulletValue();
        this.state.maxPossibleWidth = props.maxPossibleWidth;
        let fullName = props.schema.content.fullName;
        if (!fullName) {
          return;
        }
        this.formatValue(fullName);
      },
      onBeforeUpdate(props) {
        props.schema["labelStyles"] = props?.schema?.labelStyles || {};
        props.schema["bulletStyles"] = props?.schema?.bulletStyles || {};
        this.state.maxPossibleWidth = props.maxPossibleWidth;
        this.labelStyles = props.schema.labelStyles;
        this.formatBulletValue();
        this.state.maxPossibleWidth = props.maxPossibleWidth;
        let fullName = props.schema.content.fullName;
        if (!fullName) {
          return;
        }
        this.formatValue(fullName);
      },

      onExampleItemMouseEnter(event, state) {
        if (!this.props.isFormatting) {
          return;
        }
        if (!nvhFormattingEditor.data.mouseData) {
          event.currentTarget.classList.add("placeholder-mouse-hover");
          state.status.isHovered = true;
          nvhFormattingEditor.formattingEditorComponent.update();
        }
      },
      onExampleItemMouseLeave(event, state) {
        if (!this.props.isFormatting) {
          return;
        }
        if (!nvhFormattingEditor.data.mouseData) {
          event.currentTarget.classList.remove("placeholder-mouse-hover");
          state.status.isHovered = false;
          nvhFormattingEditor.formattingEditorComponent.update();
        }
      },
      onExampleItemClick(state, parentState) {
        if (this.props.isFormatting) {
          nvhFormattingEditor.selectPlaceholder(state, parentState)
        }
      },

      hasChildWithContent(state) {
        for (let child of state.children) {
          if (child.content.name && !child.children.length) {
            return true;
          }
          if (this.hasChildWithContent(child)) {
            return true;
          }
        }
        return false;
      },
      isDisplayLabel() {
        return !this.props.schema.children.length && this.props.schema.content.name;
      },
      formatValue(fullName) {
        let config = this.nvhStore.getElementConfig(fullName);
        if (!config) {
          return;
        }
        this.state.type = config.type;
        let leftPunc = this.getPunc("leftPunc", this.props.schema.styles);
        let rightPunc = this.getPunc("rightPunc", this.props.schema.styles);

        let markupValueStylesPair = null;
        let valueStylesPair = null;
        let markupChildren = nvhFormattingEditor.getDirectMarkupChildren(fullName);
        if (markupChildren.length) { /*means that has markup children*/
          markupValueStylesPair = this.getMarkupValueStylePair();
          valueStylesPair = this.getValueStylePair(this.props.entry.value, markupValueStylesPair, this.props.schema.styles);
          this.state.valueStylePairs = valueStylesPair;
        } else if (this.state.type === "empty") {
          this.state.value = this.props.schema.styles["text-value"];
        } else {
          let value = this.props.entry.value;
          this.state.value = leftPunc + value + rightPunc;
        }
      },
      formatBulletValue() {
        let leftPunc = this.getPunc("leftPunc", this.props.schema.bulletStyles);
        let rightPunc = this.getPunc("rightPunc", this.props.schema.bulletStyles);
        if (this.props.schema.bulletStyles["bullet-use-numbers"]) {
          if (this.props.bulletIndex) {
            this.state.bulletValue = leftPunc + this.props.bulletIndex + rightPunc;
          } else {
            this.state.bulletValue = "";
          }
        } else if (this.props.schema.bulletStyles["bullet-use-bullets"]) {
          if (this.props.schema.bulletStyles["bullet-set-bullet"]) {
            this.state.bulletValue = leftPunc + this.props.schema.bulletStyles["bullet-set-bullet"] + rightPunc;
          } else {
            this.state.bulletValue = "";
          }
        } else {
          this.state.bulletValue = "";
        }
      },
      createValueObject(prefix, markup, suffix) {
        return {
          prefix: prefix,
          markup: markup,
          suffix: suffix,
        };
      },
      getValueStylePair(value, markupValueStylePair, styles) {
        /*Filter used markup style elements and sort them based on occurence index*/
        let markupValueStylePairSorted = markupValueStylePair.filter(markup => value.indexOf(markup.value) !== -1).sort((a, b) => {
          return value.indexOf(a.value) - value.indexOf(b.value);
        });
        let leftPunc = this.getPunc("leftPunc", styles);
        let rightPunc = this.getPunc("rightPunc", styles);
        let result = [];
        for (let child of markupValueStylePairSorted) {
          let splittedValue = value.split(child.value);
          if (splittedValue[0]) {
            let normalObject = {
              value: result.length === 0 ? leftPunc + splittedValue[0] : splittedValue[0], /*prepend left punc only before first normalObject*/
              styles: styles,
            };
            result.push(normalObject);
          }
          if (child.value) {
            let leftMarkupPunc = this.getPunc("leftPunc", child.styles);
            let rightMarkupPunc = this.getPunc("rightPunc", child.styles);
            let markupObject = {
              value: leftMarkupPunc + child.value + rightMarkupPunc,
              styles: child.styles,
            };
            result.push(markupObject);
          }
          value = splittedValue.slice(1).join(child.value);
        }
        let normalObject = {
          value: value ? value + rightPunc : rightPunc,
          styles: styles,
        };
        result.push(normalObject);
        return result;
      },
      getMarkupValueStylePair() {
        let result = [];
        let object;
        for (let child of this.props.entry.children) {
          if (nvhFormattingEditor.isMarkupType(child.path)) {
            object = {
              value: child.value,
              styles: this.getStyleToFullName(child.path),
            };
            result.push(object);
          }
        }
        return result;
      },
      getStyleToFullName(fullName) {
        if (!Array.isArray(this.props.schema.markupStyles)) {
          console.log("this.props.schema.markupStyles is not iterable, this.props.schema.markupStyles = '", this.props.schema.markupStyles, "'.");
          return {};
        }
        for (let child of this.props.schema.markupStyles) {
          if (child.fullName === fullName) {
            return child.styles;
          }
        }
      },
      formatMarkup(value, schema, leftPunc, rightPunc) {
        let leftMarkupPunc = this.getPunc("leftPunc", schema.markupStyles);
        let rightMarkupPunc = this.getPunc("rightPunc", schema.markupStyles);

        if (!schema.markupValue) {
          return this.createValueObject(leftPunc + value + rightPunc, "", "");
        }

        let markupValue = schema.markupValue.value;
        let values = value.split(markupValue);
        let prefix = values[0];

        if (!markupValue) {
          return this.createValueObject(leftPunc + value + rightPunc, "", "");
        } else if (values.length > 1) {
          let suffix = values.slice(1).join(markupValue);
          return this.createValueObject(leftPunc + prefix, leftMarkupPunc + markupValue + rightMarkupPunc, suffix + rightPunc);
        } else { /*markupChildValue is not present in markupValue*/
          return this.createValueObject(leftPunc + prefix + rightPunc, "", "");
        }
      },
      getPunc(option, styles) {
        if (!styles) {
          return "";
        }
        let punc = styles[option];
        if (!punc) {
          return "";
        }
        switch (punc) {
          case "roundBrackets":
            return option === "leftPunc" ? "(" : ")";
          case "squareBrackets":
            return option === "leftPunc" ? "[" : "]";
          case "curlyBrackets":
            return option === "leftPunc" ? "{" : "}";
          case "colon":
            return option === "leftPunc" ? ":" : ":";
          case "comma":
            return option === "leftPunc" ? "," : ",";
          case "dot":
            return option === "leftPunc" ? "." : ".";
          case "semicolon":
            return option === "leftPunc" ? ";" : ";";
          default:
            return punc;
        }
      },
      getDecreaseMaxPossibleWidth() {
        /*Width needs to be reduced by 2 * 3px of margin at each nested level*/
        let widthReduction = 6;
        if (this.props.schema.orientation === "row") {
          widthReduction = 6 * this.props.schema.children.length;
        }
        return (parseInt(this.state.maxPossibleWidth) - widthReduction).toString() + "px";
      },
      isLabelBeforeValue() {
        return this.labelStyles["label-text-value"]
            && (this.labelStyles["show-label-before"] === undefined
                || this.labelStyles["show-label-before"])
            && this.props.schema.children.length;
      },
      isLabelAfterValue() {
        return this.labelStyles["label-text-value"]
            && this.labelStyles["show-label-before"] === false
            && this.props.schema.children.length;
      },
      hasBullet() {
        return (this.props.schema.bulletStyles["bullet-use-numbers"] || this.props.schema.bulletStyles["bullet-use-bullets"])
            && (this.props.haveSiblings || this.props.schema.bulletStyles["bullet-use-with-single-item"])
      }
    }
  </script>

  <style>
    pre {
      margin: 0;
      font-family: "Roboto Condensed", sans-serif;
    }
    .element-holder {
      display: flex;
      flex-wrap: wrap;
      width: fit-content;
      align-items: baseline;
      line-height: 1;
      margin: 3px;
    }
    .element-holder-has-bullet {
      flex-wrap: nowrap;
    }
    .element-holder-list {
      display: flex;
      flex-wrap: wrap;
      width: fit-content;
      align-items: baseline;
      line-height: 1;
    }
    .element-holder-list-column {
      flex-direction: column;
    }
    .element-holder-content-block {
      display: flex;
      align-items: baseline;
      line-height: 1;
    }
    .element-holder-column {
      flex-direction: column;
    }
    .element-holder-hovered {
      outline: 2px solid var(--color-is-hovered);
    }
    .element-holder-hovered:has(.element-holder-hovered) {
      outline: none;
    }
    .element-holder-hovered:has(.element-holder-hovered-empty) {
      outline: none;
    }
    .element-holder-hovered:has( > .element-holder-list > .element-holder-hovered-empty-entry) {
      outline: none;
    }
    .element-holder-active {
      outline: 2px solid var(--color-is-active) !important;
    }
    .element-holder-content-hovered {
      outline: 2px solid var(--color-is-hovered);
    }
    .element-holder-content-active {
      outline: 2px solid var(--color-is-active) !important;
    }

    .example-item-label-vertical {
      width: fit-content;
      text-wrap: nowrap;
    }
    .example-item-label-before {
      margin-right: 5px !important;
      width: fit-content;
      text-wrap: nowrap;
    }
    .example-item-label-after {
      margin-left: 5px !important;
      width: fit-content;
      text-wrap: nowrap;
    }
  </style>
</example-section-item>