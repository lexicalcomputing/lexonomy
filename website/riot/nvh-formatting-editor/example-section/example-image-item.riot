<example-image-item>
  <div class="example-image-item-wrapper">
    <div if={state.labelTextValue !== "" && state.showLabelBefore} class="example-item-label-vertical"
        style={props.getCssStyles(props.labelStyles)}>
      {state.labelTextValue}
    </div>
    <img id="example-image-item-image" if={state.showImage && !state.makeImageClickable} src={props.value} style={props.getCssStyles(this.props.styles)}/>
    <a if={state.showImage && state.makeImageClickable} href={props.value}>
      <img src={props.value} style={props.getCssStyles(this.props.styles)}/>
    </a>
    <div class="example-image-item-icons">
      <a if={state.showUrl && !state.showUrlAsIcon} href={props.value}>{props.value}</a>
      <a if={state.showUrl && state.showUrlAsIcon} href={props.value}>
        <div>{nvhFormattingEditor.getIcon(this.state.iconItem)}</div>
      </a>
      <a if={state.showUrl && state.showUrlAsIcon} href={props.value}>
        <div>{nvhFormattingEditor.getUnicodeIcon(this.state.unicodeIcon)}</div>
      </a>
    </div>
    <div if={state.labelTextValue !== "" && !state.showLabelBefore} class="example-item-label-vertical"
        style={props.getCssStyles(props.labelStyles)}>
      {state.labelTextValue}
    </div>
  </div>

  <script>
    export default {
      state: {
        showImage: null,
        showUrl: null,
        makeImageClickable: null,
        showUrlAsIcon: null,
        iconItem: null,
        unicodeIcon: null,
        labelTextValue: null,
        showLabelBefore: null,
      },
      nvhFormattingEditor: null,

      onBeforeMount() {
        this.nvhFormattingEditor = window.nvhFormattingEditor;
        this.setDefaultCss();
        this.state = {
          showImage: this.props.styles["show-image"] === undefined ? true : this.props.styles["show-image"],
          showUrl: this.props.styles["show-url"] === undefined ? true : this.props.styles["show-url"],
          makeImageClickable: this.props.styles["make-image-clickable"],
          showUrlAsIcon: this.props.styles["show-url-as-icon"],
          iconItem: this.props.styles["icon-item"],
          unicodeIcon: this.props.styles["unicode-icon"],
          labelTextValue: this.props.labelStyles === undefined || this.props.labelStyles["label-text-value"] === undefined ? "" : this.props.labelStyles["label-text-value"],
          showLabelBefore: this.props.labelStyles === undefined || this.props.labelStyles["show-label-before"] === undefined ? true : this.props.labelStyles["show-label-before"],
        };
      },
      onBeforeUpdate() {
        this.state = {
          showImage: this.props.styles["show-image"] === undefined ? true : this.props.styles["show-image"],
          showUrl: this.props.styles["show-url"] === undefined ? true : this.props.styles["show-url"],
          makeImageClickable: this.props.styles["make-image-clickable"],
          showUrlAsIcon: this.props.styles["show-url-as-icon"],
          iconItem: this.props.styles["icon-item"],
          unicodeIcon: this.props.styles["unicode-icon"],
          labelTextValue: this.props.labelStyles === undefined || this.props.labelStyles["label-text-value"] === undefined ? "" : this.props.labelStyles["label-text-value"],
          showLabelBefore: this.props.labelStyles === undefined || this.props.labelStyles["show-label-before"] === undefined ? true : this.props.labelStyles["show-label-before"],
        }
      },

      setDefaultCss() {
        if (this.props.styles["margin"] === undefined) {
          this.props.styles["margin"] = "20";
        }
        if (this.props.styles["border-radius"] === undefined) {
          this.props.styles["border-radius"] = "50";
        }
      },
    }
  </script>

  <style>
    .example-image-item-wrapper {
      display: flex;
      flex-direction: column;
    }
    .example-image-item-icons {
      display: flex;
      align-items: center;
    }
  </style>
</example-image-item>