<example-url-item>
  <div class="example-url-item-wrapper">
    <div class="example-url-item-url" style={props.getCssStyles(props.styles)}>
      <div if={state.labelTextValue !== "" && state.showLabelBefore} class="example-item-label-before"
          style={props.getCssStyles(props.labelStyles)}>
        {state.labelTextValue}
      </div>
      <a if={state.showUrl && state.showIcon} href={props.value} target={this.state.openUrlNewTab ? "_blank" : "_self"}>
        <div>{window.nvhFormattingEditor.getIcon(this.state.iconItem)}</div>
      </a>
      <a if={state.showUrl && state.showIcon} href={props.value} target={this.state.openUrlNewTab ? "_blank" : "_self"}>
        <div>{window.nvhFormattingEditor.getUnicodeIcon(this.state.unicodeIcon)}</div>
      </a>
      <a if={state.showUrl} title={state.textAsUrlTooltip ? state.textReplacementForUrl : ""} href={props.value} target={this.state.openUrlNewTab ? "_blank" : "_self"}>{state.replaceUrlWithText && !state.textAsUrlTooltip ? state.textReplacementForUrl : props.value}</a>
      <div if={state.labelTextValue !== "" && !state.showLabelBefore} class="example-item-label-after"
          style={props.getCssStyles(props.labelStyles)}>
        {state.labelTextValue}
      </div>
    </div>
  </div>
  
  <script>
    export default {
      state: {
        showUrl: null,
        replaceUrlWithText: null,
        textReplacementForUrl: null,
        textAsUrlTooltip: null,
        showIcon: null,
        iconItem: null,
        unicodeIcon: null,
        openUrlNewTab: null,
        labelTextValue: null,
        showLabelBefore: null,
      },

      onBeforeMount() {
        this.state = {
          showUrl: this.props.styles["show-url"] === undefined ? true : this.props.styles["show-url"],
          replaceUrlWithText: this.props.styles["replace-url-with-text"],
          textReplacementForUrl: this.props.styles["text-replacement-for-url"],
          textAsUrlTooltip: this.props.styles["text-as-url-tooltip"],
          showIcon: this.props.styles["show-icon"],
          iconItem: this.props.styles["icon-item"],
          unicodeIcon: this.props.styles["unicode-icon"],
          openUrlNewTab: this.props.styles["open-url-new-tab"],
          labelTextValue: this.props.labelStyles === undefined || this.props.labelStyles["label-text-value"] === undefined ? "" : this.props.labelStyles["label-text-value"],
          showLabelBefore: this.props.labelStyles === undefined || this.props.labelStyles["show-label-before"] === undefined ? false : this.props.labelStyles["show-label-before"],
        }
      },

      onBeforeUpdate() {
        this.state = {
          showUrl: this.props.styles["show-url"] === undefined ? true : this.props.styles["show-url"],
          replaceUrlWithText: this.props.styles["replace-url-with-text"],
          textReplacementForUrl: this.props.styles["text-replacement-for-url"],
          textAsUrlTooltip: this.props.styles["text-as-url-tooltip"],
          showIcon: this.props.styles["show-icon"],
          iconItem: this.props.styles["icon-item"],
          unicodeIcon: this.props.styles["unicode-icon"],
          openUrlNewTab: this.props.styles["open-url-new-tab"],
          labelTextValue: this.props.labelStyles === undefined || this.props.labelStyles["label-text-value"] === undefined ? "" : this.props.labelStyles["label-text-value"],
          showLabelBefore: this.props.labelStyles === undefined || this.props.labelStyles["show-label-before"] === undefined ? false : this.props.labelStyles["show-label-before"],
        }
      }
    }
  </script>
  
  <style>
    .example-url-item-wrapper {
      display: flex;
      flex-direction: column;
    }
    .example-url-item-url {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
    }
  </style>

</example-url-item>