<example-url-item>
  <div class="example-url-item-wrapper">
    <div class="example-url-item-url" style={nvhFormattingEditor.getCssStyles(props.state, props.styles)}>
      <pre if={state.labelTextValue !== "" && state.showLabelBefore} class="example-item-label-before"
          style={nvhFormattingEditor.getCssStyles(props.state, props.labelStyles)}>
        {state.labelTextValue}
      </pre>
      <a if={state.showUrl && state.showIcon} href={props.value} target={state.openUrlNewTab ? "_blank" : "_self"}>
        <pre>{window.nvhFormattingEditor.getIcon(state.iconItem)}</pre>
      </a>
      <a if={state.showUrl && state.showIcon} href={props.value} target={state.openUrlNewTab ? "_blank" : "_self"}>
        <pre>{window.nvhFormattingEditor.getUnicodeIcon(state.unicodeIcon)}</pre>
      </a>
      <a if={state.showUrl} class="tooltipped" data-tooltip={state.textAsUrlTooltip ? state.textReplacementForUrl : ""} href={props.value} target={this.state.openUrlNewTab ? "_blank" : "_self"}>{state.replaceUrlWithText && !state.textAsUrlTooltip ? state.textReplacementForUrl : props.value}</a>
      <pre if={state.labelTextValue !== "" && !state.showLabelBefore} class="example-item-label-after"
          style={nvhFormattingEditor.getCssStyles(props.state, props.labelStyles)}>
        {state.labelTextValue}
      </pre>
    </div>
  </div>
  
  <script>
    export default {
      state: {
        showUrl: null,
        replaceUrlWithText: null,
        textReplacementForUrl: null,
        textAsUrlTooltip: null,
        showIcon: null,
        iconItem: null,
        unicodeIcon: null,
        openUrlNewTab: null,
        labelTextValue: null,
        showLabelBefore: null,
      },
      nvhFormattingEditor: null,

      onBeforeMount(props) {
        this.nvhFormattingEditor = window.nvhFormattingEditor;
        this.state = {
          showUrl: props.styles["show-url"] === undefined ? true : props.styles["show-url"],
          replaceUrlWithText: props.styles["replace-url-with-text"],
          textReplacementForUrl: props.styles["text-replacement-for-url"],
          textAsUrlTooltip: props.styles["text-as-url-tooltip"],
          showIcon: props.styles["show-icon"],
          iconItem: props.styles["icon-item"],
          unicodeIcon: props.styles["unicode-icon"],
          openUrlNewTab: props.styles["open-url-new-tab"],
          labelTextValue: props.labelStyles === undefined || props.labelStyles["label-text-value"] === undefined ? "" : props.labelStyles["label-text-value"],
          showLabelBefore: props.labelStyles === undefined || props.labelStyles["show-label-before"] === undefined ? true : props.labelStyles["show-label-before"],
        };
      },

      onBeforeUpdate(props) {
        this.state = {
          showUrl: props.styles["show-url"] === undefined ? true : props.styles["show-url"],
          replaceUrlWithText: props.styles["replace-url-with-text"],
          textReplacementForUrl: props.styles["text-replacement-for-url"],
          textAsUrlTooltip: props.styles["text-as-url-tooltip"],
          showIcon: props.styles["show-icon"],
          iconItem: props.styles["icon-item"],
          unicodeIcon: props.styles["unicode-icon"],
          openUrlNewTab: props.styles["open-url-new-tab"],
          labelTextValue: props.labelStyles === undefined || props.labelStyles["label-text-value"] === undefined ? "" : props.labelStyles["label-text-value"],
          showLabelBefore: props.labelStyles === undefined || props.labelStyles["show-label-before"] === undefined ? true : props.labelStyles["show-label-before"],
        }
      }
    }
  </script>
  
  <style>
    .example-url-item-wrapper {
      display: flex;
      flex-direction: column;
    }
    .example-url-item-url {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
    }
  </style>

</example-url-item>