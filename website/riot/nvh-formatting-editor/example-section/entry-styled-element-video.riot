<entry-styled-element-video class="entry-styled-element-video">
   <div class="entry-styled-element-label-vertical">
      <slot name="left-label"/>
   </div>
   <template if={state.elementStyles["show-player"]}>
      <video if={!isYouTube()}
            controls
            src={props.rawValue}
            style={nvhFormattingEditor.getMediaMaxSizesRules(state.elementStyles)}>
      </video>
      <iframe if={isYouTube()}
            width="560"
            height="315"
            src="https://www.youtube-nocookie.com/embed/{getYouTubeVideoId()}?wmode=transparent&enablejsapi=1&rel=0&controls=0"
            frameborder="0"
            allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen
            style={nvhFormattingEditor.getMediaMaxSizesRules(state.elementStyles)}>
      </iframe>
   </template>
   <div if={state.elementStyles['show-url']}
         class="displayFlex alignCenter">
      <a href={props.rawValue}
            target="{state.elementStyles["open-url-new-tab"] ? '_blank' : '_self'}">
         <span if={state.elementStyles["set-url-label"]}
               class="noWrap">
            {state.elementStyles["url-label"]}
         </span>
         <template if={!state.elementStyles["set-url-label"]}>
            {props.value}
         </template>
      </a>
   </div>
   <div class="entry-styled-element-label-vertical">
      <slot name="right-label"/>
   </div>

   <script>
      export default {
         onBeforeMount() {
            this.nvhFormattingEditor = window.nvhFormattingEditor
            this.refreshState()
         },

         onBeforeUpdate() {
            this.refreshState()
         },

         refreshState() {
            this.state.elementStyles = this.nvhFormattingEditor.getStyles(this.props.schema, "element")
         },

         isYouTube(){
            return !!this.getYouTubeVideoId()
         },

         getYouTubeVideoId(){
            let match = this.props.rawValue.match(/(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?v=([^&]+)/)
            return match ? match[1] : null
         }
      }
   </script>

   <style type="scss">
      :host {
         display: flex;
         flex-direction: column;
      }
   </style>
</entry-styled-element-video>
