<entry-styled-element-url class="entry-styled-element-url">
   <div class="entry-styled-element-url-url">
      <slot name="left-label"/>
      <a if={(state.elementStyles["show-url"] ?? true) && state.elementStyles["show-icon"]}
            href={props.value}
            class="link-no-decoration"
            target={state.openUrlNewTab ? "_blank" : "_self"}>
         <pre>{window.nvhFormattingEditor.getIcon(state.elementStyles["icon-item"])}</pre>
      </a>
      <a if={(state.elementStyles["show-url"] ?? true) && state.elementStyles["show-icon"]}
            href={props.value}
            class="link-no-decoration"
            target={state.openUrlNewTab ? "_blank" : "_self"}>
         <pre>{window.nvhFormattingEditor.getUnicodeIcon(state.elementStyles["unicode-icon"])}</pre>
      </a>
      <a if={(state.elementStyles["show-url"] ?? true)}
            class="tooltipped"
            data-tooltip={state.elementStyles["text-as-url-tooltip"] ? state.elementStyles["text-replacement-for-url"] : ""}
            href={props.value}
            target={state.elementStyles["open-url-new-tab"] ? "_blank" : "_self"}>
         {state.elementStyles["replace-url-with-text"] && !state.elementStyles["text-as-url-tooltip"] ? state.elementStyles["text-replacement-for-url"] : props.value}</a>
      <slot name="right-label"/>
   </div>

   <script>
      export default {
         onBeforeMount() {
            this.nvhFormattingEditor = window.nvhFormattingEditor
            this.refreshState()
         },

         onBeforeUpdate() {
            this.refreshState()
         },

         refreshState() {
            this.state.elementStyles = this.nvhFormattingEditor.getStyles(this.props.schema, "element")
         }
      }
   </script>

   <style type="scss">
      :host {
         display: flex;
         flex-direction: column;
      }
      .entry-styled-element-url-url {
         display: flex;
         flex-wrap: wrap;
         align-items: center;
      }
   </style>
</entry-styled-element-url>
