<example-video-item>
  <div class="example-video-item-wrapper">
    <pre if={state.labelTextValue !== "" && state.showLabelBefore} class="example-item-label-vertical"
        style={props.getCssStyles(props.labelStyles)}>
      {state.labelTextValue}
    </pre>
    <!-- Taken from nvh-item-media.riot -->
    <video if={state.showPlayer && !isYouTube()}
          controls
          src={props.value}
          style={props.getCssStyles(props.styles)}>
    </video>
    <iframe if={state.showPlayer && isYouTube()}
          style={props.getCssStyles(props.styles)}
          width="560"
          height="315"
          src="https://www.youtube-nocookie.com/embed/{getYouTubeVideoId()}?wmode=transparent&enablejsapi=1&rel=0&controls=0"
          frameborder="0"
          allow="accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen></iframe>
    <div class="example-video-item-url">
      <a if={state.showUrl && state.showIcon} href={props.value}>
        <pre>{window.nvhFormattingEditor.getIcon(state.iconItem)}</pre>
      </a>
      <a if={state.showUrl && state.showIcon} href={props.value}>
        <pre>{window.nvhFormattingEditor.getUnicodeIcon(state.unicodeIcon)}</pre>
      </a>
      <a if={state.showUrl} class="tooltipped" data-tooltip={state.textAsUrlTooltip ? state.textReplacementForUrl : ""} href={props.value}>{state.replaceUrlWithText && !state.textAsUrlTooltip ? state.textReplacementForUrl : props.value}</a>
    </div>
    <pre if={state.labelTextValue !== "" && !state.showLabelBefore} class="example-item-label-vertical"
        style={props.getCssStyles(props.labelStyles)}>
      {state.labelTextValue}
    </pre>
  </div>

  <script>
    export default {
      state: {
        showPlayer: null,
        showUrl: null,
        replaceUrlWithText: null,
        textReplacementForUrl: null,
        textAsUrlTooltip: null,
        showIcon: null,
        iconItem: null,
        unicodeIcon: null,
        labelTextValue: null,
        showLabelBefore: null,
      },
      nvhFormattingEditor: null,

      onBeforeMount(props) {
        this.nvhFormattingEditor = window.nvhFormattingEditor;
        if (props.styles["margin"] === undefined) {
          props.styles["margin"] = "20";
        }
        this.state = {
          showPlayer: props.styles["show-player"],
          showUrl: props.styles["show-url"] === undefined ? true : props.styles["show-url"],
          replaceUrlWithText: props.styles["replace-url-with-text"],
          textReplacementForUrl: props.styles["text-replacement-for-url"],
          textAsUrlTooltip: props.styles["text-as-url-tooltip"],
          showIcon: props.styles["show-icon"],
          iconItem: props.styles["icon-item"],
          unicodeIcon: props.styles["unicode-icon"],
          labelTextValue: props.labelStyles === undefined || props.labelStyles["label-text-value"] === undefined ? "" : props.labelStyles["label-text-value"],
          showLabelBefore: props.labelStyles === undefined || props.labelStyles["show-label-before"] === undefined ? true : props.labelStyles["show-label-before"],
        };
      },

      onBeforeUpdate(props) {
        if (props.styles["margin"] === undefined) {
          props.styles["margin"] = "20";
        }
        this.state = {
          showPlayer: props.styles["show-player"],
          showUrl: props.styles["show-url"] === undefined ? true : props.styles["show-url"],
          replaceUrlWithText: props.styles["replace-url-with-text"],
          textReplacementForUrl: props.styles["text-replacement-for-url"],
          textAsUrlTooltip: props.styles["text-as-url-tooltip"],
          showIcon: props.styles["show-icon"],
          iconItem: props.styles["icon-item"],
          unicodeIcon: props.styles["unicode-icon"],
          labelTextValue: props.labelStyles === undefined || props.labelStyles["label-text-value"] === undefined ? "" : props.labelStyles["label-text-value"],
          showLabelBefore: props.labelStyles === undefined || props.labelStyles["show-label-before"] === undefined ? true : props.labelStyles["show-label-before"],
        };
      },

      /*Taken from nvh-item-media.riot*/
      isYouTube(){
        return !!this.getYouTubeVideoId()
      },
      getYouTubeVideoId(){
        let match = this.props.value.match(/(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?v=([^&]+)/)
        return match ? match[1] : null
      }
    }
  </script>

  <style>
    .example-video-item-wrapper {
      display: flex;
      flex-direction: column;
    }
    .example-video-item-url {
      display: flex;
      align-items: center;
    }
  </style>
</example-video-item>