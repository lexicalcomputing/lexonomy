<styles-section-item>
  <div class="styles-section-item-wrapper">
    <div class="label">Text color:</div>
    <div class="value-wrapper">
      <input type="color" value={getStyleOptionValue("color")} style="border: none; padding: 0; height: 25px; width: 25px; cursor: pointer;" onchange={onChangeStyle.bind(this, "color", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Text size:</div>
    <div class="value-wrapper">
      <div class="value-item value-item-textsize-1"
          onclick={onChangeStyle.bind(this, "font-size", "0.8em")}
          style={getStyleOptionValue("font-size") === "0.8em" ? `background-color:var(--color-grey-normal);` : ""}>
          1
      </div>
      <div class="value-item value-item-textsize-2"
          onclick={onChangeStyle.bind(this, "font-size", "1em")}
          style={getStyleOptionValue("font-size") === "1em" || getStyleOptionValue("font-size") === null ? `background-color:var(--color-grey-normal);` : ""}>
          2
      </div>
      <div class="value-item value-item-textsize-3"
          onclick={onChangeStyle.bind(this, "font-size", "1.2em")}
          style={getStyleOptionValue("font-size") === "1.2em" ? `background-color:var(--color-grey-normal);` : ""}>
          3
      </div>
      <div class="value-item value-item-textsize-4"
          onclick={onChangeStyle.bind(this, "font-size", "1.5em")}
          style={getStyleOptionValue("font-size") === "1.5em" ? `background-color:var(--color-grey-normal);` : ""}>
          4
      </div>
      <div class="value-item value-item-textsize-5"
          onclick={onChangeStyle.bind(this, "font-size", "2em")}
          style={getStyleOptionValue("font-size") === "2em" ? `background-color:var(--color-grey-normal);` : ""}>
          5
      </div>
      <div class="value-item value-item-textsize-6"
          onclick={onChangeStyle.bind(this, "font-size", "2.5em")}
          style={getStyleOptionValue("font-size") === "2.5em" ? `background-color:var(--color-grey-normal);` : ""}>
          6
      </div>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Text weight:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "font-weight", "")}
          style={getStyleOptionValue("font-weight") === "" || getStyleOptionValue("font-weight") === null ? `background-color:var(--color-grey-normal);` : ""}>
          a
      </div>
      <div class="value-item value-item-weight-bold"
          onclick={onChangeStyle.bind(this, "font-weight", "bold")}
          style={getStyleOptionValue("font-weight") === "bold" ? `background-color:var(--color-grey-normal);` : ""}>
          a
      </div>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Text slant:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "font-style", "")}
          style={getStyleOptionValue("font-style") === "" || getStyleOptionValue("font-style") === null ? `background-color:var(--color-grey-normal);` : ""}>
          a
      </div>
      <div class="value-item value-item-slant-italic"
          onclick={onChangeStyle.bind(this, "font-style", "italic")}
          style={getStyleOptionValue("font-style") === "italic" ? `background-color:var(--color-grey-normal);` : ""}>
          a
      </div>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Text decoration:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "text-decoration", "")}
          style={getStyleOptionValue("text-decoration") === "" || getStyleOptionValue("text-decoration") === null ? `background-color:var(--color-grey-normal);` : ""}>
          a
      </div>
      <div class="value-item value-item-text-decoration-underline"
          onclick={onChangeStyle.bind(this, "text-decoration", "underline")}
          style={getStyleOptionValue("text-decoration") === "underline" ? `background-color:var(--color-grey-normal);` : ""}>
          a
      </div>
      <div class="value-item value-item-text-decoration-strikethrough"
          onclick={onChangeStyle.bind(this, "text-decoration", "line-through")}
          style={getStyleOptionValue("text-decoration") === "line-through" ? `background-color:var(--color-grey-normal);` : ""}>
          a
      </div>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Border:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "border", "")}
          style={getStyleOptionValue("border") === "" || getStyleOptionValue("border") === null ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="material-icons tiny">block</i>
      </div>
      <div class="value-item value-item-border-solid"
          onclick={onChangeStyle.bind(this, "border", "1px solid black")}
          style={getStyleOptionValue("border") === "1px solid black" ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
      <div class="value-item value-item-border-thick"
          onclick={onChangeStyle.bind(this, "border", "2px solid black")}
          style={getStyleOptionValue("border") === "2px solid black" ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
      <div class="value-item value-item-border-dotted"
          onclick={onChangeStyle.bind(this, "border", "2px dotted black")}
          style={getStyleOptionValue("border") === "2px dotted black" ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Outline:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "outline", "")}
          style={getStyleOptionValue("outline") === "" || getStyleOptionValue("outline") === null ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="material-icons tiny">block</i>
      </div>
      <div class="value-item value-item-border-solid"
          onclick={onChangeStyle.bind(this, "outline", "1px solid black")}
          style={getStyleOptionValue("outline") === "1px solid black" ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
      <div class="value-item value-item-border-thick"
          onclick={onChangeStyle.bind(this, "outline", "2px solid black")}
          style={getStyleOptionValue("outline") === "2px solid black" ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
      <div class="value-item value-item-border-dotted"
          onclick={onChangeStyle.bind(this, "outline", "2px dotted black")}
          style={getStyleOptionValue("outline") === "2px dotted black" ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Border radius:</div>
    <div class="value-wrapper">
      <input type="range" value={getStyleOptionValue("border-radius") === null ? 0 : getStyleOptionValue("outline")} min="0" max="20" step="1" style="margin:0;" onchange={onChangeStyle.bind(this, "border-radius", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Margin:</div>
    <div class="value-wrapper">
      <input type="range" value={getStyleOptionValue("margin") === null ? 0 : getStyleOptionValue("margin")} min="0" max="20" step="1" style="margin:0;" onchange={onChangeStyle.bind(this, "margin", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Padding:</div>
    <div class="value-wrapper">
      <input type="range" value={getStyleOptionValue("padding") === null ? 0 : getStyleOptionValue("padding")} min="0" max="20" step="1" style="margin:0;" onchange={onChangeStyle.bind(this, "padding", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Box shadow:</div>
    <div class="value-wrapper">
      <input type="range" value={getStyleOptionValue("box-shadow") === null ? 0 : getStyleOptionValue("box-shadow")} min="0" max="20" step="1" style="margin:0;" onchange={onChangeStyle.bind(this, "box-shadow", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Background:</div>
    <div class="value-wrapper">
      <input type="color" value={getStyleOptionValue("background-color")} style="border: none; padding: 0; height: 25px; width: 25px; cursor: pointer;" onchange={onChangeStyle.bind(this, "background-color", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Left punctuation:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "")}
          style={getStyleOptionValue("leftPunc") === "" || getStyleOptionValue("leftPunc") === null ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="material-icons tiny">block</i>
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "roundBrackets")}
          style={getStyleOptionValue("leftPunc") === "roundBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &lpar;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "squareBrackets")}
          style={getStyleOptionValue("leftPunc") === "squareBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &lsqb;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "curlyBrackets")}
          style={getStyleOptionValue("leftPunc") === "curlyBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &lcub;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "colon")}
          style={getStyleOptionValue("leftPunc") === "colon" ? `background-color:var(--color-grey-normal);` : ""}>
          &colon;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "comma")}
          style={getStyleOptionValue("leftPunc") === "comma" ? `background-color:var(--color-grey-normal);` : ""}>
          &comma;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "dot")}
          style={getStyleOptionValue("leftPunc") === "dot" ? `background-color:var(--color-grey-normal);` : ""}>
          &period;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "semicolon")}
          style={getStyleOptionValue("leftPunc") === "semicolon" ? `background-color:var(--color-grey-normal);` : ""}>
          &semi;
      </div>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Right punctuation:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "")}
          style={getStyleOptionValue("rightPunc") === "" || getStyleOptionValue("rightPunc") === null ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="material-icons tiny">block</i>
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "roundBrackets")}
          style={getStyleOptionValue("rightPunc") === "roundBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &rpar;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "squareBrackets")}
          style={getStyleOptionValue("rightPunc") === "squareBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &rsqb;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "curlyBrackets")}
          style={getStyleOptionValue("rightPunc") === "curlyBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &rcub;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "colon")}
          style={getStyleOptionValue("rightPunc") === "colon" ? `background-color:var(--color-grey-normal);` : ""}>
          &colon;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "comma")}
          style={getStyleOptionValue("rightPunc") === "comma" ? `background-color:var(--color-grey-normal);` : ""}>
          &comma;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "dot")}
          style={getStyleOptionValue("rightPunc") === "dot" ? `background-color:var(--color-grey-normal);` : ""}>
          &period;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "semicolon")}
          style={getStyleOptionValue("rightPunc") === "semicolon" ? `background-color:var(--color-grey-normal);` : ""}>
          &semi;
      </div>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Indentation and bulleting:</div>
    <div>
      <div id="select-indentation-bulleting">
        <div onclick={onSelectOpen} class="select-dropdown">
          <div>{state.selectedOption}</div>
          <i class="material-icons tiny">arrow_drop_down</i>
        </div>
        <div if={state.indentationBulletingOpened} class="select-dropdown-options">
          <template each={key in Object.keys(state.options)}>
            <div onclick={onSelectChange.bind(this, state.options[key])}
                class="select-dropdown-option">
              {state.options[key]}
            </div>
          </template>
        </div>
      </div>
    </div>
  </div>

  <script>
    export default {
      state: {
        indentationBulletingOpened: false,
        /*Inspiration from element-style-options.riot*/
        options: {
          "": "None",
          "disk": "Round bullet",
          "square": "Square bullet",
          "diamond": "Diamond bullet",
          "arrow": "Arrow bullet",
          "indent": "Indent",
          "hanging": "Hanging indent",
          "sensenum1": "Sense number 1, 2, 3...",
          "sensenum2": "Sense number a, b, c...",
          "sensenum3": "Sense number i, ii, iii...",
          "sensenum0": "Sense number I, II, III...",
        },
        selectedOption: "None",
      },

      onBeforeMount() {
        if (window.nvhFormattingEditor.currentLayout.schema.children[0].children.length === 0) {
          window.nvhFormattingEditor.global.selectedPlaceholderFullName = "entry";
        }
      },
      onBeforeUpdate() {
        if (window.nvhFormattingEditor.currentLayout.schema.children[0].children.length === 0) {
          window.nvhFormattingEditor.global.selectedPlaceholderFullName = "entry";
        }
        if (window.nvhFormattingEditor.global.selectedPlaceholderFullName === "") {
          this.state.indentationBulletingOpened = "";
          this.state.selectedOption = "None";
        }
      },

      getStyleOptionValue(option) {
        if (window.nvhFormattingEditor.global.selectedPlaceholder === null) {
          return null;
        }
        if (window.nvhFormattingEditor.global.selectedPlaceholder.styles === undefined) {
          return null;
        }
        return window.nvhFormattingEditor.global.selectedPlaceholder.styles[option];
      },
      onChangeStyle(option, value, event) {
        if (value === null) {
          value = event.target.value;
        }
        this.onChangeStyle2(option, value);
      },
      onChangeStyle2(option, value) {
        /* If selected placeholder is wrapper, then selectedPlaceholderFullName = "" */
        /*TODO: selectedPlaceholderFullName should not be "" even for wrappers in the future*/
        // let fullName = window.nvhFormattingEditor.global.selectedPlaceholderFullName;

        let selectedPlaceholder = window.nvhFormattingEditor.global.selectedPlaceholder;
        if (selectedPlaceholder === null) {
          console.log("There is no selected placeholder");
          return;
        }
        if (selectedPlaceholder.styles === undefined) {
          selectedPlaceholder.styles = {};
        }
        selectedPlaceholder.styles[option] = value;
        window.nvhFormattingEditor.formattingEditorComponent.update();
      },
      onSelectChange(value) {
        this.state.indentationBulletingOpened = !this.state.indentationBulletingOpened;
        this.state.selectedOption = value;
        this.update();
      },
      onSelectOpen() {
        if (window.nvhFormattingEditor.global.selectedPlaceholderFullName === "") {
          return;
        }
        this.state.indentationBulletingOpened = !this.state.indentationBulletingOpened;
        this.update();
      },
    }
  </script>

  <style>
    .styles-section-item-wrapper {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
    }

    .value-wrapper {
      display: flex;
      flex-direction: row;
      gap: 2px;
    }

    .value-item {
      height: 25px;
      width: 25px;
      border: 1px solid black;
      display: flex;
      align-items: center;
      justify-content: center
    }
    .value-item:hover {
      cursor: pointer;
      transform: scale(1.05);
    }

    #select-indentation-bulleting {
      display: block;
      width: 180px;
      height: 25px;
      font-weight: bold;
      border: 1px solid black;
    }
    #select-indentation-bulleting:hover {
      cursor: pointer;
    }
    .select-dropdown {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 5px;
    }
    .select-dropdown-options {
      height: 120px;
      padding: 5px;
      overflow-y: scroll;
      border: 1px solid black;
    }
    .select-dropdown-option:hover {
      background-color: #d7e4f7;
    }

    .value-item-colour-red {
      background-color: red;
    }
    .value-item-colour-green {
      background-color: green;
    }
    .value-item-colour-blue {
      background-color: blue;
    }
    .value-item-colour-grey {
      background-color: grey;
    }

    .value-item-weight-bold {
      font-weight: bold;
    }
    .value-item-slant-italic {
      font-style: italic;
    }
    .value-item-text-decoration-strikethrough {
      text-decoration: line-through;
    }
    .value-item-text-decoration-underline {
      text-decoration: underline;
    }

    .value-item-border-solid {
      border: 1px solid black;
    }
    .value-item-border-thick {
      border: 2px solid black;
    }
    .value-item-border-dotted {
      border: 2px dotted black;
    }

    /*
    These border radiuses are actually different from the displayed ones,
    it is because of pallette UX
    */
    .value-item-borderRadius-small {
      border-radius: 5px;
    }
    .value-item-borderRadius-medium {
      border-radius: 8px;
    }
    .value-item-borderRadius-large {
      border-radius: 12px;
    }

    .value-item-background-yellow {
      background-color: yellow;
    }
    .value-item-background-blue {
      background-color: blue;
    }
    .value-item-background-grey {
      background-color: grey;
    }


  </style>
</styles-section-item>