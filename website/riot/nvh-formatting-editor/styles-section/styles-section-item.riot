<styles-section-item>
  <div class="styles-section-item-wrapper">
    <div class="label">Background:</div>
    <div class="value-wrapper">
      <input type="color" value={getStyleOptionValue("background-color")} style="border: none; padding: 0; height: 25px; width: 25px; cursor: pointer;" onchange={onChangeStyle.bind(this, "background-color", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Border:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "border", "")}
          style={getStyleOptionValue("border") === "" || getStyleOptionValue("border") === null ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="material-icons tiny">block</i>
      </div>
      <div class="value-item value-item-border-solid"
          onclick={onChangeStyle.bind(this, "border", "solid")}
          style={getStyleOptionValue("border") === "solid" ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
      <div class="value-item value-item-border-dashed"
          onclick={onChangeStyle.bind(this, "border", "dashed")}
          style={getStyleOptionValue("border") === "dashed" ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
      <div class="value-item value-item-border-dotted"
          onclick={onChangeStyle.bind(this, "border", "dotted")}
          style={getStyleOptionValue("border") === "dotted" ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Border color:</div>
    <div class="value-wrapper">
      <input type="color" value={getStyleOptionValue("border-color")} style="border: none; padding: 0; height: 25px; width: 25px; cursor: pointer;" onchange={onChangeStyle.bind(this, "border-color", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Border width:</div>
    <div class="value-wrapper" style="gap: 10px;">
      <input type="range" value={getStyleOptionValue("border-width") === null ? 0 : getStyleOptionValue("border-width")} min="0" max="10" step="1" style="margin:0; width: 150px;" onchange={onChangeStyle.bind(this, "border-width", null)}>
      <input type="number" style="margin:0; width: 75px; height: 30px;" value={getStyleOptionValue("border-width") === null ? 0 : getStyleOptionValue("border-width")} min="0" onchange={onChangeStyle.bind(this, "border-width", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Box shadow:</div>
    <div class="value-wrapper" style="gap: 10px;">
      <input type="range" value={getStyleOptionValue("box-shadow") === null ? 0 : getStyleOptionValue("box-shadow")} min="0" max="50" step="1" style="margin:0; width: 150px;" onchange={onChangeStyle.bind(this, "box-shadow", null)}>
      <input type="number" style="margin:0; width: 75px; height: 30px;" value={getStyleOptionValue("box-shadow") === null ? 0 : getStyleOptionValue("box-shadow")} min="0" onchange={onChangeStyle.bind(this, "box-shadow", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Rounded corners:</div>
    <div class="value-wrapper" style="gap: 10px;">
      <input type="range" value={getStyleOptionValue("border-radius") === null ? 0 : getStyleOptionValue("border-radius")} min="0" max="50" step="1" style="margin:0; width: 150px;" onchange={onChangeStyle.bind(this, "border-radius", null)}>
      <input type="number" style="margin:0; width: 75px; height: 30px;" value={getStyleOptionValue("border-radius") === null ? 0 : getStyleOptionValue("border-radius")} min="0" onchange={onChangeStyle.bind(this, "border-radius", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Margin:</div>
    <div class="value-wrapper" style="gap: 10px;">
      <input type="range" value={getStyleOptionValue("margin") === null ? 0 : getStyleOptionValue("margin")} min="0" max="50" step="1" style="margin:0; width: 150px;" onchange={onChangeStyle.bind(this, "margin", null)}>
      <input type="number" style="margin:0; width: 75px; height: 30px;" value={getStyleOptionValue("margin") === null ? 0 : getStyleOptionValue("margin")} min="0" onchange={onChangeStyle.bind(this, "margin", null)}>
    </div>
  </div>
  <div class="styles-section-item-wrapper">
    <div class="label">Inner margin (padding) (px):</div>
    <div class="value-wrapper" style="gap: 10px;">
      <input type="range" value={getStyleOptionValue("padding") === null ? 0 : getStyleOptionValue("padding")} min="0" max="50" step="1" style="margin:0; width: 150px;" onchange={onChangeStyle.bind(this, "padding", null)}>
      <input type="number" style="margin:0; width: 75px; height: 30px;" value={getStyleOptionValue("padding") === null ? 0 : getStyleOptionValue("padding")} min="0" onchange={onChangeStyle.bind(this, "padding", null)}>
    </div>
  </div>
  <div if={this.state.type === "string" || this.state.type === "list" || this.state.type === "int"} class="styles-section-item-wrapper">
    <div class="label">Text color:</div>
    <div class="value-wrapper">
      <input type="color" value={getStyleOptionValue("color")} style="border: none; padding: 0; height: 25px; width: 25px; cursor: pointer;" onchange={onChangeStyle.bind(this, "color", null)}>
    </div>
  </div>
  <div if={this.state.type === "string" || this.state.type === "list" || this.state.type === "int"} class="styles-section-item-wrapper">
    <div class="label">Text size (px):</div>
    <div class="value-wrapper" style="gap: 10px;">
      <input type="range" value={getStyleOptionValue("font-size") === null ? 16 : getStyleOptionValue("font-size")} min="16" max="50" step="1" style="margin:0; width: 150px;" onchange={onChangeStyle.bind(this, "font-size", null)}>
      <input type="number" style="margin:0; width: 75px; height: 30px;" value={getStyleOptionValue("font-size") === null ? 16 : getStyleOptionValue("font-size")} min="16" onchange={onChangeStyle.bind(this, "font-size", null)}>
    </div>
  </div>
  <div if={this.state.type === "string" || this.state.type === "list" || this.state.type === "int"} class="styles-section-item-wrapper">
    <div class="label">Text weight:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "font-weight", "bold")}
          style={getStyleOptionValue("font-weight") === "bold" ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="tiny material-icons">format_bold</i>
      </div>
    </div>
  </div>
  <div if={this.state.type === "string" || this.state.type === "list" || this.state.type === "int"} class="styles-section-item-wrapper">
    <div class="label">Text slant:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "font-style", "italic")}
          style={getStyleOptionValue("font-style") === "italic" ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="tiny material-icons">format_italic</i>
      </div>
    </div>
  </div>
  <div if={this.state.type === "string" || this.state.type === "list" || this.state.type === "int"} class="styles-section-item-wrapper">
    <div class="label">Text decoration:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "text-decoration", "underline")}
          style={getStyleOptionValue("text-decoration") !== null && getStyleOptionValue("text-decoration").includes("underline") ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="tiny material-icons">format_underlined</i>
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "text-decoration", "line-through")}
          style={getStyleOptionValue("text-decoration") !== null && getStyleOptionValue("text-decoration").includes("line-through") ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="tiny material-icons">format_strikethrough</i>
      </div>
    </div>
  </div>
  <div if={this.state.type === "string" || this.state.type === "list" || this.state.type === "int"} class="styles-section-item-wrapper">
    <div class="label">Left punctuation:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "")}
          style={getStyleOptionValue("leftPunc") === "" || getStyleOptionValue("leftPunc") === null ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="material-icons tiny">block</i>
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "roundBrackets")}
          style={getStyleOptionValue("leftPunc") === "roundBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &lpar;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "squareBrackets")}
          style={getStyleOptionValue("leftPunc") === "squareBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &lsqb;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "curlyBrackets")}
          style={getStyleOptionValue("leftPunc") === "curlyBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &lcub;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "colon")}
          style={getStyleOptionValue("leftPunc") === "colon" ? `background-color:var(--color-grey-normal);` : ""}>
          &colon;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "comma")}
          style={getStyleOptionValue("leftPunc") === "comma" ? `background-color:var(--color-grey-normal);` : ""}>
          &comma;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "dot")}
          style={getStyleOptionValue("leftPunc") === "dot" ? `background-color:var(--color-grey-normal);` : ""}>
          &period;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "leftPunc", "semicolon")}
          style={getStyleOptionValue("leftPunc") === "semicolon" ? `background-color:var(--color-grey-normal);` : ""}>
          &semi;
      </div>
    </div>
  </div>
  <div if={this.state.type === "string" || this.state.type === "list" || this.state.type === "int"} class="styles-section-item-wrapper">
    <div class="label">Right punctuation:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "")}
          style={getStyleOptionValue("rightPunc") === "" || getStyleOptionValue("rightPunc") === null ? `background-color:var(--color-grey-normal);` : ""}>
          <i class="material-icons tiny">block</i>
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "roundBrackets")}
          style={getStyleOptionValue("rightPunc") === "roundBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &rpar;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "squareBrackets")}
          style={getStyleOptionValue("rightPunc") === "squareBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &rsqb;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "curlyBrackets")}
          style={getStyleOptionValue("rightPunc") === "curlyBrackets" ? `background-color:var(--color-grey-normal);` : ""}>
          &rcub;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "colon")}
          style={getStyleOptionValue("rightPunc") === "colon" ? `background-color:var(--color-grey-normal);` : ""}>
          &colon;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "comma")}
          style={getStyleOptionValue("rightPunc") === "comma" ? `background-color:var(--color-grey-normal);` : ""}>
          &comma;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "dot")}
          style={getStyleOptionValue("rightPunc") === "dot" ? `background-color:var(--color-grey-normal);` : ""}>
          &period;
      </div>
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "rightPunc", "semicolon")}
          style={getStyleOptionValue("rightPunc") === "semicolon" ? `background-color:var(--color-grey-normal);` : ""}>
          &semi;
      </div>
    </div>
  </div>
  <div if={this.state.type === "image" || (this.state.type === "video" && getStyleOptionValue("show-player"))} class="styles-section-item-wrapper">
    <div class="label">Max width (px):</div>
    <div class="value-wrapper">
      <input type="number" value={getStyleOptionValue("max-width")} onchange={onChangeStyle.bind(this, "max-width", null)}>
    </div>
  </div>
  <div if={this.state.type === "image" || (this.state.type === "video" && getStyleOptionValue("show-player"))} class="styles-section-item-wrapper">
    <div class="label">Max height (px):</div>
    <div class="value-wrapper">
      <input type="number" value={getStyleOptionValue("max-height")} onchange={onChangeStyle.bind(this, "max-height", null)}>
    </div>
  </div>
  <div if={this.state.type === "image" || this.state.type === "video" || this.state.type === "audio"} class="styles-section-item-wrapper">
    <div class="label">Show url:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "show-url", getStyleOptionValue("show-url") === null ? false : !getStyleOptionValue("show-url"))}
          style={getStyleOptionValue("show-url") === true || getStyleOptionValue("show-url") === null ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div if={this.state.type === "image" && !getStyleOptionValue("show-only-url")} class="styles-section-item-wrapper">
    <div class="label">Make image clickable:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "make-image-clickable", getStyleOptionValue("make-image-clickable") === null ? true : !getStyleOptionValue("make-image-clickable"))}
          style={getStyleOptionValue("make-image-clickable") === true ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div if={this.state.type === "image" && (getStyleOptionValue("show-url") || getStyleOptionValue("show-url") === null)} class="styles-section-item-wrapper">
    <div class="label">Show only url:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "show-only-url", getStyleOptionValue("show-only-url") === null ? true : !getStyleOptionValue("show-only-url"))}
          style={getStyleOptionValue("show-only-url") === true ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div if={this.state.type === "image" && (getStyleOptionValue("show-url") || getStyleOptionValue("show-url") === null) && getStyleOptionValue("show-only-url")} class="styles-section-item-wrapper">
    <div class="label">Show url as icon:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "show-url-as-icon", getStyleOptionValue("show-url-as-icon") === null ? true : !getStyleOptionValue("show-url-as-icon"))}
          style={getStyleOptionValue("show-url-as-icon") === true ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div if={(this.state.type === "audio" || this.state.type === "video") && (getStyleOptionValue("show-url") || getStyleOptionValue("show-url") == null)} class="styles-section-item-wrapper">
    <div class="label">Replace url with text:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "replace-url-with-text", getStyleOptionValue("replace-url-with-text") === null ? true : !getStyleOptionValue("replace-url-with-text"))}
          style={getStyleOptionValue("replace-url-with-text") === true ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div if={(this.state.type === "audio" || this.state.type === "video") && getStyleOptionValue("replace-url-with-text") && (getStyleOptionValue("show-url") || getStyleOptionValue("show-url") == null)} class="styles-section-item-wrapper">
    <div class="label">Text replacement for url:</div>
    <div class="value-wrapper">
      <input type="text" value={getStyleOptionValue("text-replacement-for-url") === null ? "" : getStyleOptionValue("text-replacement-for-url")} onchange={onChangeStyle.bind(this, "text-replacement-for-url", null)}>
    </div>
  </div>
  <div if={(this.state.type === "audio" || this.state.type === "video") && getStyleOptionValue("replace-url-with-text") && (getStyleOptionValue("show-url") || getStyleOptionValue("show-url") == null)} class="styles-section-item-wrapper">
    <div class="label">Set text as tooltip:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "text-as-url-tooltip", getStyleOptionValue("text-as-url-tooltip") === null ? true : !getStyleOptionValue("text-as-url-tooltip"))}
          style={getStyleOptionValue("text-as-url-tooltip") === true ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div if={(this.state.type === "audio" || this.state.type === "video") && (getStyleOptionValue("show-url") || getStyleOptionValue("show-url") == null)} class="styles-section-item-wrapper">
    <div class="label">Show icon:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "show-icon", getStyleOptionValue("show-icon") === null ? true : !getStyleOptionValue("show-icon"))}
          style={getStyleOptionValue("show-icon") === true ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div if={(this.state.type === "audio" || this.state.type === "video") && ((getStyleOptionValue("show-url") || getStyleOptionValue("show-url") == null)) && getStyleOptionValue("show-icon") || (this.state.type === "image" && ((getStyleOptionValue("show-url") || getStyleOptionValue("show-url") == null)) && getStyleOptionValue("show-only-url") && getStyleOptionValue("show-url-as-icon"))} class="styles-section-item-wrapper">
    <div class="label">Choose icon:</div>
    <div class="value-wrapper" style="width: 200px; flex-wrap: wrap;">
      <div class="value-item value-item-icon"
          onclick={onChangeStyle.bind(this, "icon-item", "link")}
          style={getStyleOptionValue("icon-item") === "link" ? `background-color:var(--color-grey-normal);` : ""}>
          🔗
      </div>
      <div class="value-item value-item-icon"
          onclick={onChangeStyle.bind(this, "icon-item", "speaker")}
          style={getStyleOptionValue("icon-item") === "speaker" ? `background-color:var(--color-grey-normal);` : ""}>
          🔊
      </div>
      <div class="value-item value-item-icon"
          onclick={onChangeStyle.bind(this, "icon-item", "load-speaker")}
          style={getStyleOptionValue("icon-item") === "load-speaker" ? `background-color:var(--color-grey-normal);` : ""}>
          📢
      </div>
      <div class="value-item value-item-icon"
          onclick={onChangeStyle.bind(this, "icon-item", "music-note")}
          style={getStyleOptionValue("icon-item") === "music-note" ? `background-color:var(--color-grey-normal);` : ""}>
          ♫
      </div>
      <div class="value-item value-item-icon"
          onclick={onChangeStyle.bind(this, "icon-item", "camera")}
          style={getStyleOptionValue("icon-item") === "camera" ? `background-color:var(--color-grey-normal);` : ""}>
          📹
      </div>
      <div class="value-item value-item-icon"
          onclick={onChangeStyle.bind(this, "icon-item", "film-frames")}
          style={getStyleOptionValue("icon-item") === "film-frames" ? `background-color:var(--color-grey-normal);` : ""}>
          🎞
      </div>
      <div class="value-item value-item-icon"
          onclick={onChangeStyle.bind(this, "icon-item", "film-projector")}
          style={getStyleOptionValue("icon-item") === "film-projector" ? `background-color:var(--color-grey-normal);` : ""}>
          📽
      </div>
      <div class="value-item value-item-icon"
          onclick={onChangeStyle.bind(this, "icon-item", "movie-camera")}
          style={getStyleOptionValue("icon-item") === "movie-camera" ? `background-color:var(--color-grey-normal);` : ""}>
          🎥
      </div>
      <div class="value-item value-item-icon"
          onclick={onChangeStyle.bind(this, "icon-item", "framed-picture")}
          style={getStyleOptionValue("icon-item") === "framed-picture" ? `background-color:var(--color-grey-normal);` : ""}>
          🖼
      </div>
    </div>
  </div>
  <div if={(this.state.type === "audio" || this.state.type === "video") && ((getStyleOptionValue("show-url") || getStyleOptionValue("show-url") == null)) && getStyleOptionValue("show-icon") || (this.state.type === "image" && (getStyleOptionValue("show-url") || getStyleOptionValue("show-url") === null) && getStyleOptionValue("show-only-url") && getStyleOptionValue("show-url-as-icon"))} class="styles-section-item-wrapper">
    <div class="label">Use unicode character as an icon:</div>
    <div class="value-wrapper">
      <input type="text" style="height: 30px;" value={getStyleOptionValue("unicode-icon") === null ? "" : getStyleOptionValue("unicode-icon")} onchange={onChangeStyle.bind(this, "unicode-icon", null)}>
    </div>
  </div>
  <div if={this.state.type === "audio"} class="styles-section-item-wrapper">
    <div class="label">Show audio player:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "show-player", getStyleOptionValue("show-player") === null ? true : !getStyleOptionValue("show-player"))}
          style={getStyleOptionValue("show-player") === true ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>
  <div if={this.state.type === "video"} class="styles-section-item-wrapper">
    <div class="label">Show video player:</div>
    <div class="value-wrapper">
      <div class="value-item"
          onclick={onChangeStyle.bind(this, "show-player", getStyleOptionValue("show-player") === null ? true : !getStyleOptionValue("show-player"))}
          style={getStyleOptionValue("show-player") === true ? `background-color:var(--color-grey-normal);` : ""}>
      </div>
    </div>
  </div>

  <script>
    export default {
      state: {
        type: null,
        selectedPlaceholder: null,
        selectedOption: "",
        styles: null, // styles can not be taken from selectedPlaceholder because of markup type exception
      },

      onBeforeMount() {
        this.state.selectedPlaceholder = window.nvhFormattingEditor.global.selectedPlaceholder;
        if (this.state.selectedPlaceholder !== null && this.state.selectedPlaceholder.content.fullName !== "") {
          this.state.type = window.nvhStore.getElementConfig(this.state.selectedPlaceholder.content.fullName).type;
        }
        if (window.nvhFormattingEditor.currentLayout.schema.children[0].children.length === 0) {
          window.nvhFormattingEditor.global.selectedPlaceholderFullName = "entry";
        }
        this.state.styles = this.props.styleOption.styles;
      },
      onBeforeUpdate() {
        this.state.selectedPlaceholder = window.nvhFormattingEditor.global.selectedPlaceholder;
        if (this.state.selectedPlaceholder !== null && this.state.selectedPlaceholder.content.fullName !== "") {
          this.state.type = window.nvhStore.getElementConfig(this.state.selectedPlaceholder.content.fullName).type;
        }
        if (window.nvhFormattingEditor.currentLayout.schema.children[0].children.length === 0) {
          window.nvhFormattingEditor.global.selectedPlaceholderFullName = "entry";
        }
        this.state.styles = this.props.styleOption.styles;
      },

      getStyleOptionValue(option) {
        if (window.nvhFormattingEditor.global.selectedPlaceholder === null) {
          return null;
        }
        if (this.state.styles === undefined) {
          return null;
        }
        if (this.state.styles[option] === undefined) {
          return null;
        }
        return this.state.styles[option];
      },
      onChangeStyle(option, value, event) {
        if (value === null) {
          value = event.currentTarget.value;
        }
        this.onChangeStyle2(option, value);
      },
      onChangeStyle2(option, value) {
        /* If selected placeholder is wrapper, then selectedPlaceholderFullName = "" */
        /*TODO: selectedPlaceholderFullName should not be "" even for wrappers in the future*/
        // let fullName = window.nvhFormattingEditor.global.selectedPlaceholderFullName;

        let selectedPlaceholder = window.nvhFormattingEditor.global.selectedPlaceholder;
        if (selectedPlaceholder === null) {
          console.log("There is no selected placeholder");
          return;
        }
        if (this.state.styles === undefined) {
          this.state.styles = {};
        }
        if (option === "text-decoration") {
          if (this.state.styles[option] === undefined) {
            this.state.styles[option] = [value]
          } else {
            if (this.state.styles[option].includes(value)) {
              this.state.styles[option] = this.state.styles[option].filter(v => v !== value);
            } else {
              this.state.styles[option].push(value);
            }
          }
        } else if (option === "font-weight" || option === "font-style") {
          if (this.state.styles[option] === undefined) {
            this.state.styles[option] = value;
          } else {
            delete this.state.styles[option];
          }
        } else if (option === "icon-item") {
          if (this.state.styles[option] === undefined || this.state.styles[option] !== value) {
            this.state.styles[option] = value;
          } else {
            delete this.state.styles[option];
          }
        } else {
          this.state.styles[option] = value;
        }
        window.nvhFormattingEditor.formattingEditorComponent.update();
      },
      onSelectChange(value) {
        this.state.indentationBulletingOpened = !this.state.indentationBulletingOpened;
        this.state.selectedOption = value;
        this.update();
      },
      onSelectOpen() {
        if (window.nvhFormattingEditor.global.selectedPlaceholderFullName === "") {
          return;
        }
        this.state.indentationBulletingOpened = !this.state.indentationBulletingOpened;
        this.update();
      },
    }
  </script>

  <style>
    .styles-section-item-wrapper {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
    }

    .value-wrapper {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 2px;
    }

    .value-item {
      height: 25px;
      width: 25px;
      border: 1px solid black;
      display: flex;
      align-items: center;
      justify-content: center
    }
    .value-item:hover {
      cursor: pointer;
      transform: scale(1.05);
    }

    .value-item-icon {
      height: 35px;
      width: 35px;
      font-size: 28px;
    }

    #select-indentation-bulleting {
      display: block;
      width: 180px;
      height: 25px;
      font-weight: bold;
      border: 1px solid black;
    }
    #select-indentation-bulleting:hover {
      cursor: pointer;
    }
    .select-dropdown {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 5px;
    }
    .select-dropdown-options {
      height: 120px;
      padding: 5px;
      overflow-y: scroll;
      border: 1px solid black;
    }
    .select-dropdown-option:hover {
      background-color: #d7e4f7;
    }

    .value-item-colour-red {
      background-color: red;
    }
    .value-item-colour-green {
      background-color: green;
    }
    .value-item-colour-blue {
      background-color: blue;
    }
    .value-item-colour-grey {
      background-color: grey;
    }

    .value-item-border-solid {
      border: 2px solid black;
    }
    .value-item-border-dashed {
      border: 2px dashed black;
    }
    .value-item-border-dotted {
      border: 2px dotted black;
    }

    /*
    These border radiuses are actually different from the displayed ones,
    it is because of pallette UX
    */
    .value-item-borderRadius-small {
      border-radius: 5px;
    }
    .value-item-borderRadius-medium {
      border-radius: 8px;
    }
    .value-item-borderRadius-large {
      border-radius: 12px;
    }

    .value-item-background-yellow {
      background-color: yellow;
    }
    .value-item-background-blue {
      background-color: blue;
    }
    .value-item-background-grey {
      background-color: grey;
    }


  </style>
</styles-section-item>