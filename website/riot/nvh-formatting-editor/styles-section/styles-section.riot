<styles-section>
   <div class="styles-section-container">
      <div if={!nvhFormattingEditor.data.selectedLayoutContainer}
            class="center-align grey-text p-8">
         <h3>No container selected.</h3>
         Select container in "layout" or "preview" panel to style it.
      </div>
      <div  if={nvhFormattingEditor.data.selectedLayoutContainer}
            class="style-section-top-bar-wrapper displayFlex">
         <div class="style-section-tabs-wrapper">
            <ul class="tabs small mb-0">
               <li each={tab in state.activeTabOptions}
                     class="tab {tab.id == state.activeTab.id ? "active" : ""}"
                     onclick={onTabClick.bind(this, tab)}>
                  <a style="--active-color: {nvhStore.getElementColor(tab.path)};">{tab.label}</a>
               </li>
            </ul>
         </div>
         <span class="ml-auto">
            <i id="styleMoreDropdonwTrigger"
                  class="material-icons clickable dropdown-trigger"
                  data-target="stylesActionDropdown">
               more_horiz
            </i>
            <ul id="stylesActionDropdown"
                  class="dropdown-content">
               <li>
                  <a onclick={onResetClick}>
                     <i class="material-icons">settings_backup_restore</i>
                     Reset styles
                  </a>
               </li>
            </ul>
         </span>
      </div>
      <styles-section-item if={nvhFormattingEditor.data.selectedLayoutContainer}
            type={state.activeTab.type}
            path={state.activeTab.path}/>
   </div>

   <script>
      export default {
         bindings: [["nvhFormattingEditor", "selectedLayoutContainerChange", "onSelectedLayoutContainerChange"]],

         state: {
            activeTab: null,
            tabOptions: []
         },

         onBeforeMount(props) {
            this.nvhFormattingEditor = window.nvhFormattingEditor;
            this.nvhStore = window.nvhStore;
            this.refreshTabOptions()
         },

         onBeforeUpdate(props) {
            this.refreshTabOptions()
         },

         onUpdated(){
            $("#styleMoreDropdonwTrigger", this.root).dropdown({coverTrigger: false, constrainWidth: false})
         },

         onSelectedLayoutContainerChange(){
            this.state.activeTab = null
            this.update()
         },

         onTabClick(tab) {
            if(tab != this.state.activeTab){
               this.update({activeTab: tab})
            }
         },

         onResetClick(){
            this.nvhFormattingEditor.resetSchemaStyles(this.nvhFormattingEditor.data.selectedLayoutContainer, this.state.activeTab.type, this.state.activeTab.type == "markup" ? this.state.activeTab.path : null)
         },

         refreshTabOptions(){
            let tabOptions = []
            let selectedLayoutContainer = this.nvhFormattingEditor.data.selectedLayoutContainer
            if(selectedLayoutContainer){
               let name = selectedLayoutContainer.content.name
               let label = name ? name + (selectedLayoutContainer.children.length ? " group" : "") : "container"
               tabOptions = [{
                     label: label,
                     path: selectedLayoutContainer.content.path,
                     type: "element",
                     id: `element_${selectedLayoutContainer.content.path}`
                  },
                  ...this.nvhFormattingEditor.getElementMarkupChildren(selectedLayoutContainer)
                        .map(markupChild => {
                              return {
                                 label: markupChild.name,
                                 path: markupChild.path,
                                 type: "markup",
                                 id: `markup_${markupChild.path}`
                              }
                        }),
                  {label: "label", id: "label_label", path: null, type: "label"},
                  {label: "bullet", id: "bullet_bullet", path: null, type: "bullet"}
               ]
            }
            this.state.activeTabOptions = tabOptions
            if(!this.state.activeTab){
               this.state.activeTab = this.state.activeTabOptions[0]
            }
         }
      }
   </script>

   <style type="scss">
      :host{
         min-width: 100%;
         height: 100%;
         overflow-y: auto;
      }
      .styles-section-container {
         background-color: #f5f5f5;
      }
      styles-section-item{
         display: flex;
         flex-direction: column;
         gap: 2px;
      }
      .style-section-top-bar-wrapper{
         background-color: #ebebeb;
      }
      .style-section-option-wrapper {
         display: flex;
         width: 100%;
      }
      .style-section-tabs-wrapper{
         width: calc(100% - 40px);
         overflow-x: auto;
      }
      .tabs{
         overflow: unset;
         width: auto;
         background-color: #ebebeb;
         margin: 0;
         .tab:not(.active){
            background-color: #ebebeb
         }
      }
      .tab.active a{
         color: var(--active-color);
      }
      .dropdown-trigger{
         width: 34px;
         height: 34px;
         line-height: 34px;
      }
   </style>
</styles-section>
