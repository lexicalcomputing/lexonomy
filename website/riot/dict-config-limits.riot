<dict-config-limits>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <h1 class="pageTitle">Limits</h1>
   <dict-configuration-issues config-id="limits"/>
   <template if={!state.isLoading}>
      <div class="input-field mb-6">
         <input id="userLimit"
               type="number"
               min=1
               oninput={onLimitInput.bind(this, "users")}
               value={state.limits.users || ""}/>
         <label class="noWrap">Maximum number of users</label>
         <span if={state.limits.users && state.limits.users < state.userCount}
               class="helper-text red-text">Dictionary has already {state.userCount} users.</span>
      </div>

      <div class="input-field mb-6">
         <input id="entryLimit"
               type="number"
               min=1
               oninput={onLimitInput.bind(this, "entries")}
               value={state.limits.entries || ""}/>
         <label class="noWrap">Maximum number of entries</label>
         <span if={state.limits.entries && state.limits.entries < dictData.dictionaryList.length}
               class="helper-text red-text">Dictionary has already {dictData.dictionaryList.length} entries.</span>
      </div>

      <dict-config-buttons save-data={saveData}
            disabled={isSaveDisabled()}/>
   </template>


   <script>
      export default {
         bindings: [["store", "entryListChanged", "update"]],

         state: {
            isLoading: true,
            isSaving: false,
            isSaveDisabled: false,
            limits: null,
            userCount: null
         },

         onMounted() {
            this.store.loadDictionaryConfig("users")
                  .done(response => {
                     if(response.success){
                        this.update({userCount: Object.keys(response.content).length})
                     }
                  })
            this.store.loadDictionaryConfig("dict_settings")
                  .done(response => {
                     if(response.content && response.content.limits){
                        this.state.limits = Object.assign({users: "", entries: 5000}, response.content.limits)
                        this.state.limits.entries = this.state.limits.entries || ""
                        this.state.limits.users = this.state.limits.users || ""
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                  })
         },

         saveData(){
            this.update({isSaving: true})
            let limits = {}
            if(this.state.limits.entries){
               limits.entries = this.state.limits.entries * 1
            }
            if(this.state.limits.users){
               limits.users = this.state.limits.users * 1
            }
            this.store.updateDictionarySettings({limits: limits})
                  .always(() => this.update({isSaving: false}))
         },

         onLimitInput(key, evt){
            this.state.limits[key] = evt.target.value || ""
            this.update()
         },

         isSaveDisabled(){
            return (this.state.limits.entries !== "" && (this.state.limits.entries * 1 < 1))
                  || (this.state.limits.users !== "" && (this.state.limits.users * 1 < 1))
         }
      }
   </script>

   <style>
      input{
         max-width: 200px;
      }
   </style>
</dict-config-limits>
