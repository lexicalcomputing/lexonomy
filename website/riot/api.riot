<api>
   <loading-overlay if={state.isLoading}/>
   <div id="swagger-ui"></div>

   <script>
      export default {
         state: {
            isLoading: true
         },

         onMounted(){
            Promise.all([
               window.loadScript("libs/swagger/swagger-ui-bundle.js"),
               window.loadScript("libs/jsyaml/jsyaml.min.js"),
               window.loadScript("libs/swagger/swagger-ui-standalone-preset.js"),
               window.loadStylesheet("libs/swagger/swagger-ui.css")
            ])
                  .then(result => {
                     if(result.every(res => res.success)){
                        this.initSwaggerUI()
                     } else {
                        window.showToast("Could not load Lexonomy API documentation ")
                     }
                  })
                  .finally(result => {
                     this.update({isLoading: false})
                  })
         },

         initSwaggerUI(){
            fetch("docs/swagger-lexonomy.yaml")
                  .then(response => response.text())
                  .then(yaml => {
                     let spec = jsyaml.load(yaml)
                     spec.servers = [{
                        url: window.API_URL
                     }]
                     window.ui = SwaggerUIBundle({
                        spec: spec,
                        dom_id: '#swagger-ui',
                        presets: [
                           SwaggerUIBundle.presets.apis,
                           SwaggerUIStandalonePreset
                        ],
                        displayRequestDuration: true,
                        plugins: [
                           SwaggerUIBundle.plugins.DownloadUrl
                        ],
                        layout: "BaseLayout",
                        supportedSubmitMethods: ["get", "post"]
                     })
                  })
         }
      }
   </script>

   <style type="scss">
      .swagger-ui{
         .info{
            margin: 0
         }
         .scheme-container{
            box-shadow: none;
            padding: 0;
         }
         textarea{
            font-size: 1rem;
            width: 100%;
            resize: vertical
         }
         select{
            display: inline-block!important;
         }
      }
   </style>
</api>
