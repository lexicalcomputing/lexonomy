<dict-config-titling>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <h1 class="pageTitle">Headword</h1>
   <div class="row">
      <div id="headword"
            class="input-field col s6">
         <element-select show-empty-value={true}
               empty-value="(not set)"
               riot-value={state.data.headword}/>
         <label for="headword">Headword</label>
         <span class="helper-text">Select the element which contains the entry's headword. If you make no selection here Lexonomy will try to guess what the headword of each entry is.</span>
      </div>
   </div>
   <div class="row">
      <div class="col input-field">
         <div class="displayFlex">
            <div id="headwordSorting">
               <element-select show-empty-value={true}
                     empty-value="(not set)"
                     riot-value={state.data.headwordSorting}/>
            </div>
            <label class="ml-8 mt-2">
               <input type="checkbox"
                     id="sortDesc"
                     checked={ state.data.sortDesc }/>
               <span>Sort in descending order</span>
            </label>
         </div>
         <label for="headwordSorting">Headword sorting</label>
         <div>
            <span class="helper-text">Select the element which will be used for sorting of headwords in the entry list. If you make no selection here Lexonomy will use the element you chose for headword.</span>
         </div>
      </div>
   </div>
   <div class="row">
      <h3>Headword annotations</h3>
   </div>
   <div class="row">
      <div class="col s5">
         <label>
            <input name="hwannotype"
                  type="radio"
                  value="simple"
                  checked={ state.data.headwordAnnotationsType == "simple" }
                  onchange={ changeAnnotation }/>
            <span>simple</span>
         </label>
         <br/>
         <div id="headwordAnnotations"
               class="input-field">
            <element-select multiple={true}
                  riot-value={state.data.headwordAnnotations}
                  disabled={state.data.headwordAnnotationsType == "advanced"}/>
            <span class="helper-text">You can select any elements here whose content you want displayed beside the headword in the entry list, such as homograph numbers or part-of-speech labels.</span>
         </div>
      </div>
      <div class="col s5">
         <label>
            <input name="hwannotype"
                  type="radio"
                  value="advanced"
                  checked={ state.data.headwordAnnotationsType == "advanced" }
                  onchange={ changeAnnotation }/>
            <span>advanced</span>
         </label>
         <br/>
         <div class="input-field">
            <textarea id="advancedAnnotations"
                  class="materialize-textarea"
                  placeholder="headword annotations"
                  disabled={ state.data.headwordAnnotationsType == "simple" }>{ state.data.headwordAnnotationsAdvanced }</textarea>
            <span class="helper-text">You can insert any HTML containing placeholders for elements in the form of '%(element)', e.g. '&lt;b>%(headword)&lt;/b>'.</span>
         </div>
      </div>
   </div>
   <div class="row">
      <div class="input-field col s8">
         <input data-selected-locale={ state.data.locale }
               type="text"
               id="locale"
               class="autocomplete"
               placeholder="Type to search for language"/>
         <label for="locale">Alphabetical order</label>
         <span class="helper-text">Select language to sort entries alphabetically in the entry list.</span>
      </div>
   </div>
   <div class="row">
      <div class="input-field col s6">
         <input value={ state.data.numberEntries}
               id="numberEntries"
               type="number" />
         <label for="numberEntries">Number of entries to be loaded in the entry list at once</label>
         <span class="helper-text">High number may reduce Lexonomy performance.</span>
      </div>
   </div>
   <dict-config-buttons save-data={saveData}/>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            data: {
               headwordAnnotationsType: "simple",
               headwordAnnotations: []
            }
         },

         changeAnnotation() {
            if ($("[name=hwannotype][value=advanced]").is(":checked")) {
               $("#headwordAnnotations select").attr("disabled", "disabled")
               $("#advancedAnnotations").removeAttr("disabled")
            } else {
               $("#advancedAnnotations select").attr("disabled", "disabled")
               $("#headwordAnnotations").removeAttr("disabled")
            }
         },

         onMounted() {
            $("#locale").autocomplete({
               data: this.store.data.siteconfig.langs.map(lang => {
                  return {
                     value: lang.code,
                     label: lang.lang
                  }
               })
            })
            this.store.loadDictionaryConfig("titling")
                  .done(response => {
                     this.state.data = response.content
                     if (!this.state.data.numberEntries) this.state.data.numberEntries = 1000
                     if (!this.state.data.headwordAnnotationsType) this.state.data.headwordAnnotationsType = "simple"
                     if (!this.state.data.headwordAnnotations) this.state.data.headwordAnnotations = []
                     if(this.state.data.locale){
                        $("#locale").val(this.store.getLanguageName(this.state.data.locale))
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     M.updateTextFields()
                     M.textareaAutoResize($("#advancedAnnotations"))
                  })
         },

         getConfigData() {
            let newData = {
               headword: $("#headword select").val(),
               headwordSorting: $("#headwordSorting select").val(),
               sortDesc: $("#sortDesc").is(":checked"),
               numberEntries: $("#numberEntries").val(),
               locale: this.store.getLanguageCode($("#locale").val())
            }
            if ($("[name=hwannotype][value=advanced]").is(":checked")) {
               newData.headwordAnnotationsType = "advanced"
               newData.headwordAnnotationsAdvanced = $("#advancedAnnotations").val()
            } else {
               newData.headwordAnnotationsType = "simple"
               newData.headwordAnnotations = $("#headwordAnnotations select").val()
            }
            return newData
         },

         saveData() {
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("titling", this.getConfigData())
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>


   <style type="scss">
      #headword element-select,
      #headwordSorting element-select,
      #locale,
      #numberEntries{
         display: block;
         max-width: 300px;
         width: 300px;
      }
   </style>
</dict-config-titling>
