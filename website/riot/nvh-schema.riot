<nvh-schema class="displayFlex">
   <div class="pb-8 pr-6">
      <h3>Entry components</h3>
      <div class="pl-4"
            style="min-width: 350px;">
         <label class="checkbox moduleName mt-2">
            <input type="checkbox"
                  checked="checked"
                  disabled="disabled">
            <span class="displayFlex alignCenter">
               Core components
               <i class="moduleHelpIcon help help material-icons tooltipped"
                     data-tooltip=" Includes the key components useful for all kinds of dictionaries such as part-of-speech, pronunciation, word forms, senses, definitions, examples, labels, tags and others.">help_outline</i>
            </span>
         </label>
         <label class="checkbox moduleName mt-2">
            <input type="checkbox"
                  checked={state.modules.includes("xlingual")}
                  name="xlingual"
                  onchange={onModuleCheckboxChange.bind(this, "xlingual")}>
            <span class="displayFlex alignCenter">
               Multilingual components
               <i class="moduleHelpIcon help material-icons tooltipped"
                     data-tooltip="Includes components required for bilingual and multilingual dictionaries such as translations, examples of translations, pronunciations and others.">help_outline</i>
            </span>
         </label>
         <div id="xlingualSettings"
               class="moduleSettings ml-12"
               style={state.modules.includes("xlingual") ? '' : 'display: none;'}>
            <div class="selectedLangs">
               <span each={languageCode in state.xlingual_langs}
                     class="chip">
                  {store.getLanguageName(languageCode)}
                  <i class="close material-icons"
                     onclick={onRemoveLanguageClick.bind(this, languageCode)}>close</i>
               </span>
            </div>
            <div class="input-field">
               <input type="text"
                     id="language"
                     autocomplete="off">
               <label>Add translation language</label>
            </div>
         </div>
         <label class="checkbox moduleName mt-2">
            <input type="checkbox"
                  checked={state.modules.includes("annotation")}
                  name="annotation"
                  onchange={onModuleCheckboxChange.bind(this, "annotation")}>
            <span class="displayFlex alignCenter">
               Highlighting
               <i class="moduleHelpIcon help material-icons tooltipped"
                     data-tooltip="Includes components required to highlight words, usually in definitions and example sentences, and assign functions to them.">help_outline</i>
            </span>
         </label>
         <label class="checkbox moduleName mt-2">
            <input type="checkbox"
                  checked={state.modules.includes("etymology")}
                  name="etymology"
                  onchange={onModuleCheckboxChange.bind(this, "etymology")}>
            <span class="displayFlex alignCenter">
               Etymology module
            </span>
         </label>
         <div id="etymologySettings"
               class="moduleSettings ml-12"
               style={state.modules.includes("etymology") ? '' : 'display: none;'}>
            <div class="selectedLangs">
               <span each={language in state.etymology_langs}
                     class="chip">
                  {language}
                  <i class="close material-icons"
                     onclick={onRemoveEtymologyLanguageClick.bind(this, language)}>close</i>
               </span>
            </div>
            <div class="input-field">
               <input type="text"
                     id="etymologyLanguage"
                     autocomplete="off"
                     onkeyup={onEtymologyLanguageKeyUp}>
               <label>
                  Add etymon language prefix
                  <i class="tiny help material-icons tooltipped"
                     data-tooltip="The etymon language prefix for elements related to this language. For example, enm for Middle English will produce elements names such as enm_etymonUnit.">help_outline</i>
               </label>
               <span if={!state.isEtymologyLanguageValid}
                     class="helper-text red-text">Invalid language. Allowed characters: a-z, A-Z, 0-9, -, _</span>
               <span class="helper-text">Add language prefix and hit enter.</span>
            </div>
         </div>
      </div>
   </div>

   <div class="borderLeft entryElements positionRelative pl-8 pb-8">
      <h3>Final entry structure</h3>
      <div class="switch">
         <label>
            <input type="checkbox"
                  checked={state.showMoreSettings}
                  onchange={onShowMoreSettingsChanged}>
            <span class="lever"></span>
            Choose entry elements
         </label>
      </div>
      <loading-overlay if={state.isLoading}/>
      <div if={state.schema}
            class="ml-4 mt-4">
         <div each={(element, idx) in state.schema.getElementList()}>
            <div class="entryLine elementWithCheckbox displayInlineFlex alignCenter">
               <label if={state.showMoreSettings}
                     style="padding-left: {element.indent * 30 + 10}px;">
                  <input type="checkbox"
                        checked={state.selectedElements.has(element.path) || state.schema.isElementRoot(element)}
                        disabled={state.schema.isElementRoot(element)}
                        onclick={onElementCheckboxChanged.bind(this, element.path)} />
                  <span style="color: {state.schema.getElementColor(element)};">
                     {element.name}
                  </span>
               </label>
               <span if={!state.showMoreSettings}
                     style="color: {state.schema.getElementColor(element)}; padding-left: {element.indent * 30 + 10}px;">
                  {element.name}
               </span>
               <i class="grey-text inlineBlock material-icons ml-2 tiny verticalMiddle help tooltipped"
                     data-tooltip="{state.elementDescription[element.name]}">
                  help_outline
               </i>
            </div>
         </div>
      </div>
   </div>


   <script>
       export default {
         state: {
            isLoading: true,
            schema: null,
            modules: [],
            xlingual_langs: [],
            etymology_langs: [],
            isEtymologyLanguageValid: true,
            elementDescription: null,
            showMoreSettings: false,
            selectedElements: null
         },

         onBeforeMount(){
            this.state.modules = this.props.modules || []
            this.state.xlingual_langs = this.props.xlingual_langs || []
            this.state.etymology_langs = this.props.etymology_langs || []
            this.state.showMoreSettings = this.props.showMoreSettings
            this.state.selectedElements = new Set(this.props.selectedElements)
            this.state.schema = new window.NvhSchemaClass()
         },

         onElementCheckboxChanged(elementPath, evt){
            if(this.state.selectedElements.has(elementPath)){
               this.state.selectedElements.delete(elementPath)
               this.state.selectedElements.forEach(path => {
                  // uncheck all child elements
                  if(path.startsWith(elementPath)){
                     this.state.selectedElements.delete(path)
                  }
               })
            } else {
               this.selectElementAndItsParents(elementPath)
            }
            this.update()
            this.callOnChange()
         },

         onMounted(){
            this.loadSchema()
            if(this.state.modules.includes("xlingual")){
               this.initLanguageAutocomplete()
            }
         },

         onBeforeUnmount(){
            this.state.loadSchemaRequest && this.state.loadSchemaRequest.abort()
         },

         onModuleCheckboxChange(moduleName, evt){
            let checked = evt.target.checked
            if(checked){
               this.state.modules.push(moduleName)
            } else {
               this.state.modules = this.state.modules.filter(m => m != moduleName)
            }
            this.loadSchema()
            if(moduleName == "xlingual" && checked){
               this.initLanguageAutocomplete()
            }
         },

         onRemoveLanguageClick(languageCode, evt){
            evt.stopPropagation()
            this.state.xlingual_langs = this.state.xlingual_langs.filter(l => l != languageCode)
            this.loadSchema()
         },

         onRemoveEtymologyLanguageClick(language, evt){
            evt.stopPropagation()
            this.state.etymology_langs = this.state.etymology_langs.filter(l => l != language)
            this.loadSchema()
         },

         onEtymologyLanguageKeyUp(evt){
            let language = evt.target.value.trim()
            if(language){
               if(evt.keyCode == 13){
                  if(this.state.isEtymologyLanguageValid){
                     if(!this.state.etymology_langs.includes(language)){
                        this.state.etymology_langs.push(language)
                        this.loadSchema()
                     }
                     $("#etymologyLanguage").val("")
                  }
               } else {
                  let wasValid = this.state.isEtymologyLanguageValid
                  this.state.isEtymologyLanguageValid = !!language.match(/^[a-zA-Z0-9-_]+$/)
                  if(wasValid != this.state.isEtymologyLanguageValid){
                     this.update()
                  }
               }
            }
         },

         onShowMoreSettingsChanged(){
            this.state.showMoreSettings = !this.state.showMoreSettings
            if(this.state.showMoreSettings){
               this.state.schema.forEach(element => {
                  this.state.selectedElements.add(element.path)
               })
            }
            this.update()
            this.callOnChange()
         },

         callOnChange(){
            if(this.props.onChange && !this.state.schema.isEmpty()){  // exclude first call on mount
               let nvh = this.state.isLoading ? "" : this.getFinalNvh()
               this.props.onChange(nvh, {
                  modules: this.state.modules,
                  xlingual_langs: this.state.xlingual_langs,
                  etymology_langs: this.state.etymology_langs,
                  showMoreSettings: this.state.showMoreSettings,
                  selectedElements: [...this.state.selectedElements]  // Set to Array
               })
            }
         },

         getFinalNvh(){
            if(this.state.showMoreSettings){
               return this.state.schema.getElementList()
                     .filter(element => {
                        return this.state.selectedElements.has(element.path)
                     })
                     .map(element => {
                        return this.state.schema.stringifyElement(element)
                     })
                     .join("\n")
            } else {
               return this.state.schema.getNvh()
            }
         },

         selectElementAndItsParents(elementPath){
            this.state.selectedElements.add(elementPath)
            let path = elementPath
            while(path){
               // check all parent elements
               this.state.selectedElements.add(path)
               path = path.split(".").slice(0, -1).join(".")
            }
         },

         initLanguageAutocomplete(){
            $("#language").autocomplete({
               data: this.store.data.siteconfig.langs.map(lang => {
                  return {
                     value: lang.code,
                     label: lang.lang
                  }
               }),
               onAutocomplete: language => {
                  if(!this.state.xlingual_langs.includes(language.value)){
                     this.state.xlingual_langs.push(language.value)
                     this.loadSchema()
                     this.callOnChange()
                  }
                  $("#language").val("")
               }
            })
         },

         loadSchema(){
            this.update({isLoading: true})
            this.callOnChange()
            this.state.loadSchemaRequest && this.state.loadSchemaRequest.abort()
            let modules = ["core", ...this.state.modules]
            if(!this.state.xlingual_langs.length){
               modules = modules.filter(module => module != "xlingual")
            }
            if(!this.state.etymology_langs.length){
               modules = modules.filter(module => module != "etymology")
            }
            this.state.loadSchemaRequest = this.store.DMLexToSchema(modules, this.state.xlingual_langs, this.state.etymology_langs)
                  .done(response => {
                     let nvh = response.nvhSchema
                     let oldElementList = !this.state.schema.isEmpty() ? this.state.schema.getElementList().map(element => element.path) : null
                     this.state.schema.update(nvh)
                     this.state.elementDescription = response.desc_dict
                     if(this.state.showMoreSettings && oldElementList){
                        // add new elements to selectedElements list
                        this.state.schema.forEach(element => {
                           if(!oldElementList.includes(element.path)){
                              this.selectElementAndItsParents(element.path)
                           }
                        })
                        // remove deleted elements from selectedElements list
                        let removedKeys = Object.keys(this.state.selectedElements).forEach(elementPath => {
                           if(!this.state.schema.find(element => element.path == elementPath)){
                              this.state.selectedElements.delete(elementPath)
                           }
                        })
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     this.callOnChange()
                  })
         }
      }
   </script>

   <style type="scss">
      :host{
         min-height: 200px;
         flex-wrap: wrap;
      }
      .moduleName{
         display: flex;
         align-items: center;
         font-size: 1.3rem;
         & > label{
            height: 25px;
         }
         .moduleHelpIcon{
            margin-left: 0.25em;
            opacity: 0.5;
            line-height: 25px;
            height: 25px;
            font-size: 17px;
            vertical-align: bottom;
         }
      }
      .entryElements{
         .overlay{
            background-color: rgba(0, 0, 0, 0)
         }
      }
      .selectedLangs{
         max-width: 300px;
      }
      .entryLine{
         &:not(:hover){
            input[type="checkbox"]:not(:checked){
               & + span{
                  color: #bbbbbb !important
               }
            }
         }
      }

   </style>
</nvh-schema>
