<nvh-schema class="displayInlineFlex">
   <div>
      <h3>DMLex modules</h3>
      <div class="availableModules displayFlex">
         <div class="pl-4"
               style="min-width: 350px;">
            <label class="checkbox moduleName mt-2">
               <input type="checkbox"
                     checked="checked"
                     disabled="disabled">
               <span class="displayFlex alignCenter">
                  Core
                  <i class="moduleHelpIcon help help material-icons tooltipped"
                        data-tooltip="DMLex Core allows you to model the basic entries-and-sense structure of a monolingual lexicographic resource.">help_outline</i>
               </span>
            </label>
            <label class="checkbox moduleName mt-2">
               <input type="checkbox"
                     checked="checked"
                     disabled="disabled">
               <span class="displayFlex alignCenter">
                  Controlled values
                  <i class="moduleHelpIcon help help material-icons tooltipped"
                        data-tooltip="DMLex Controlled Values Module extends DMLex Core to represent inventories of look-up values to be used as part-of-speech tags, usage label tags and others.">help_outline</i>
               </span>
            </label>
            <label class="checkbox moduleName mt-2">
               <input type="checkbox"
                     checked="checked"
                     disabled="disabled">
               <span class="displayFlex alignCenter">
                  Linking
                  <i class="moduleHelpIcon help help material-icons tooltipped"
                        data-tooltip="DMLex Linking Module extends DMLex Core and allows you to model various kinds of relations between entries, senses and other objects, including semantic relations such as synonymy and antonymy and presentational relations such as subentries and subsenses, both within a single lexicographic resource and across multiple lexicographic resources.">help_outline</i>              </span>
            </label>
            <label class="checkbox moduleName mt-2">
               <input type="checkbox"
                     checked={state.modules.includes("xlingual")}
                     name="xlingual"
                     onchange={onModuleCheckboxChange.bind(this, "xlingual")}>
               <span class="displayFlex alignCenter">
                  Crosslingual module
                  <i class="moduleHelpIcon help material-icons tooltipped"
                        data-tooltip="DMLex Crosslingual Module extends DMLex Core to model bilingual and multilingual lexicographic resources.">help_outline</i>
               </span>
            </label>
            <div id="xlingualSettings"
                  class="moduleSettings ml-12"
                  style={state.modules.includes("xlingual") ? '' : 'display: none;'}>
               <div class="selectedLangs">
                  <span each={languageCode in state.xlingual_langs}
                        class="chip">
                     {store.getLanguageName(languageCode)}
                     <i class="close material-icons"
                        onclick={onRemoveLanguageClick.bind(this, languageCode)}>close</i>
                  </span>
               </div>
               <div class="input-field">
                  <input type="text"
                        id="language"
                        autocomplete="off">
                  <label>Add translation language</label>
               </div>
            </div>
            <label class="checkbox moduleName mt-2">
               <input type="checkbox"
                     checked={state.modules.includes("annotation")}
                     name="annotation"
                     onchange={onModuleCheckboxChange.bind(this, "annotation")}>
               <span class="displayFlex alignCenter">
                  Annotation module
                  <i class="moduleHelpIcon help material-icons tooltipped"
                              data-tooltip="DMLex Annotation Module extends DMLex Core to allow the modelling of inline markup on various objects such as example sentences, including the modelling of collocations and corpus patterns.">help_outline</i>
               </span>
            </label>
            <label class="checkbox moduleName mt-2">
               <input type="checkbox"
                     checked={state.modules.includes("etymology")}
                     name="etymology"
                     onchange={onModuleCheckboxChange.bind(this, "etymology")}>
               <span class="displayFlex alignCenter">
                  Etymology module
                  <i class="moduleHelpIcon help material-icons tooltipped"
                              data-tooltip="DMLex Etymology Module extends DMLex Core to allow the modelling of etymological information in dictionaries.">help_outline</i>
               </span>
            </label>
            <div id="etymologySettings"
                  class="moduleSettings ml-12"
                  style={state.modules.includes("etymology") ? '' : 'display: none;'}>
               <div class="selectedLangs">
                  <span each={language in state.etymology_langs}
                        class="chip">
                     {language}
                     <i class="close material-icons"
                        onclick={onRemoveEtymologyLanguageClick.bind(this, language)}>close</i>
                  </span>
               </div>
               <div class="input-field">
                  <input type="text"
                        id="etymologyLanguage"
                        autocomplete="off"
                        onkeyup={onEtymologyLanguageKeyUp}>
                  <label>Add etymon language</label>
                  <span if={!state.isEtymologyLanguageValid}
                        class="helper-text red-text">Invalid language. Allowed characters: a-z, A-Z, 0-9, -</span>
                  <span class="helper-text">Add language and hit enter.</span>
               </div>
            </div>
         </div>
         <div class="modulesArrow">
            <i class="material-icons">chevron_right</i>
         </div>
      </div>
   </div>
   <div class="finalStructure positionRelative pl-8">
      <h3>Final entry structure</h3>
      <loading-overlay if={state.isLoading}/>
      <div class="pl-4"
            style="min-width: 250px;">
         <pre if={state.schema}><!--
         --><div each={(row, idx) in state.schema.split("\n")}
                  class="displayFlex"
                  style="color: {window.nvhStore.getColorByIndex(idx)};">
               {row}
               <i class="grey-text inlineBlock material-icons ml-2 tiny verticalMiddle help tooltipped"
                     data-tooltip="{state.elementDescription[row.split(":")[0].trim()]}">
                  help_outline
               </i>
            </div>
         </pre>
      </div>
   </div>


   <script>
       export default {
         state: {
            isLoading: true,
            modules: [],
            xlingual_langs: [],
            etymology_langs: [],
            isEtymologyLanguageValid: true,
            elementDescription: null,
            schema: null
         },

         onBeforeMount(){
            this.state.modules = this.props.modules || []
            this.state.xlingual_langs = this.props.xlingual_langs || []
            this.state.etymology_langs = this.props.etymology_langs || []
         },

         onMounted(){
            this.loadSchema()
            if(this.state.modules.includes("xlingual")){
               this.initLanguageAutocomplete()
            }
         },

         onBeforeUnmount(){
            this.state.loadSchemaRequest && this.state.loadSchemaRequest.abort()
         },

         onModuleCheckboxChange(moduleName, evt){
            let checked = evt.target.checked
            if(checked){
               this.state.modules.push(moduleName)
            } else {
               this.state.modules = this.state.modules.filter(m => m != moduleName)
            }
            this.loadSchema()
            if(moduleName == "xlingual" && checked){
               this.initLanguageAutocomplete()
            }
            this.callOnChange()
         },

         onRemoveLanguageClick(languageCode, evt){
            evt.stopPropagation()
            this.state.xlingual_langs = this.state.xlingual_langs.filter(l => l != languageCode)
            this.loadSchema()
            this.callOnChange()
         },

         onRemoveEtymologyLanguageClick(language, evt){
            evt.stopPropagation()
            this.state.etymology_langs = this.state.etymology_langs.filter(l => l != language)
            this.loadSchema()
            this.callOnChange()
         },

         onEtymologyLanguageKeyUp(evt){
            let language = evt.target.value.trim()
            if(language){
               if(evt.keyCode == 13){
                  if(this.state.isEtymologyLanguageValid){
                     if(!this.state.etymology_langs.includes(language)){
                        this.state.etymology_langs.push(language)
                        this.loadSchema()
                        this.callOnChange()
                     }
                     $("#etymologyLanguage").val("")
                  }
               } else {
                  let wasValid = this.state.isEtymologyLanguageValid
                  this.state.isEtymologyLanguageValid = !!language.match(/^[a-zA-Z0-9-]+$/)
                  if(wasValid != this.state.isEtymologyLanguageValid){
                     this.update()
                  }
               }
            }
         },

         callOnChange(){
            this.props.onChange && this.props.onChange(this.state.modules, this.state.xlingual_langs, this.state.etymology_langs)
         },

         initLanguageAutocomplete(){
            $("#language").autocomplete({
               data: this.store.data.siteconfig.langs.map(lang => {
                  return {
                     value: lang.code,
                     label: lang.lang
                  }
               }),
               onAutocomplete: language => {
                  if(!this.state.xlingual_langs.includes(language.value)){
                     this.state.xlingual_langs.push(language.value)
                     this.loadSchema()
                     this.callOnChange()
                  }
                  $("#language").val("")
               }
            })
         },

         loadSchema(){
            this.update({isLoading: true})
            this.state.loadSchemaRequest && this.state.loadSchemaRequest.abort()
            let modules = ["core", ...this.state.modules]
            if(!this.state.xlingual_langs.length){
               modules = modules.filter(module => module != "xlingual")
            }
            if(!this.state.etymology_langs.length){
               modules = modules.filter(module => module != "etymology")
            }
            this.state.loadSchemaRequest = this.store.DMLexToSchema(modules, this.state.xlingual_langs, this.state.etymology_langs)
                  .done(response => {
                     this.state.elementDescription = response.desc_dict
                     this.state.elements = response.elements
                     this.state.root = response.root
                     this.state.schema = window.structureEditorStore.jsonToNvh(response)
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     this.props.onSchemaChange && this.props.onSchemaChange({
                        elements: this.state.elements,
                        root: this.state.root,
                        schema: this.state.schema
                     })
                  })
         }
      }
   </script>

   <style type="scss">
      :host{
         min-height: 200px;
      }
      .availableModules{
         gap: 40px;
      }
      .modulesArrow{
         display: flex;
         align-items: center;
         gap: 20px;
         i{
            font-size: 100px;
            opacity: 0.1
         }
      }
      .moduleName{
         display: flex;
         align-items: center;
         font-size: 1.3rem;
         & > label{
            height: 25px;
         }
         .moduleHelpIcon{
            margin-left: 0.25em;
            opacity: 0.5;
            line-height: 25px;
            height: 25px;
            font-size: 17px;
            vertical-align: bottom;
         }
      }
      .finalStructure{
         .overlay{
            background-color: rgba(0, 0, 0, 0)
         }
      }
      .selectedLangs{
         max-width: 300px;
      }
   </style>
</nvh-schema>
