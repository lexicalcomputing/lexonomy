<structure-editor-item class={structureStore.data.editedElement == props.element ? "selected" : ""}
      draggable="true"
      ondragstart={onDragStart}
      ondragend={onDragEnd}
      onmousedown={onMouseDown}>
   <div if={props.element}
         class="structure-item-wrapper"
         style="padding-left: {props.element.indent * 30}px;">
      <div if={!structureStore.isParentMarkupElement(props.element.path)}
            class="structure-new-element-wrapper"
            onclick={window.stopEvtPropagation}
            style="width: {props.element.indent * 30 + 45}px">
         <i class="material-icons tiny"
               onclick={onAddElementClick}>add</i>
         <span></span>
      </div>
      <i if={props.element.name != structureStore.data.root}
               class="structure-drag-handle material-icons grey-text">drag_handle</i>
      <div class="valueWrapper positionRelative pr-2 {structureStore.data.editedElement == props.element ? "yellow lighten-3" : ""}"
            onclick={onEditClick}>
         <span class="structure-item-name"
               style="color: {getElementColor()};">
            {props.element.name}
         </span>
         <span class="pl-2 grey-text">
            [{store.const.ENTRY_TYPES[props.element.type] || props.element.type}]
         </span>
         <span if={props.element.min || props.element.max}
               class="pl-2">
            {getElementCountString()}
         </span>
         <span if={props.element.type == "string" && props.element.re}
               class="pl-2 monospace">
            /{props.element.re}/
         </span>
         <span if={props.element.type == "list" && props.element.values && props.element.values.length}
               class="pl-2">
            <trim-text text={props.element.values.join(", ")}
                  max=30/>
         </span>
         <span class="elementActions">
            <i class="material-icons tiny grey-text ml-2">edit</i>
            <i class="material-icons tiny grey-text ml-2"
                  onclick={onDeleteClick}>
               delete
            </i>
         </span>
      </div>
   </div>

   <script>
      export default{
         state: {
            target: null
         },

         onBeforeMount() {
            this.structureStore = window.structureEditorStore
         },

         onMouseDown(evt){
            this.state.target = evt.target
         },

         onDragStart(evt){
            if ($(".structure-drag-handle", this.root).first()[0].contains(this.state.target)) {
               setTimeout(() => {
                  // prevent DOM manipulation to fire ondragend event immediately after ondragstart
                  $(this.root).addClass("structure-dragged-element")
                  this.structureStore.startElementDragging(this.props.element)

               }, 0)
            } else {
               evt.preventDefault()
            }
            evt.stopPropagation()
         },

         onDragEnd(){
            $(this.root).removeClass("structure-dragged-element")
            this.structureStore.stopElementDragging()
         },

         onAddElementClick(evt){
            let element = {
               type: "string",
               parentElement: this.props.element
            }
            if(this.props.element.type == "markup"){
               element.max = 1
            }
            this.structureStore.startElementEditing(element)
         },

         onEditClick(){
            this.structureStore.startElementEditing(this.props.element)
         },

         onDeleteClick(evt){
            evt.stopPropagation()
            this.structureStore.removeElement(this.props.element)
            this.structureStore.stopElementEditing()
         },

         getElementColor(){
            let idx = Object.keys(this.structureStore.data.structure.elements).indexOf(this.props.element.path)
            return window.nvhStore.getColorByIndex(idx)
         },

         getElementCountString(){
            let min = this.props.element.min
            let max = this.props.element.max
            let str
            if(min > 0){
               if(max > 0){
                  if(min == max){
                     return `${min}×`
                  } else {
                     return `${min}–${max}×`
                  }
               } else {
                  return `at least ${min}×`
               }
            } else if(max > 0){
               return `at most ${max}×`
            }
            return ""
         }
      }
   </script>

   <style type="scss">
      :host{
         display: block;
         &.structure-dragged-element{
            opacity: 0.3;
         }
         &.selected{
            .elementActions{
               display: none
            }
         }
      }
      .structure-item-wrapper{
         display: flex;
         position: relative;
         &:hover{
            .structure-new-element-wrapper{
               opacity: 0.7;
            }
         }
      }
      .structure-item-name{
         font-size: 1.1em;
      }
      input{
         height: 22px!important;
         padding: 2px!important;
      }
      .valueWrapper{
         cursor: pointer;
         border-radius: 10px;
         padding-left: 5px;
         .elementActions{
            opacity: 0;
            position: absolute;
            right: -50px;
         }
         &:hover{
            background-color: whitesmoke;
            .elementActions{
               opacity: 1;
            }
         }
      }
      .structure-drag-handle{
         cursor: move;
         opacity: 0.5;
         &:hover{
            opacity: 1;
         }
      }
      .structure-new-element-wrapper{
         opacity: 0.4;
         position: absolute;
         color: lightgray;
         right: calc(100% + 25px);
         left: -20px;
         bottom: -11px;
         z-index: 100;
         height: 24px;
         &:hover{
            opacity: 1!important;
         }
         i{
            position: relative;
            display: inline-block;
            top: 4px;
            width: 20px;
            height: 20px;
            line-height: 17px;
            text-align: center;
            border-radius: 50%;
            border: 2px solid lightgray;
            transition: all 0.1s ease-in-out;
            z-index: 101;
            +span{
               content: " ";
               display: block;
               position: absolute;
               height: 2px;
               right: -50px;
               top: 14px;
               left: 19px;
               opacity: 0;
               transition: all 0.1s ease-in-out;
               background: rgb(211,211,211);
               background: linear-gradient(90deg, rgba(211,211,211,1) 0%, rgba(211,211,211,1) 75%, rgba(211,211,211,0) 100%);
            }
            &:hover{
               color: #fff;
               background-color: gray;
               border-color: gray;
               transform: scale(1.5);
               +span{
                  opacity: 1
               }
            }
         }
      }
   </style>

</structure-editor-item>
