<dict-list>
   <loading-overlay if={state.isLoading || dictData.isDictionaryListLoading}/>
   <template if={!dictData.isDictionaryListLoading}>
      <span class="buttons right">
         <a if={authData.authorized}
               href="#opendictionaries"
               class="btn">
            <i class="material-icons left">public</i>
            public dictionaries
         </a>
         <a href="#/make"
               class="btn waves-effect waves-light">
            <i class="material-icons left">add</i>
            create new dictionary
         </a>
      </span>
      <div if={dictData.dictionaryList.length}>
         <h1>Your dictionaries</h1>
         <div class="topBar">
            <span if={dictData.dictionaryList.length}
                  class="searchBox input-field">
                  <i class="material-icons prefix grey-text">search</i>
               <input id="searchBox"
                     oninput={onSearchInput}>
               <i onclick={onClearFilterClick}
                  class="material-icons clearFilterIcon grey-text clickable">close</i>
            </span>

            <label id="favoriteToggleWrapper"
                  class="onlyFavoritesChbWrapper"
                  class="checkbox"
                  style="display: none;">
               <input id="onlyFavoritesChb"
                     type="checkbox"
                     checked={state.showOnlyFavorites}
                     onclick={onOnlyFavoritesClick}/>
               <span>Only favorites</span>
            </label>

         </div>
         <table if={state.visibleDictionaries.length}
               class="highlight">
            <thead>
               <tr>
                  <th class="checkboxColumn"></th>
                  <th class="titleColumn">Title</th>
                  <!--th>Language</th-->
                  <th class="sizeColumn">Size</th>
                  <th class="actionColumn"></th>
               </tr>
            </thead>
            <tbody>
               <tr each={ (dict, idx) in state.visibleDictionaries }
                     id="r_{idx}"
                     class="{dict.selected ? 'selected' : ''}"
                     key={dict.id}>
                  <td>
                     <label if={dict.currentUserCanDelete}
                              class="checkbox">
                        <input id="chb_{idx}"
                              type="checkbox"
                              idx={idx}
                              checked={dict.selected}
                              onclick={onCheckboxClick}/>
                        <span></span>
                     </label>
                  </td>
                  <td class="dict">
                     <a href="#/{ dict.id }"
                           id="t_{idx}">{ dict.title }</a>
                     <span if={dict.shared} class="green white-text badge">
                        shared with me
                     </span>
                  </td>
                  <!--td class="dict-lang">
                     <template if={ dict.lang }>{ dict.lang }</template>
                  </td-->
                  <td class="dict-size grey-text">
                     { dict.size }
                  </td>
                  <td class="dict-actions">
                     <a if={ dict.currentUserCanEdit }
                           class="clickable"
                           data-dict-id={ dict.id }
                           title="edit dictionary"
                           onclick={ doEditDict.bind(this, dict.id) }>
                        <i class="material-icons">edit</i>
                     </a>
                     <a if={ dict.currentUserCanDelete }
                           class="clickable"
                           title="config dictionary"
                           onclick={ doConfigDict.bind(this, dict.id) }>
                        <i class="material-icons">settings</i>
                     </a>
                     <a  if={ dict.currentUserCanEdit }
                           class="clickable"
                           title="clone dictionary"
                           onclick={ doCloneDict.bind(this, dict.id) }>
                        <i class="material-icons">content_copy</i>
                     </a>
                     <a if={ dict.currentUserCanDelete }
                           class="clickable"
                           title="delete dictionary"
                           onclick={ doDeleteDict.bind(this, dict.id) }>
                        <i class="material-icons">delete</i>
                     </a>
                     <span>
                        <dict-favorite-toggle dict-id={dict.id}></dict-favorite-toggle>
                     </span>
                  </td>
               </tr>
            </tbody>
         </table>
         <div if={!state.visibleDictionaries.length}
               class="center"
               style="margin: 10vh auto;">
            <h1 class="grey-text lighten-2">Nothing found</h1>
         </div>
         <div id="deleteAllBox"
               class="deleteAllBox z-depth-5"
               if={state.selectedCount}>
               <div>
                  Delete selected dictionaries ({state.selectedCount})?
                  <button class="btn"
                        onclick={onDeleteSelectedClick}>
                     delete
                  </button>
                  <button class="btn btn-secondary"
                        onclick={onDeselectAll}>
                     cancel
                  </button>
               </div>

         </div>

      </div>
      <div if={!dictData.dictionaryList.length}
            class="grey-text center-align">
         <h1>no dictionaries</h1>
         <div>
            You have no dictionary yet. Create one using button below.
         </div>
         <br>
         <a href="#/make"
               class="btn waves-effect waves-light">
            <i class="material-icons left">add</i>
            create new dictionary
         </a>
      </div>
   </template>

   <style>
      .topBar{
         display: flex;
         align-items: center;
         flex-wrap: wrap;
      }
      .searchBox{
         max-width: 200px;
         display: inline-block;
         margin: 0 15px 0 0;
      }
      .searchBox input{
         padding-right: 27px;
      }
      .clearFilterIcon{
         position: absolute;
         right: 5px;
         top: 11px;
      }
      .onlyFavoritesChbWrapper{
         margin-left: 2rem;
      }
      .checkboxColumn,
      .sizeColumn,
      .actionColumn{
         width: 1px;
      }

      tr .checkbox input[type="checkbox"]+span{
         padding-left: 20px;
         height: 19px;
      }
      .dict .badge{
         margin-left: 10px;
         font-size: 0.8rem;
      }
      .dict-size {
         text-align: right;
         padding-right: 15px;
         white-space: nowrap;
      }
      .dict-actions{
         text-align: right;
         white-space: nowrap;
      }
      .dict-actions dict-favorite-toggle{
         vertical-align: initial;
      }
      table{
         margin-bottom: 90px;
      }
      table td{
         padding: 10px 10px;
      }
      tbody tr.selected{
         background-color: #fffde7 !important;
      }
      table .checkbox span{
         opacity: 0.2;
      }
      table .checkbox:hover span{
         opacity: 1;
      }
      table .checkbox input:checked + span{
         opacity: 1;
      }
      .deleteAllBox{
         text-align: center;
         position: fixed;
         bottom: 0;
         left: 0;
         right: 0;
         padding: 20px;
         background-color: white;
         font-size: 1.2rem;
         z-index: 9999;
      }
      .deleteAllBox button{
         margin-left: 20px;
      }
   </style>

   <script>
      export default {
         bindings: [["store", "dictionaryListChanged", "onDictionaryListChange"],
                    ["store", "dictionaryListLoadingChanged", "update"],
                    ["store", "favoriteChanged", "onFavoriteChanged"]],
         state: {
            isLoading: false,
            lastCheckedIdx: null,
            visibleDictionaries: [],
            selectedCount: 0,
            query: "",
            hasFavorite: false,
            showOnlyFavorites: false
         },

         onFavoriteChanged(){
            this.dictData.isPublicDictionaryListLoaded = false  // force to reload dictionary list
            this.refreshShowFavoriteToggle()
         },

         refreshShowFavoriteToggle(){
            if(this.authData.authorized){
               let hasFavorite = this.dictData.dictionaryList.findIndex(d => d.favorite) != -1
               $("#favoriteToggleWrapper").toggle(hasFavorite || this.state.showOnlyFavorites)
               !hasFavorite && localStorage.setItem("showOnlyFavorites_open", 0)
            }
         },

         onDictionaryListChange(){
            this.filter()
         },

         onSearchInput(evt){
            this.state.query = evt.target.value
            this.filter()
         },

         onClearFilterClick(evt){
            if($('#searchBox').val()){
               $('#searchBox').val("")
               this.state.query = ""
               this.filter()
            }
         },

         onCheckboxClick(evt){
            let idx = $(evt.currentTarget).attr("idx")
            this.toggleLineSelection(idx, evt.shiftKey)
            this.state.lastCheckedIdx = idx
         },

         onOnlyFavoritesClick(evt){
            this.state.showOnlyFavorites = $("#onlyFavoritesChb").is(":checked")
            localStorage.setItem("showOnlyFavorites_user", this.state.showOnlyFavorites ? 1 : 0)
            this.filter()
         },

         toggleLineSelection(idx, shiftKey){
            let selected = $("#chb_" + idx).prop("checked")
            let fromIdx = shiftKey ? Math.min(idx, this.state.lastCheckedIdx) : idx
            let toIdx = shiftKey ? Math.max(idx, this.state.lastCheckedIdx) : idx
            for(let i = fromIdx; i <= toIdx; i++){
               this.state.visibleDictionaries[i].selected = selected
            }
            this.update()
         },

         onDeleteSelectedClick(){
            if (confirm("Are you sure you want to delete selected dictionaries? You will not be able to undo this.")) {
               this.update({isLoading: true})
               let toDelete = this.state.visibleDictionaries.filter(dict => dict.selected).map(dict => dict.id)
               this.deleteNextSelected(toDelete)
            }
         },

         filter(){
            this.dictData.dictionaryList.forEach(c => {
               delete c.h_title
            })
            this.state.visibleDictionaries = this.dictData.dictionaryList
            if(this.state.showOnlyFavorites){
               this.state.visibleDictionaries = this.state.visibleDictionaries.filter(d => d.favorite)
            }
            if(this.state.query !== ""){
               let sortResult = FuzzySort.go(this.state.query, this.state.visibleDictionaries, {
                  key: "id",
                  keys: ["title"]
               })
               this.state.visibleDictionaries = sortResult.map(fs => {
                  fs.obj.h_title = FuzzySort.highlight(fs[0], '<b class="red-text">', "</b>")
                  fs.obj.score = fs.score
                  return fs.obj
               }).sort((a, b) => {
                  return (a.score == b.score) ? a.title.localeCompare(b.title, undefined, {numeric: true}) : Math.sign(b.score - a.score)
               })
            }
            this.update()
            this.highlightOccurrences()
         },

         highlightOccurrences(){
            let el, row
            this.state.visibleDictionaries.forEach((c, idx) => {
               row = this.$(`#r_${idx}`)
               if(row){
                  el = this.$(`#t_${idx}`)
                  el.innerHTML = c.h_title ? c.h_title : el.innerHTML.replace(/<b class="red-text">|<\/b>/g, '')
               }
            }, this)
         },

         deleteNextSelected(toDelete){
            if(toDelete.length){
               this.store.deleteDictionary(toDelete.pop())
                     .always(this.deleteNextSelected.bind(this, toDelete))
            } else {
               this.state.visibleDictionaries = this.dictData.dictionaryList
               this.state.isLoading = false
               this.filter()
            }
         },

         onDeselectAll(){
            this.state.visibleDictionaries.forEach(dict => {dict.selected = false})
            this.update()
         },

         doEditDict(dictId) {
            route(dictId + "/edit")
         },

         doConfigDict(dictId) {
            route(dictId + "/config")
         },

         doCloneDict(dictId) {
            this.update({isLoading: true})
            this.store.cloneDictionary(dictId)
         },

         doDeleteDict(dictId) {
            var dictTitle = this.store.getDictionary(dictId).title
            if (confirm("Are you sure you want to delete dictionary " + dictTitle + "? You will not be able to undo this.")) {
               this.update({isLoading: true})
               this.store.deleteDictionary(dictId)
                     .always(() => {this.update({isLoading: false})})
            }
         },

         onBeforeUpdate(){
            this.state.selectedCount = this.state.visibleDictionaries.filter(dict => dict.selected).length
            this.state.hasFavorite = this.dictData.dictionaryList.findIndex(d => d.favorite) != -1
         },

         onUpdated(){
            this.refreshShowFavoriteToggle()
         },

         onBeforeMount() {
            this.state.showOnlyFavorites = localStorage.getItem("showOnlyFavorites_user") == 1
            if(this.dictData.isDictionaryListLoaded){
               this.state.visibleDictionaries = this.dictData.dictionaryList
               this.state.hasFavorite = this.dictData.dictionaryList.findIndex(d => d.favorite) != -1
            } else {
               this.store.loadDictionaryList()
            }
         },

         onMounted(){
            if(this.dictData.isDictionaryListLoaded){
               this.state.showOnlyFavorites && this.filter()
               this.refreshShowFavoriteToggle()
            }
         }
      }
   </script>
</dict-list>
