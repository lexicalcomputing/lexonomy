<dict-config-url>
   <loading-overlay if={state.isSaving}/>
   <h1 class="pageTitle">Change URL</h1>
   <div class="row">
      <label for="url">Current URL</label>
      <div class="mb-4">
         <span>{dictData.siteconfig.baseUrl}{dictData.dictId}</span>
      </div>
   </div>
   <div class="row">
      <label for="url">New URL</label>
      <div class="displayFlex alignBaseline">
         <span id="baseUrl">{dictData.siteconfig.baseUrl}</span>
         <span>
            <input id="url"
                  type="text"
                  class="validate inlineBlock"
                  required
                  minlength="5"
                  pattern="[a-zA-Z0-9\-_]*"
                  oninput={onNewUrlInput}
                  style="max-width: 300px;"/>
         </span>
         <span if={state.isCheckingUrl}
               class="ml-2">
            <i class="material-icons spin grey-text">donut_large</i>
         </span>
         <small if={!state.isCheckingUrl && state.isUrlInvalid}
               class="red-text ml-2">
            {state.urlError}
         </small>
      </div>
      <div class="input-field mt-0">
         <span class="helper-text">This will be your dictionary's address on the web. Minimum length: 5 characters. Allowed: letters, numbers, - and _</span>
      </div>
   </div>
   <dict-config-buttons save-data={saveData}
         btn-class={state.isUrlInvalid || state.isCheckingUrl ? "disabled" : ""}
         label="Change"></dict-config-buttons>

   <script>
      export default {
         state: {
            isCheckingUrl: false,
            isUrlInvalid: true,
            urlError: ""
         },

         saveData() {
            let url = $("#url", this.root).val()
            this.update({isSaving: true})
            this.store.changeDictionaryUrl(url)
                  .done(response => {
                     if (response.success) {
                        route("/" + url)
                     }
                  })
                  .always(response =>{
                     this.update({isSaving: false})
                  })
         },

         onNewUrlInput(evt){
            if(evt.target.value.length < 5){
               this.state.isUrlInvalid = true
               this.state.urlError = "URL too short"
            } else if(!/^[a-zA-Z0-9-_]{5,}$/.test(evt.target.value)){
               this.state.isUrlInvalid = true
               this.state.urlError = "Invalid character in URL"
            } else {
               this.state.isCheckingUrl = true
               this.store.isDictionaryUrlTaken(evt.target.value)
                     .done(response => {
                        this.update({
                           isUrlInvalid: response.success,
                           isCheckingUrl: false,
                           urlError: "URL already taken"
                        })
                     })
            }
            this.update()
         }
      }
   </script>
</dict-config-url>
