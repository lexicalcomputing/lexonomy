<dict-config-kontext>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <h1 class="pageTitle">KonText connection</h1>
   <dict-configuration-issues config-id="kontext"/>
   <div class="row">
      <div class="input-field">
         <input value={ state.data.url }
               id="kontext_url"
               type="text"/>
         <label for="kontext_url">KonText URL</label>
         <span class="helper-text">The URL of the KonText installation where external links should point. Defaults to <tt>https://www.clarin.si/kontext/</tt>. Do not change this unless you are using a local installation of KonText.</span>
      </div>
   </div>
      <div class="row">
         <div class="input-field">
            <input data-selected-corpus={ state.data.corpus }
                  type="text"
                  id="corpus"
                  placeholder="Type to search in the list of corpora"
                  class="autocomplete"
                  placeholder="Retrieving available corpora from Sketch Engine, please wait...">
            <label for="corpus">Corpus name</label>
            <span class="helper-text">Select a Sketch Engine corpus from the list of corpora available to you.</span>
            <span class="helper-text"
                  id="corpusInfo"
                  style="display: none"></span>
         </div>
      </div>
      <div class="row">
         <div class="input-field">
            <input value={ state.data.concquery}
                  id="concquery"
                  type="text" />
            <label for="concquery">Concordance query</label>
            <span class="helper-text">The CQL query that will be used to obtain concordance from KonText. You can use placeholders for elements in the form of '%(element)', e.g. '[lemma="%(headword)"]'. If left empty the 'simple' query type will be used as configured for the respective corpus. Please note that you cannot use CQL syntax with default attribute because it is not specified.</span>
         </div>
      </div>
      <div class="row">
         <div class="input-field">
            <element-select id="searchElements"
                  riot-value={state.data.searchElements}
                  multiple={true}/>
            <label for="searchElements">Additional search elements</label>
            <span class="helper-text">You can select any textual elements here whose content you would like to search for in KonText. A menu will be displayed next to all these elements like for the root entry element.</span>
         </div>
      </div>
   <div class="row">
      <h2>Examples</h2>
   </div>
   <div class="row">
      <div class="input-field">
         <element-select id="container"
               riot-value={state.data.container}
               show-empty-value={true}
               empty-value="(not set)"/>
         <label for="container">Example container</label>
         <span class="helper-text">Select the element which should wrap each individual example. When you pull example sentences automatically from a corpus, Lexonomy will insert one of these elements for each example sentence.</span>
      </div>
   </div>
   <dict-config-buttons save-data={saveData}></dict-config-buttons>


   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            data: {
               url: "https://www.clarin.si/kontext/",
               container: "",
               searchElements: []
            }
         },

         onMounted() {
            this.store.loadDictionaryConfig("kontext")
                  .done(function(response) {
                     Object.assign(this.state.data, response.content)
                     M.updateTextFields()
                     $("#corpus").autocomplete({data: {}})
                     $("#corpus").data("corpora", {})
                     if (this.state.data.corpus != "") {
                        $("#corpus").data("selected-corpora", this.state.data.corpus)
                     }
                     this.store.loadKontextCorpora()
                           .done(function(response) {
                              let corpusList = response.corpus_list.map(corpus => {
                                 return {
                                    value: corpus.corpus_id,
                                    label: corpus.name,
                                    info: corpus.size_info
                                 }
                              })
                              $("#corpus").autocomplete({
                                 data: corpusList,
                                 onAutocomplete: corpus => {
                                    $("#corpus").attr("corpname", corpus.value)
                                    this.refreshCorpusNote(corpus)
                                 }
                              })
                              let selectedCorpus = this.state.data.corpus && corpusList.find(corpus => corpus.value == this.state.data.corpus)
                              if(selectedCorpus){
                                 $("#corpus").val(selectedCorpus.label)
                                       .attr("corpname", selectedCorpus.value)
                                 this.refreshCorpusNote(selectedCorpus)
                              }
                           }.bind(this))
                  }.bind(this))
                  .always(() => {
                     this.update({isLoading: false})
                     $("select").formSelect()
                     M.updateTextFields()
                  })
         },

         getConfigData() {
            return {
               url: $("#kontext_url").val(),
               corpus: $("#corpus").attr("corpname"),
               concquery: $("#concquery").val(),
               searchElements: $("#searchElements select").val(),
               container: $("#container select").val()
            }
         },

         saveData() {
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("kontext", this.getConfigData())
                  .always(() => this.update({isSaving: false}))
         },

         refreshCorpusNote(corpus){
            if(!corpus){
               $("#corpusInfo").hide()
            } else {
               $("#corpusInfo").html(`Currently selected corpus: ${corpus.value}`)
                     .show()
            }
         }
      }
   </script>


   <style>
      .input-field{
         max-width: 700px;
      }
   </style>
</dict-config-kontext>
