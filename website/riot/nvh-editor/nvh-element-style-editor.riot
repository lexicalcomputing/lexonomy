<nvh-element-style-editor>
   <div if={state.show}
         class="nvh-wrapper z-depth-2 grey lighten-4">
      <div class="nvh-header grey lighten-3">
         <i class="material-icons clickable mr-auto"
               onclick={onShowPrevElementClick}
               style={state.prevElementName ? '' : 'visibility:hidden'}>chevron_left</i>
         <element-select riot-value={state.elementName}
               on-change={onElementChange}/>
         <i class="material-icons clickable ml-auto"
               onclick={onShowNextElementClick}
               style={state.nextElementName ? '' : 'visibility:hidden'}>chevron_right</i>
         <i class="material-icons clickable ml-2"
               onclick={onCloseStyleEditor}>close</i>
      </div>
      <div if={dictData.config.formatting.customCss}
            class="message messageInfo borderBottom">
         Custom styles applied. You can change it <a href="#/{dictData.dictId}/config/formatting">here</a>
      </div>
      <element-style-options element-name={state.elementName}
            class="p-2"
            on-change={onStyleChange}/>
      <div class="p-2 borderTop">
         <div style="padding-left: 5px;">
            Go to <a href="#{dictData.dictId}/config/formatting">formatting settings</a>.
         </div>
      </div>
   </div>


   <script>
      export default{
         bindings: [["nvhStore", "openElementStyleEditor", "onOpenStyleEditor"],
                    ["nvhStore", "closeElementStyleEditor", "onCloseStyleEditor"],
                    ["nvhStore", "startElementEditing", "onCloseStyleEditor"]],

         state: {
            show: false,
            elementName: null
         },

         onBeforeMount(){
            this.nvhStore = window.nvhStore
            this.nvhData = this.nvhStore.data

            this.gutterOptions = [
               ["", "None"],
               ["disk", "Round bullet"],
               ["square", "Square bullet"],
               ["diamond", "Diamond bullet"],
               ["arrow", "Arrow bullet"],
               ["indent", "Indent"],
               ["hanging", "Hanging indent"],
               ["sensenum1", "Sense number 1, 2, 3..."],
               ["sensenum2", "Sense number a, b, c..."],
               ["sensenum3", "Sense number i, ii, iii..."],
               ["sensenum0", "Sense number I, II, III..."]
            ]
         },

         onBeforeUnmount(){
            document.removeEventListener('click', this.handleClickOutside)
         },

         onBeforeUpdate(){
            let elementList = Object.keys(this.nvhData.structure.elements)
            let actualElementIdx = elementList.indexOf(this.state.elementName)
            this.state.prevElementName = elementList[actualElementIdx - 1]
            this.state.nextElementName = elementList[actualElementIdx + 1]
         },

         onUpdated(){
            if(this.state.show){
               let input = $(".nvh-header input")
               let width = window.getInputValueWidth(input[0])
               input.css("width", `min(calc(${width}px + 1.5rem + 5px), 300px)`) // left + right padding of the input field
            }
         },

         onOpenStyleEditor(elementName){
            this.update({elementName: elementName})
           if(!this.state.show){
               this.open()
            }
         },

         onCloseStyleEditor(params){
            this.close()
         },

         onElementChange(elementName){
            this.changeElement(elementName)
         },

         onShowPrevElementClick(evt){
            evt.stopPropagation()
            this.changeElement(this.state.prevElementName)
         },

         onShowNextElementClick(evt){
            evt.stopPropagation()
            this.changeElement(this.state.nextElementName)
         },

         changeElement(elementName){
            this.update({elementName: elementName})
         },

         onStyleChange(){
            this.nvhStore.saveStyle()
         },

         open(){
           if(!this.state.show){
               this.update({ show: true})
               $(".highlight").removeClass("highlight")
               $(".nvh-focusable-option", this.root).first().addClass("highlight")
               let coords = JSON.parse(localStorage.getItem("styleEditorPosition"))
               if(coords){
                  $(this.root).css({
                     left: coords.left,
                     top: coords.top
                  })
               } else {
                  this.updatePosition()
               }
               window.makeElementDraggable(this.root, $(".nvh-header", this.root)[0])
               document.addEventListener('click', this.handleClickOutside) // it has to be after dragElement()
            }
         },

         close(){
           if(this.state.show){
               localStorage.setItem("styleEditorPosition", JSON.stringify({
                  top: $(this.root).css("top"),
                  left: $(this.root).css("left")
               }))
               this.update({show: false})
               document.removeEventListener('click', this.handleClickOutside)
            }
         },

         handleClickOutside(evt){
           if (!this.root.contains(evt.target)
                  && evt.clientY >= 0
                  && evt.clientX >= 0
                  && evt.clientX <= window.innerWidth
                  && evt.clientY <= window.innerHeight){
               this.close()
            }
         },

         updatePosition(){
            let windowHeight = $(window).height()
            let windowWidth = $(this.root).width()
            let editorOffsetLeft = $("nvh-editor")[0].getBoundingClientRect().left
            let top = Math.max(10, (Math.round(windowHeight / 2)) - 240) //center vertically
            let left = Math.max(10, Math.round(editorOffsetLeft - windowWidth))
            $(this.root).css({
               left: left + "px",
               top: top + "px"
            })
         },
      }
   </script>

   <style type="scss">
      :host{
         position: fixed;
         z-index: 999;
      }
      .nvh-header{
         display: flex;
         align-items: center;
         border-bottom: 1px solid grey;
         padding: 10px 10px 5px;
         cursor: move;
         .select-wrapper{
            input{
               font-size: 1.1em;
               border: none;
               height: 1.5rem;
               padding: 2px 20px 2px 5px;
               margin-bottom: 0px;
            }
         }
      }
      element-style-options{
         display: block;
      }
   </style>

</nvh-element-style-editor>
