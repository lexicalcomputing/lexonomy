<nvh-editor-edit-item id="nvh-item-{props.element.id}"
      class="nvh-editor-item nvh-editor-el-{window.idEscape(props.element.path)} {props.readOnly ? 'nvh-read-only' : ''} {!props.readOnly || props.allowDnd ? 'nvh-allow-dnd' : ''}"
      draggable="true"
      ondragstart={onDragStart}
      ondragend={onDragEnd}
      onmousedown={onMouseDown}>
   <div class="nvh-item {props.element.focused ? 'nvh-focused' : ''}">
      <span class="nvh-wrapper">
         <i if={props.element.name != nvhData.rootElement}
               class="nvh-drag-handle material-icons grey-text">drag_handle</i>
         <span class="nvh-label pointer"
               onclick={!props.readOnly && onLabelClick}
               style="color: {state.labelColor};">
            <nvh-editor-new-element-button if={!props.readOnly}
                  element={props.element}/>
            <span if={props.element.isValid}
                  class="nvh-bullet"
                  style="color: {state.labelColor};"></span>
            <span if={!props.element.isValid}
                  class="nvh-warning pulse tooltipped"
                  data-tooltip={props.element.warnings.join("<br>")}
                  style="background-color: {state.labelColor};">!</span>
            {store.getElementDisplayedName(props.element.path)}{props.element.value ? ": " : ""}
            <nvh-plugin-buttons if={!props.readOnly && state.config.type}
                  element={props.element}/>
            <i if={props.element.children.length && !props.readOnly}
                  class="nvh-collapse-toggle material-icons clickable noSelect"
                  onclick={onCollapseToggleClick}
                  style="transform: rotate({props.element.collapsed ? 0 : 90}deg);">chevron_right</i>
         </span>

         <span class="nvh-collapsed-value grey-text pointer"
               onclick={onCollapseToggleClick}
               style={props.element.collapsed ? '' : 'display: none;'}>{getCollapsedValue()}</span>

         <span class="nvh-value"
               style={props.element.collapsed ? 'display: none;' : ''}>
            <span if={!props.element.edit}
                  class="nvh-readonly-value-wrapper">
               <span class="nvh-readonly-value pointer"
                     onmousedown={!props.readOnly && onValueMouseDown}>
                  <raw-html content={getReadOnlyValue()}/>
               </span>
            </span>
            <nvh-item-value-editor if={props.element.edit}
                  element={props.element}/>
         </span>
         <span if={!props.readOnly && state.config.type && !props.element.edit}
               class="nvh-value-icons displayInlineFlex">
            <i if={nvhStore.isElementEditAllowed(props.element)}
                  class="pointer material-icons tiny"
                  onmousedown={onValueMouseDown}>edit</i>
            <i if={nvhStore.isElementDuplicationAllowed(props.element)}
                  class="pointer material-icons tiny"
                  onclick={onDuplicateElementClick}>content_copy</i>
            <i if={nvhStore.isElementRemovalAllowed(props.element)}
                  class="pointer material-icons tiny"
                  onclick={onRemoveElementClick}>delete</i>
         </span>
      </span>
      <nvh-dnd-zone element={props.element}
            position=0/>
      <div if={props.element.children.length}
            class="nvh-children"
            style={props.element.collapsed ? 'display: none;' : ''}>
         <template each={(child, idx) in props.element.children}
               if={nvhStore.isElementViewable(child)}
               key={child.id}>
            <nvh-editor-edit-item element={child}
                  read-only={props.readOnly}
                  allow-dnd={props.allowDnd}/>
            <nvh-dnd-zone element={props.element}
                  position={idx + 1}/>
         </template>
      </div>
   </div>

   <script>
      export default{
         bindings: [["nvhStore", "elementCollapsedChanged", "onElementCollapsedChanged"],
                    ["nvhStore", "updateElements", "onUpdateElements"]],

         state: {
            style: {},
            config: {}
         },

         onBeforeMount(){
            this.nvhStore = window.nvhStore
            this.nvhData = this.nvhStore.data
            this.state.config = this.nvhStore.getElementConfig(this.props.element.path) || {}
            this.state.labelColor = this.nvhStore.getElementColor(this.props.element.path)
         },

         onUpdateElements(elementList){
            elementList.includes(this.props.element) && this.update()
         },

         onMouseDown(evt){
            this.state.target = evt.target
         },

         onElementCollapsedChanged(element){
            if(element == this.props.element){
               $(".nvh-collapse-toggle", this.root).first().css("transform", element.collapsed ? 'rotate(0deg)' : 'rotate(90deg)')
               $(".nvh-children", this.root).first().slideToggle(150)
               $(".nvh-collapsed-value", this.root).first().fadeToggle(element.collapsed ? 150 : 0)
               $(".nvh-value", this.root).first().fadeToggle(element.collapsed ? 0 : 150)
            }
         },

         onDragStart(evt){
            if ($(".nvh-drag-handle", this.root).first()[0]?.contains(this.state.target)) {
               setTimeout(() => {
                  // prevent DOM manipulation to fire ondragend event immediately after ondragstart
                  $(this.root).addClass("nvh-dragged-element")
                  this.nvhStore.startElementDragging(this.props.element)

               }, 0)
            } else {
               evt.preventDefault()
            }
            evt.stopPropagation()
         },

         onDragEnd(){
            $(this.root).removeClass("nvh-dragged-element")
            this.nvhStore.stopElementDragging()
         },

         onLabelClick(evt){
            if(!evt.target.classList.contains("nvh-collapse-toggle")){
               if(!this.props.element.edit){
                  if(!this.props.element.focused){
                     this.nvhStore.focusElement(this.props.element)
                  }
                  setTimeout(() => {
                     // let riot to update DOM first
                     this.nvhStore.trigger("openContextMenu")
                  }, 0)
               }
            }
         },

         onDuplicateElementClick(evt){
            evt.stopPropagation()
            this.nvhStore.duplicateElement(this.props.element)
         },

         onRemoveElementClick(evt){
            evt.stopPropagation()
            this.nvhStore.removeElement(this.props.element)
         },

         onCollapseToggleClick(evt){
            this.nvhStore.toggleElementCollapsed(this.props.element)
         },

         onValueMouseDown(evt){
            // timeout used in case the user edited the markup of an element and editing
            //  another element would cause the markup not to be saved
            setTimeout(() => {
               this.nvhStore.startElementEditing(this.props.element)
            }, 0)
         },

         getReadOnlyValue(){
            let createReplaceString = (childPath, find, child) => {
               let tooltip = child.children.filter(element => element.value !== "")
                     .map(element => `${window.store.getElementDisplayedName(element.path)}: ${element.value}`)
                     .join("<br>")
               let color = this.nvhStore.getElementColor(childPath)
               return `<span class="${tooltip ? 'tooltipped': ''}" data-tooltip="${tooltip}" style="border-bottom: 1px solid ${color}; background-color: ${color}20;">${find}</span>`
            }
            let value = this.store.stringifyElementValue(this.props.element.value, this.state.config.type)
            return this.nvhStore.replaceMarkupOccurrences(value, this.props.element, createReplaceString)
         },

         getCollapsedValue(){
            return shortenText(this.nvhStore.getElementList(this.props.element)
                  .slice(0, 10)
                  .map(child => child.value)
                  .filter(v => !!v)
                  .map(v => {return window.shortenText(v, 20)})
                  .join(" | "), 100)
         }
      }
   </script>


   <style type="scss">
      :host{
         display: block;
         &.nvh-dragged-element{
            opacity: 0.3
         }
         &.nvh-read-only{
            .pointer {
               cursor: default;
            }
         }
         &.nvh-allow-dnd{
            .nvh-wrapper:hover{
               background-color: whitesmoke;
               .nvh-drag-handle{
                  cursor: move;
                  opacity: 0.3;
                  &:hover{
                     opacity: 1;
                  }
               }
               .nvh-collapse-toggle{
                  opacity: 0.6;
                  &:hover{
                     opacity: 1;
                  }
               }
            }
         }
      }
      .nvh-item {
         position: relative;
         .nvh-editor-item{
            margin-left: 15px;
            margin-right: 5px;
         }
      }
      .nvh-focused > .nvh-wrapper{
         &:hover{
            background-color: #f8ed86;
         }
         .nvh-label{
            text-shadow: 0 0 2px #fff, 0 0 4px #fff;
         }
      }
      .nvh-wrapper{
         display: inline-flex;
         border-radius: 10px;
         white-space: nowrap;
         align-items: stretch;
         position: relative;
         &:hover{
            .nvh-value-icons{
               opacity: 1;
            }
         }
         & > * {
            min-height: 24px;
            line-height: 24px;
         }
         .nvh-value-icons{
            position: absolute;
            left: 100%;
            top: 3px;
            height: 24px;
            gap: 10px;
            padding-left: 15px;
            opacity: 0;
            i{
               opacity: 0.3;
               transition: all 0.1s ease-in-out;
               &:hover{
                  transform: scale(1.5);
                  opacity: 0.5;
               }
            }
         }
      }
      .nvh-item-value-editor{
         padding: 5px;
      }
      .nvh-drag-handle{
         opacity: 0;
         vertical-align: middle;
         position: absolute;
         left: -24px;
         top: 1px;
         z-index: 500;
      }
      .nvh-bullet{
         display: inline-block;
         border: 4px solid;
         margin-left: 2px;
         margin-right: 5px;
         border-radius: 2px;
      }
      .nvh-warning{
         display: inline-block;
         font-weight: bold;
         color: #fff;
         width: 18px;
         height: 18px;
         line-height: 18px;
         margin-right: 4px;
         border-radius: 50%;
         text-align: center;
         z-index: 100;
      }
      .nvh-label{
         font-size: 14px;
         margin-right: 5px;
         position: relative;
         z-index: 300;
      }
      nvh-plugin-buttons{
         vertical-align: middle;
         display: inline-block;
         height: 22px;
         line-height: 22px;
      }
      .nvh-readonly-value-wrapper{
         display: inline-flex;
         align-items: flex-start;
         padding-right: 5px;
      }
      .nvh-collapse-toggle{
         line-height: 20px;
         height: 20px;
         vertical-align: middle;
         transition: transform 0.15s;
         opacity: 0.3;
         color: grey;
      }
      .nvh-collapsed-value{
         font-size: 14px;
      }
      .nvh-value {
         position: relative;
         flex: 1;
         .nvh-readonly-value{
            white-space: pre-wrap;
            &:hover{
               text-shadow: 0px 0px black;
               color: #000;
            }
         }
      }
      .nvh-children{
         padding-left: 15px;
      }
      .raw-html {
         display: inline-block;
      }
      nvh-editor-new-element-button{
         opacity: 0.4;
         &:hover{
            opacity: 1
         }
      }
      .nvh-wrapper:hover nvh-editor-new-element-button{
         opacity: 0.7;
      }

   </style>
</nvh-editor-edit-item>
