<structure-editor class="positionRelative">
   <div class="displayFlex">
      <div>
         <div class="structure-items">
            <template each={(element, idx) in getElementList()}>
               <structure-editor-item element={element}
                     indent={element.indent}/>
               <structure-dnd-zone element={element}/>
            </template>
         </div>

         <button if={!structureStore.data.editedElement}
               class="btn btn-primary btn-floating tooltipped mt-4 ml-12 {!Object.keys(structureStore.data.structure.elements).length ? 'pulse' : ''}"
               data-tooltip="Add new element"
               onclick={onAddClick}>
            <i class="material-icons">add</i>
         </button>
         <!--button if={!structureStore.data.editedElement}
               class="btn btn-primary btn-floating mt-4 ml-12"
               data-target="importMenu">
            <i class="material-icons">more_horiz</i>
         </button>
         <ul id="importMenu"
               class="dropdown-content">
            <li onclick={onImportFromSimpleClick}>
               <a>
                  Import from Simple settings
               </a>
            </li>
            <li if={structureStore.data.custom_NVHSchema}
                  onclick={onImportFromCustomClick}>
               <a>
                  Import from Custom settings
               </a>
            </li>
         </ul-->

         <div class="structure-delete-zone ml-auto mt-6 grey-text"
               ondragenter={onDeleteZoneDragEnter}
               ondragleave={onDeleteZoneDragLeave}
               ondragover={onDragOver}
               ondrop={onDeleteZoneDrop}
               style="display: none;">
            <i class="material-icons">delete</i>
            <span class="structure-delete-zone-text">
               drag here to delete
            </span>
         </div>
      </div>
      <div if={structureStore.data.editedElement}
            class="grey lighten-4 p-6 structureForm"
            style="min-width: 400px;">
         <div class="displayFlex alignCenter">
            <h4 class="ml-0">
               {structureStore.data.editedElement.name ? "Update element" : "Create new element"}
            </h4>
            <button class="btn btn-floating btn-flat ml-auto"
                  onclick={onEditCancelClick}>
               <i class="material-icons grey-text">close</i>
            </button>
         </div>
         <div class="input-field">
            <input id="name"
                  class={state.errors.name ? "invalid" : ""}
                  oninput={onNameInput}
                  value={structureStore.data.editedElement.name}
                  type="text">
            <label for="name">Element name</label>
            <span class="helper-text"
                  data-error={state.errors.name}></span>

         </div>
         <div class="input-field"
               style="max-width: 130px;">
            <select id="type"
                  onchange={onTypeChange}>
               <option each={obj in Object.entries(structureStore.const.types)}
                     selected={obj[0] == structureStore.data.editedElement.type}
                     value={obj[0]}>{obj[1]}</option>
            </select>
            <label>Type</label>
         </div>

         <div class="displayFlex" style="gap: 20px;">
            <div class="input-field inlineBlock"
                  style="max-width: 50px;">
               <input id="min"
                     value={structureStore.data.editedElement.min}
                     min=0
                     type="number">
               <label for="min">
                  Min
                  <span class="hint tooltipped"
                        data-tooltip="The minimum number of elements that each entry must contain.">
                     <i class="material-icons">help</i>
                  </span>
               </label>
            </div>

            <div class="input-field"
                  style="max-width: 50px;">
               <input id="max"
                     value={structureStore.data.editedElement.max}
                     min=1
                     type="number">
               <label for="max">
                  Max
                  <span class="hint tooltipped"
                        data-tooltip="The maximum number of elements that each entry must contain.">
                     <i class="material-icons">help</i>
                  </span>
               </label>
            </div>
         </div>

         <div if={structureStore.data.editedElement.type == "string"}
               class="input-field">
            <input id="re"
                  value={structureStore.data.editedElement.re}
                  type="text">
            <label for="re">
               Regular expression
               <span class="hint tooltipped"
                     data-tooltip="Entry editor will allow to save only values matching the regular expression.">
                  <i class="material-icons">help</i>
               </span>
            </label>
         </div>

         <div if={["string", "int"].includes(structureStore.data.editedElement.type)}
               class="input-field">
            <input id="values"
                  value={structureStore.data.editedElement.values}
                  type="text">
            <label for="values">
               Values
               <span class="hint tooltipped"
                     data-tooltip="User will only be able to select values from this list.">
                  <i class="material-icons">help</i>
               </span>
            </label>
         </div>
         <div class="center-align">
            <button class="btn {state.errors.name ? 'disabled' : ''}"
                  onclick={onEditOkClick}>ok</button>
         </div>
      </div>
   </div>

   <script>
      export default{
         bindings: [["structureStore", "elementChanged", "update"],
                    ["structureStore", "onDndStart", "onDndStart"],
                    ["structureStore", "onDndStop", "onDndStop"]],


         state: {
            showNewButton: true,
            errors: {}
         },

         onBeforeMount(){
            this.structureStore = window.structureEditorStore
         },

         onMounted(){
            document.addEventListener("click", this.onDocumentClick)
            $("select", this.root).formSelect()
         },

         onBeforeUnmount(){
            document.removeEventListener("click", this.onDocumentClick)
         },

         onBeforeUpdate(){
            this.state.showNewButton = !Object.values(this.structureStore.data.structure.elements).filter(e => e.edit).length
         },

         onUpdated(){
            $("select", this.root).formSelect()
            $("input", this.root).first().focus()
         },

         onNameInput(evt){
            let oldError = this.state.errors.name
            this.state.errors.name = ""
            if(!evt.target.value){
               this.state.errors.name = "Please, enter element name."
            } else if(Object.entries(this.structureStore.data.structure.elements).find(obj => {
               return obj[0] == evt.target.value && obj[1] != this.structureStore.data.editedElement
            })) {
               this.state.errors.name = "Element name must be unique."
            }
            if(oldError != this.state.errors){
               this.update()
            }
         },

         onTypeChange(evt){
            this.structureStore.data.editedElement.type = evt.target.value
            this.update()
         },

         onDocumentClick(evt){
            if(!$(".structureForm, .structure-item-wrapper", this.root).find(evt.target)[0]
                && $(".structureForm", this.root)[0] != evt.target){
               this.structureStore.stopElementEditing()
            }
         },

         onAddClick(evt){
            evt.stopPropagation()
            this.structureStore.startElementEditing({
               type: "string"
            })
         },

         onEditCancelClick(){
            this.structureStore.stopElementEditing()
         },

         onEditOkClick(){
            let element = {
               name: $("#name").val(),
               type: $("#type").val(),
               min: $("#min").val(),
               max: $("#max").val(),
               re: $("#re").val(),
               values: ($("#values").val() || "")
                     .split(",")
                     .map(val => val.trim())
                     .filter(val => val != "")
            }
            if(this.structureStore.data.structure.elements[this.structureStore.data.editedElement.name]){
               this.structureStore.updateElement(this.structureStore.data.editedElement.name, element)
            } else {
               this.structureStore.addElement(element)
            }
            this.structureStore.stopElementEditing()
         },

         onDeleteZoneDragEnter(){
            $(".structure-delete-zone", this.root).addClass("structure-delete-zone-hover")
         },

         onDeleteZoneDragLeave(){
            $(".structure-delete-zone", this.root).removeClass("structure-delete-zone-hover")
         },

         onDeleteZoneDrop(){
            $(".structure-delete-zone", this.root).removeClass("structure-delete-zone-hover")
            this.structureStore.removeElement(this.structureStore.data.draggedElement)
            this.structureStore.stopElementDragging()
         },

         onDndStart(){
            $(".structure-delete-zone").show()
         },

         onDndStop(){
            $(".structure-delete-zone").hide()
         },

         onDragOver(evt){
            evt.preventDefault()
         },

         getElementList(){
            let list = []
            let addElementAndItsChildren = (element) => {
               list.push(element)
               element.children.forEach(childName => {
                  addElementAndItsChildren(this.structureStore.getElementByName(childName))
               })
            }
            let rootElement = this.structureStore.getRootElement()
            rootElement && addElementAndItsChildren(rootElement)
            return list
         }
      }
   </script>

   <style type="scss">
      .editButtons{
         justify-content: center;
      }

      .structure-delete-zone{
         display: flex;
         align-items: center;
         border: 3px dashed #c9c9c9;
         padding: 4px 10px;
         opacity: 0.5;
         &>*{
            pointer-events: none; // so ondragleave is not fired on children
         }
         &.structure-delete-zone-hover{
            opacity: 1;
         }
         .structure-delete-zone-text{
            margin-left: 5px;
         }
      }
   </style>
</structure-editor>
