<structure-editor>
   <div class="modeWrapper displayFlex pt-4 pb-4">
      <div class="settingsRadio">
         <label>
           <input name="structure"
               value="dmlex"
               disabled={isRadioDisabled()}
               onclick={onModeRadioClick}
               type="radio"
               checked={structureStore.data.mode == "dmlex"}/>
           <span>Standard components</span>
         </label>
         <label>
           <input name="structure"
               value="custom"
               disabled={isRadioDisabled()}
               onclick={onModeRadioClick}
               type="radio"
               checked={structureStore.data.mode == "custom"}/>
           <span>Custom structure</span>
         </label>
      </div>
   </div>

   <div class="mainColumnsWrapper">
      <div class="structureWrapper pt-4 pb-4">
         <div class="modeContent">
            <ul if={isRadioDisplayed()}
                  class="tabs mb-0">
               <li class="tab {structureStore.data.tab == "visual" ? "active" : ""} {structureStore.data.brokenConfig ? 'disabled' : ''}">
                  <a onclick={onTabClick.bind(this, "visual")}>Visual editor</a>
               </li>
               <li class="tab {structureStore.data.tab == "code" ? "active" : ""}">
                  <a onclick={onTabClick.bind(this, "code")}>Code editor</a>
               </li>
            </ul>
            <div if={(!structureStore.data.brokenConfig || structureStore.data.tab == "code")}
                  class="tabContent p-6">
               <div if={structureStore.data.mode == "dmlex"}>
                  <nvh-schema if={!structureStore.data.brokenConfig}
                        {...structureStore.data.DMLexSettings}
                        on-change={onNvhSchemaChange}/>
               </div>
               <template if={structureStore.data.mode == "custom"}>
                  <div if={structureStore.data.tab == "visual"}>
                     <custom-structure-editor if={!structureStore.data.brokenConfig}/>
                  </div>
                  <div if={structureStore.data.tab == "code"}>
                     <div class="modeCustomForm">
                        <p class="mt-0 mb-12">To specify your custom Lexonomy schema use <i>NVH schema</i>.
                           Learn more about NVH schema at <a href="https://www.namevaluehierarchy.org/schema.html" target="_blank">namevaluehierarchy.org</a>.
                        </p>
                        <div class="mb-16">
                           <div class="input-field">
                              <nvh-schema-textarea schema={schema}/>
                              <label>Your NVH schema</label>
                           </div>
                           <div class="buttons">
                              <button class="btn btn-secondary"
                                    onclick={onLoadSampleNvhSchemaClick}>Load sample NVH schema</button>
                           </div>
                        </div>
                     </div>
                  </div>
               </template>
            </div>
         </div>
      </div>
   </div>

   <script>
      export default{
         onBeforeMount(){
            this.structureStore = window.structureEditorStore
            this.schema = this.structureStore.data.schema
            this.bindings = [["structureStore",  "elementChanged", "update"],
                             ["schema", "isValidChanged", "onSchemaIsValidChange"]]
         },

         onUpdated(){
            if(this.structureStore.data.mode == "custom" && this.structureStore.data.tab == "code"){
               M.updateTextFields()
            }
         },

         onSchemaIsValidChange(){
            if(!this.schema.isValid && this.schema.parseError){
               this.structureStore.data.brokenConfig = this.schema.nvh
            } else {
               this.structureStore.data.brokenConfig = null
            }
            this.structureStore.trigger("brokenConfigChanged")
         },

         onTabClick(tab){
            this.structureStore.stopElementEditing()
            this.structureStore.data.tab = tab
            this.update()
            this.focusCodeTextarea()
         },

         onModeRadioClick(evt){
            let mode = evt.target.value
            if(mode != this.structureStore.data.mode){
               if(!this.props.save
                     || this.structureStore.data.originalSchema == this.schema.getNvh()){
                  this.changeMode(mode)
               } else {
                  if(this.isSchemaValid()){
                     window.modal.open({
                        title: "Save changes?",
                        tag: "raw-html",
                        props: {
                           content: "Before changing the structure setting mode you need to save changes first or discard the changes."
                        },
                        small: true,
                        showCloseButton: false,
                        buttons: [{
                           label: "Cancel",
                           onClick: (dialog, modal) => {
                              modal.close()
                           }
                        }, {
                           label: "discard changes",
                           onClick: this.discardChanges.bind(this, mode)
                        }, {
                           label: "save changes",
                           onClick: function(mode, dialog, modal){
                              this.props.save()
                                    .done(function(mode){
                                       this.changeMode(mode)
                                       modal.close()
                                    }.bind(this, mode))
                           }.bind(this, mode)
                        }]
                     })
                  } else {
                     window.modal.open({
                        title: "Discard changes?",
                        tag: "raw-html",
                        props: {
                           content: "There is an error in the structure. Before changing the structure setting mode you need to fix the structure first or discard the changes."
                        },
                        small: true,
                        showCloseButton: false,
                        buttons: [{
                           label: "Cancel",
                           onClick: (dialog, modal) => {
                              modal.close()
                           }
                        }, {
                           label: "discard changes",
                           onClick: this.discardChanges.bind(this, mode)
                        }]
                     })
                  }
                  evt.stopPropagation()
                  evt.preventDefault()
               }
            }
         },

         onNvhSchemaChange(nvhSchema, DMLexSettings){
            this.structureStore.data.DMLexSettings = DMLexSettings
            this.schema.update(nvhSchema)
            this.update()
         },

         onLoadSampleNvhSchemaClick() {
            this.schema.update(`entry: string\n  headword: string\n  partOfSpeech: ? string\n  sense: + string\n    definition: ? string\n    example: * string\n  `)
            this.update()
            M.textareaAutoResize($("textarea", this.root))
         },

         changeMode(newMode){
            this.structureStore.data.mode = newMode
            this.update()
            this.props.onModeChange && this.props.onModeChange()
            this.focusCodeTextarea()
         },

         discardChanges(mode, dialog, modal){
            if(this.structureStore.data.mode == "dmlex"){
               this.structureStore.data.DMLexSettings = window.deepCopy(this.structureStore.data.originalDmlexSettings)
            }
            this.schema.update(this.structureStore.data.originalSchema)
            this.changeMode(mode, false)
            modal.close()
         },

         isRadioDisplayed(){
            return this.structureStore.data.mode == "custom"
                  && (!this.structureStore.data.brokenConfig
                        || this.structureStore.data.tab == "code"
                        || !this.props.save)
         },

         isRadioDisabled(){
            return !!this.structureStore.data.brokenConfig
                  && this.props.save
         },

         isSchemaValid(){
            return this.structureStore.data.mode == "dmlex"
                  || (!this.structureStore.data.editedElement
                     && this.schema.isValid)
         },

         focusCodeTextarea(){
            this.structureStore.data.mode == "custom"
                  && this.structureStore.data.tab == "code"
                  && this.root.querySelector("textarea")?.focus()

         }
      }
   </script>


   <style type="scss">
      .modeWrapper{
         gap: 40px;
         @media screen and (max-width: 900px) {
            flex-wrap: wrap;
         }
      }
      .settingsRadio{
         display: flex;
         gap: 40px;
         width: 250px;
         span{
            white-space: nowrap;
         }
      }
      .mainColumnsWrapper{
         gap: 40px;
         @media screen and (max-width: 1100px){
            flex-direction: column;
         }
      }
      .modeContent{
         width: 100%;
      }
      textarea{
         min-height: 89px;
      }
      .tabs {
         border-bottom: none;
         a.active{
            background-color: #fafafa;
         }
      }
      .modeCustom{
         .modeCustomForm{
            max-width: 760px;
            flex: 1
         }
      }
      nvh-schema{
         h3{
            margin-top: 0;
         }
      }
   </style>
</structure-editor>
