<structure-editor class="positionRelative">
   <div class="displayFlex">
      <div>
         <div class="structure-items">
            <template each={(element, idx) in getElementList()}>
               <structure-editor-item element={element}
                     indent={element.indent}/>
               <structure-dnd-zone element={element}/>
            </template>
         </div>

         <button if={!structureStore.data.editedElement}
               class="btn btn-primary btn-floating tooltipped mt-4 ml-12 {!Object.keys(structureStore.data.structure.elements).length ? 'pulse' : ''}"
               data-tooltip="Add new element"
               onclick={onAddClick}>
            <i class="material-icons">add</i>
         </button>
         <!--button if={!structureStore.data.editedElement}
               class="btn btn-primary btn-floating mt-4 ml-12"
               data-target="importMenu">
            <i class="material-icons">more_horiz</i>
         </button>
         <ul id="importMenu"
               class="dropdown-content">
            <li onclick={onImportFromSimpleClick}>
               <a>
                  Import from Simple settings
               </a>
            </li>
            <li if={structureStore.data.custom_NVHSchema}
                  onclick={onImportFromCustomClick}>
               <a>
                  Import from Custom settings
               </a>
            </li>
         </ul-->

         <div class="structure-delete-zone ml-auto mt-6 grey-text"
               ondragenter={onDeleteZoneDragEnter}
               ondragleave={onDeleteZoneDragLeave}
               ondragover={onDragOver}
               ondrop={onDeleteZoneDrop}
               style="display: none;">
            <i class="material-icons">delete</i>
            <span class="structure-delete-zone-text">
               drag here to delete
            </span>
         </div>
      </div>
      <div if={structureStore.data.editedElement}
         class="grey lighten-4 p-6 structureForm z-depth-2"
            style="min-width: 400px;">
         <div class="displayFlex alignCenter">
            <h3>
               {structureStore.data.editedElement.name ? "Update element" : "Create new element"}
            </h3>
            <button class="btn btn-floating btn-flat ml-auto"
                  onclick={onEditCancelClick}>
               <i class="material-icons grey-text">close</i>
            </button>
         </div>
         <div class="input-field">
            <input id="name"
                  class={state.errors.name ? "invalid" : ""}
                  oninput={onNameInput}
                  onkeyup={onNameKeyUp}
                  value={structureStore.data.editedElement.name}
                  type="text">
            <label for="name">Element name</label>
            <span class="helper-text"
                  data-error={state.errors.name}></span>

         </div>
         <div class="input-field"
               style="max-width: 130px;">
            <select id="type"
                  onchange={onTypeChange}>
               <template if={structureStore.data.editedElement == structureStore.getRootElement()}>
                  <option selected="selected"
                        value="string">{store.const.ENTRY_TYPES.string}</option>
               </template>
               <template if={structureStore.data.editedElement != structureStore.getRootElement()}>
                  <option each={obj in Object.entries(store.const.ENTRY_TYPES)}
                        value={obj[0]}
                        selected={obj[0] == structureStore.data.editedElement.type}>{obj[1]}</option>
               </template>
            </select>
            <label>Type</label>
         </div>

         <div class="displayFlex" style="gap: 20px;">
            <div class="input-field inlineBlock"
                  style="max-width: 60px;">
               <input id="min"
                     value={structureStore.data.editedElement.min}
                     min=0
                     type="number">
               <label for="min">
                  Min
                  <span class="hint tooltipped"
                        data-tooltip="The minimum number of elements that each entry must contain.">
                     <i class="material-icons">help</i>
                  </span>
               </label>
            </div>

            <div class="input-field"
                  style="max-width: 60px;">
               <input id="max"
                     value={structureStore.data.editedElement.max}
                     min=1
                     type="number">
               <label for="max">
                  Max
                  <span class="hint tooltipped"
                        data-tooltip="The maximum number of elements that each entry must contain.">
                     <i class="material-icons">help</i>
                  </span>
               </label>
            </div>
         </div>

         <div if={structureStore.data.editedElement.type == "string"}
               class="input-field">
            <input id="re"
                  class={state.errors.re ? "invalid" : ""}
                  value={structureStore.data.editedElement.re}
                  oninput={onReInput}
                  type="text">
            <label for="re">
               Regular expression
               <span class="hint tooltipped"
                     data-tooltip="Entry editor will allow to save only values matching the regular expression.">
                  <i class="material-icons">help</i>
               </span>
            </label>
            <span class="helper-text"
                  data-error={state.errors.re}></span>
         </div>

         <div if={structureStore.data.editedElement.type == "list"}>
            <div class="input-field">
               <label>
                  Values
                  <span class="hint tooltipped"
                        data-tooltip="User will only be able to select values from this list.">
                     <i class="material-icons">help</i>
                  </span>
               </label>
            </div>
            <div class="pl-4">
               <div if={!state.values.length}
                     class="grey-text pt-4 pb-2">
                     No values added
               </div>
               <table if={state.values.length}
                     class="valueTable">
                  <tbody>
                     <tr each={(value, idx) in state.values}>
                        <td>
                           <span class="input-field">
                              <input class="valueValue"
                                    value={value}
                                    oninput={onValueValueInput.bind(this, idx)}
                                    onkeyup={idx + 1 == state.values.length ? onValueKeyUp : null}
                                    type="text">
                           </span>
                        </td>
                        <td>
                           <button class="btn btn-flat btn-floating"
                                 onclick={onValueDeleteClick.bind(this, value)}>
                              <i class="material-icons grey-text">delete</i>
                           </button>
                        </td>
                     </tr>
                  </tbody>
               </table>
               <button class="btn btn-floating mt-4 tooltipped"
                     data-tooltip="Add value"
                     onclick={onValueAddClick}>
                  <i class="material-icons">add</i>
               </button>
            </div>
         </div>
         <div class="center-align">
            <button class="btn {state.errors.name || state.errors.re ? 'disabled' : ''}"
                  onclick={onEditOkClick}>ok</button>
         </div>
      </div>
   </div>

   <script>
      export default{
         bindings: [["structureStore", "elementChanged", "onElementChange"],
                    ["structureStore", "onDndStart", "onDndStart"],
                    ["structureStore", "onDndStop", "onDndStop"]],


         state: {
            showNewButton: true,
            errors: {}
         },

         onBeforeMount(){
            this.structureStore = window.structureEditorStore
         },

         onMounted(){
            document.addEventListener("mousedown", this.onDocumentMouseDown)
            $("select", this.root).formSelect()
            $("input", this.root).first().focus()
            this.initStructureForm()
         },

         onBeforeUnmount(){
            document.removeEventListener("mousedown", this.onDocumentMouseDown)
         },

         onBeforeUpdate(){
            this.state.showNewButton = !Object.values(this.structureStore.data.structure.elements).filter(e => e.edit).length
         },

         onUpdated(){
            $("select", this.root).formSelect()
            this.initStructureForm()
         },

         onElementChange(){
            this.state.values = this.structureStore.data.editedElement ? [...this.structureStore.data.editedElement.values || []] : []
            this.update()
            $("input", this.root).first().focus()
         },

         onNameInput(evt){
            let oldError = this.state.errors.name
            this.state.errors.name = ""
            try{
               this.structureStore.validateElementName(evt.target.value)
               if(Object.entries(this.structureStore.data.structure.elements).find(([elementName, element]) => {
                  return elementName == evt.target.value && element != this.structureStore.data.editedElement
               })) {
                  throw "Element name must be unique."
               }
            } catch(e){
               this.state.errors.name = e
            }
            if(oldError != this.state.errors.name){
               this.update()
            }
         },

         onNameKeyUp(evt){
            if(evt.keyCode == 13 && Object.values(this.state.errors).every(e => !e)){
               this.saveElement()
            } else if(evt.keyCode == 27){
               this.structureStore.stopElementEditing()
            }
         },

         onReInput(evt){
            let oldError = this.state.errors.re
            this.state.errors.re = ""
            if(re){
               try{
                  new RegExp(evt.target.value)
               } catch(e){
                  this.state.errors.re = "Regular expression is not valid"
               }
            }
            if(oldError != this.state.errors.re){
               this.update()
            }
         },

         onTypeChange(evt){
            let type = evt.target.value
            this.structureStore.data.editedElement.type = type
            if(type != "list"){
               this.state.values = []
            }
            this.update()
         },

         onValueAddClick(){
            this.state.values.push("")
            this.update()
            setTimeout(() => {
               $(".valueTable tbody tr:last-child td:first-child input").focus()
            }, 1)
         },

         onValueDeleteClick(value, evt){
            evt.stopPropagation()
            this.state.values = this.state.values.filter(v => v != value)
            this.update()
         },

         onValueValueInput(idx, evt){
            this.state.values[idx] = evt.target.value
         },

         onValueKeyUp(evt){
            if(evt.keyCode == 13){
               this.onValueAddClick()
            }
         },

         onDocumentMouseDown(evt){
            if(!$(".structureForm, .structure-item-wrapper", this.root).find(evt.target)[0]
                && $(".structureForm", this.root)[0] != evt.target){
               this.structureStore.stopElementEditing()
            }
         },

         onAddClick(evt){
            evt.stopPropagation()
            this.structureStore.startElementEditing({
               type: "string"
            })
         },

         onEditCancelClick(){
            this.structureStore.stopElementEditing()
         },

         onEditOkClick(){
            this.saveElement()
         },

         saveElement(){
            let values = this.state.values.filter(value => value.value != "")
            let element = {
               name: $("#name").val(),
               type: $("#type").val(),
               min: $("#min").val(),
               max: $("#max").val(),
               re: $("#re").val(),
               values: values
            }
            if(this.structureStore.data.structure.elements[this.structureStore.data.editedElement.name]){
               this.structureStore.updateElement(this.structureStore.data.editedElement.name, element)
            } else {
               this.structureStore.addElement(element)
            }
            this.structureStore.stopElementEditing()
         },

         onDeleteZoneDragEnter(){
            $(".structure-delete-zone", this.root).addClass("structure-delete-zone-hover")
         },

         onDeleteZoneDragLeave(){
            $(".structure-delete-zone", this.root).removeClass("structure-delete-zone-hover")
         },

         onDeleteZoneDrop(){
            $(".structure-delete-zone", this.root).removeClass("structure-delete-zone-hover")
            this.structureStore.removeElement(this.structureStore.data.draggedElement)
            this.structureStore.stopElementDragging()
         },

         onDndStart(){
            $(".structure-delete-zone").show()
         },

         onDndStop(){
            $(".structure-delete-zone").hide()
         },

         onDragOver(evt){
            evt.preventDefault()
         },

         getElementList(){
            let list = []
            let addElementAndItsChildren = (element) => {
               list.push(element)
               element.children.forEach(childName => {
                  addElementAndItsChildren(this.structureStore.getElementByName(childName))
               })
            }
            let rootElement = this.structureStore.getRootElement()
            rootElement && addElementAndItsChildren(rootElement)
            return list
         },

         initStructureForm(){
            if(this.structureStore.data.editedElement){
               window.makeElementDraggable($(".structureForm", this.root), $(".structureForm h3", this.root))
               this.updateFormPosition()
            }
         },

         updateFormPosition(){
            if(this.structureStore.data.editedElement){
               let structureForm = $(".structureForm", this.root)
               let formHeight = structureForm.outerHeight()
               let formWidth = structureForm.outerWidth()
               let windowHeight = $(window).height()
               let windowWidth = $(window).width()
               let left = 0
               let top = 0
               if(this.structureStore.data.editedElement.name){
                  let boundingRect = $("structure-editor-item.selected .valueWrapper ")[0].getBoundingClientRect()
                  let editorOffsetLeft = boundingRect.left
                  top = Math.min(Math.max(10, boundingRect.top - (formHeight / 2)), windowHeight - formHeight - 30)
                  if(boundingRect.right + formWidth > windowWidth - 30){ // not enough space to the right -> show form on the left side of selected item
                     left = Math.max(10, boundingRect.left - formWidth - 30)
                  } else {
                     left = Math.min(boundingRect.right + 30, windowWidth - formWidth - 10)
                  }
               } else {
                  top = (windowHeight - formHeight) / 2
                  left = (windowWidth - formWidth) / 2
               }
               structureForm.css({
                  left: Math.round(left) + "px",
                  top: Math.round(top) +  "px"
               })
            }
         }
      }
   </script>

   <style type="scss">
      .editButtons{
         justify-content: center;
      }

      .structure-delete-zone{
         display: flex;
         align-items: center;
         border: 3px dashed #c9c9c9;
         padding: 4px 10px;
         opacity: 0.5;
         &>*{
            pointer-events: none; // so ondragleave is not fired on children
         }
         &.structure-delete-zone-hover{
            opacity: 1;
         }
         .structure-delete-zone-text{
            margin-left: 5px;
         }
      }
      .structureForm{
         z-index: 100;
         .input-field input{
            background-color: #fff;
         }
      }
      .valueTable{
         .input-field{
            border-bottom: 0;
            input[type="text"]{
               height: 2rem;
               line-height: 2rem;
               margin: 0;
            }
         }
         tbody{
            tr{
               border-bottom: none;
               td{
                  padding: 5px 5px 5px 0;
               }
            }
         }
      }
   </style>
</structure-editor>
