<element-style-options>
   <div class="nvh-options">
      <div class="nvh-option nvh">
         <span class="nvh-label">
            Element
         </span>
         <span class="nvh-values">
            {props.elementName}
         </span>
      </div>
      <div class="nvh-option nvh">
         <span class="nvh-label hint tooltipped"
               data-tooltip="The name that will be displayed in most cases. It must be different from other elements and their displayed names.">
            Displayed name
           <i class="material-icons">help</i>
         </span>
         <span class="nvh-values nvh-name">
            <input id="name"
                  type="text"
                  class="input-field"
                  value={state.style.name}
                  oninput={onNameInput}/>
            <small id="nameWarining"
                  class="invalidNameWaring red-text"
                  style="display: none;">name already taken</small>
         </span>
      </div>
      <div if={state.availableOptions.includes("hidden")}
            class="nvh-option">
         <span class="nvh-label">
            Hide element
         </span>
         <span class="nvh-values">
               <label>
                  <input id="hidden"
                        type="checkbox"
                        checked={state.style.hidden ? 'checked' : ''}
                        name="hidden"
                        onchange={onCheckboxChange}/>
                  <span></span>
               </label>
         </span>
      </div>
      <template if={!state.style.hidden}>
         <div if={state.availableOptions.includes("hideValue")}
               class="nvh-option">
            <span class="nvh-label">
               Hide value
            </span>
            <span class="nvh-values">
                  <label>
                     <input type="checkbox"
                           checked={state.style.hideValue ? 'checked' : ''}
                           name="hideValue"
                           onchange={onCheckboxChange}/>
                     <span></span>
                  </label>
            </span>
         </div>
         <div if={state.availableOptions.includes("textsize")}
               class="nvh-option">
            <span class="nvh-label">
               Text size
            </span>
            <span class="nvh-values nvh-value-boxes">
               <span class={state.style.textsize == 'smaller' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "textsize", "smaller")}
                     style="font-size: 0.8em;">a</span>
               <span class={!state.style.textsize ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "textsize", "")}>a</span>
               <span class={state.style.textsize == 'bigger' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "textsize", "bigger")}
                     style="font-size: 1.2em;">a</span>
            </span>
         </div>
         <div if={state.availableOptions.includes("weight")}
               class="nvh-option">
            <span class="nvh-label">
               Text weight
            </span>
            <span class="nvh-values nvh-value-boxes">
               <span class={!state.style.weight ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "weight", "")}>a</span>
               <span class={state.style.weight == 'bold' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "weight", "bold")}
                     style="font-weight: bold;">a</span>
            </span>
         </div>
         <div if={state.availableOptions.includes("slant")}
               class="nvh-option">
            <span class="nvh-label">
               Text slant
            </span>
            <span class="nvh-values nvh-value-boxes">
               <span class={!state.style.slant ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "slant", "")}>a</span>
               <span class={state.style.slant == 'italic' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "slant", "italic")}
                     style="font-style: italic;">a</span>
            </span>
         </div>
         <div if={state.availableOptions.includes("colour")}
               class="nvh-option">
            <span class="nvh-label">
               Text color
            </span>
            <span class="nvh-values nvh-value-boxes">
               <span class={!state.style.colour ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "colour", "")}>
                     <i class="material-icons tiny grey-text">block</i>

               </span>
               <span class={state.style.colour == 'red' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "colour", "red")}
                     style="background-color: #c62132;"></span>
               <span class={state.style.colour == 'blue' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "colour", "blue")}
                     style="background-color: #0277bd;"></span>
               <span class={state.style.colour == 'green' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "colour", "green")}
                     style="background-color: #388e3c;"></span>
               <span class={state.style.colour == 'grey' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "colour", "grey")}
                     style="background-color: #757575;"></span>
            </span>
         </div>
         <div if={state.availableOptions.includes("border")}
               class="nvh-option">
            <span class="nvh-label">
               Border
            </span>
            <span class="nvh-values  nvh-value-boxes nvh-border">
               <span class="{!state.style.border ? 'selected' : ''}"
                     onclick={onOptionChangeClick.bind(this, "border", "")}>
                  <i class="material-icons tiny grey-text">block</i>
               </span>
               <span class="nvh-border-solid {state.style.border == 'solid' ? 'selected' : ''}"
                     onclick={onOptionChangeClick.bind(this, "border", "solid")}></span>
               <span class="nvh-border-thick {state.style.border == 'thick' ? 'selected' : ''}"
                     onclick={onOptionChangeClick.bind(this, "border", "thick")}></span>
               <span class="nvh-border-dotted {state.style.border == 'dotted' ? 'selected' : ''}"
                     onclick={onOptionChangeClick.bind(this, "border", "dotted")}></span>
            </span>
         </div>
         <div if={state.availableOptions.includes("background")}
               class="nvh-option">
            <span class="nvh-label">
               Background
            </span>
            <span class="nvh-values nvh-value-boxes">
               <span class={!state.style.background ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "background", "")}>
                  <i class="material-icons tiny grey-text">block</i>
               </span>
               <span class={state.style.background == 'yellow' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "background", "yellow")}
                     style="background-color: #fff59d;"></span>
               <span class={state.style.background == 'blue' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "background", "blue")}
                     style="background-color: #90CAF9;"></span>
               <span class={state.style.background == 'grey' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "background", "grey")}
                     style="background-color: #bdbdbd;"></span>
            </span>
         </div>
         <div if={state.availableOptions.includes("innerPunc")}
               class="nvh-option">
            <span class="nvh-label">
               Inner punctuation
            </span>
            <span class="nvh-values nvh-value-boxes">
               <span class={!state.style.innerPunc ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "innerPunc", "")}>
                  <i class="material-icons tiny grey-text">block</i>
               </span>
               <span class={state.style.innerPunc == 'roundBrackets' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "innerPunc", "roundBrackets")}>(</span>
               <span class={state.style.innerPunc == 'squareBrackets' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "innerPunc", "squareBrackets")}>[</span>
               <span class={state.style.innerPunc == 'curlyBrackets' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "innerPunc", "curlyBrackets")}>\{</span>
               <span class={state.style.innerPunc == 'colon' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "innerPunc", "colon")}>:</span>
               <span class={state.style.innerPunc == 'comma' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "innerPunc", "comma")}>,</span>
               <span class={state.style.innerPunc == 'dot' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "innerPunc", "dot")}>.</span>
               <span class={state.style.innerPunc == 'semicolon' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "innerPunc", "semicolon")}>;</span>
            </span>
         </div>
         <div if={state.availableOptions.includes("outerPunc")}
               class="nvh-option">
            <span class="nvh-label">
               Outer punctuation
            </span>
            <span class="nvh-values nvh-value-boxes">
               <span class={!state.style.outerPunc ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "outerPunc", "")}>
                  <i class="material-icons tiny grey-text">block</i>
               </span>
               <span class={state.style.outerPunc == 'roundBrackets' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "outerPunc", "roundBrackets")}>(</span>
               <span class={state.style.outerPunc == 'squareBrackets' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "outerPunc", "squareBrackets")}>[</span>
               <span class={state.style.outerPunc == 'curlyBrackets' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "outerPunc", "curlyBrackets")}>\{</span>
               <span class={state.style.outerPunc == 'colon' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "outerPunc", "colon")}>:</span>
               <span class={state.style.outerPunc == 'comma' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "outerPunc", "comma")}>,</span>
               <span class={state.style.outerPunc == 'dot' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "outerPunc", "dot")}>.</span>
               <span class={state.style.outerPunc == 'semicolon' ? 'selected' : ''}
                     onclick={onOptionChangeClick.bind(this, "outerPunc", "semicolon")}>;</span>
            </span>
         </div>
         <div if={state.availableOptions.includes("gutter")}
               class="nvh-option">
            <span class="nvh-label">
               Indentation and bulleting
            </span>
            <span class="nvh-values">
               <select onchange={onSelectOptionChangeClick.bind(this, "gutter")}>
                  <option each={option in gutterOptions}
                        value="{option[0]}"
                        selected={option[0] == state.style.gutter}>{option[1]}</option>
               </select>
            </span>
         </div>
         <div if={state.availableOptions.includes("label")}
               class="nvh-option">
            <span class="nvh-label">
               Label
            </span>
            <span class="nvh-values">
               <input id="label"
                     type="text"
                     class="input-field"
                     value={state.style.label}
                     oninput={onLabelInput}/>
            </span>
         </div>
         <div if={state.availableOptions.includes("layout")}
               class="nvh-option">
            <span class="nvh-label">
               Line break
            </span>
            <span class="nvh-values">
               <select onchange={onSelectOptionChangeClick.bind(this, "layout")}>
                  <option value="block"
                        selected={state.style.layout == "block"}>Before and after</option>
                  <option value="inline"
                        selected={state.style.layout == "inline"}>None</option>
               </select>
            </span>
         </div>
      </template>
   </div>

   <script>
      export default{
         state: {
            show: false,
            availableOptions: []
         },

         onBeforeMount(){
            this.nvhStore = window.nvhStore
            this.nvhData = this.nvhStore.data

            this.gutterOptions = [
               ["", "None"],
               ["disk", "Round bullet"],
               ["square", "Square bullet"],
               ["diamond", "Diamond bullet"],
               ["arrow", "Arrow bullet"],
               ["indent", "Indent"],
               ["hanging", "Hanging indent"],
               ["sensenum1", "Sense number 1, 2, 3..."],
               ["sensenum2", "Sense number a, b, c..."],
               ["sensenum3", "Sense number i, ii, iii..."],
               ["sensenum0", "Sense number I, II, III..."]
            ]

            this.state.style = this.nvhStore.getElementStyle(this.props.elementName) || {},
            this.state.availableOptions = this.getAvailableOptions(this.props.elementName)
         },

         onMounted(){
            window.initFormSelects(this.root)
         },

         onBeforeUpdate(){
            this.state.style = this.nvhStore.getElementStyle(this.props.elementName) || {},
            this.state.availableOptions = this.getAvailableOptions(this.props.elementName)
         },

         onUpdated(){
            window.initFormSelects(this.root)
            //fixed riot bug/feature, if user changes value, then navigates to element without label, label is not updated
            $("#label").val(this.state.style.label)
            if($("#hidden")[0]){
               $("#hidden")[0].checked = !!this.state.style.hidden
            }
         },

         onOptionChangeClick(option, value, evt){
            this.changeElementStyle(option, value)
         },

         onSelectOptionChangeClick(option, evt){
            this.changeElementStyle(option, evt.target.value)
         },

         onCheckboxChange(evt){
            this.changeElementStyle(evt.target.name, evt.target.checked)
         },

         onNameInput(evt){
            let name = evt.target.value
            let isNameValid = !this.nvhStore.findElement(el => {
               return el.name != this.props.elementName
                     && (el.name.toLowerCase() == name.toLowerCase()
                           || this.store.getElementDisplayedName(el.name.toLowerCase()) == name.toLowerCase())
            })
            if(isNameValid){
               this.changeElementStyle("name", name)
            }
            $("#nameWarining").toggle(!isNameValid)
         },

         onLabelInput(evt){
            this.changeElementStyle("label", evt.target.value)
         },

         changeElementStyle(option, value){
            this.nvhStore.changeElementStyleOption(this.props.elementName, option, value)
            this.props.onChange && this.props.onChange(this.props.elementName, option, value)
            this.update()
         },

         getAvailableOptions(elementName){
            let config = this.nvhStore.getElementConfig(elementName)
            if(config){
               let options = []
               if(this.nvhData.rootElement != elementName){
                  options.push("hidden")
               }
               if(config.type != "empty"){
                  options.push("hideValue")
               }
               options.push(...["layout", "separation", "gutter", "border", "background", "outerPunc", "label"])
               if(["string", "int", "bool", "list"].includes(config.type)){
                  options.push(...["colour", "slant", "weight", "textsize", "innerPunc"])
               }
               return options
            }
            return []
         }
      }
   </script>

   <style type="scss">
      .nvh-options{
         display: table;
         max-width: 300px;
         .nvh-option{
            .nvh-values{
               min-width: 160px;
               input{
                  height: 1.5rem;
                  padding: 2px 5px;
                  background-color: #fff;
                  margin-bottom: 0;
                  &[type="checkbox"]{
                     height: 20px;
                  }
               }
               .select-wrapper{
                  input{
                     padding-right: 20px;
                  }
                  svg{
                     z-index: 100
                  }
               }
            }
         }
      }
      .nvh-option{
         display: table-row;
      }
      .nvh-label,
      .nvh-values{
         white-space: nowrap;
         display: table-cell;
         padding: 5px;
      }
      .nvh-label{
         color: grey;
         min-width: 170px;
      }
      .nvh-value-boxes{
         display: flex;
         gap: 3px;
         &:hover{
            span{
               opacity: 1;
            }
         }
         span{
            display: inline-block;
            width: 20px;
            height: 20px;
            line-height: 20px;
            cursor: pointer;
            text-align: center;
            opacity: 0.5;
            background-color: white;
            &:hover{
               outline: 1px solid #484848;
            }
            &.selected{
               opacity: 1;
               -webkit-box-shadow: 0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);
               box-shadow: 0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);
               outline: 1px solid #484848;
            }
            i{
               line-height: 20px;
            }
         }
      }
      .nvh-name{
         position: relative;
         padding-bottom: 10px;
         .invalidNameWaring{
            position: absolute;
            left: 4px;
            bottom: -6px;
         }
      }
      .nvh-border{
         & >span:not(:first-child){
            &::after{
               content: ' ';
               display: inline-block;
               width: 1px;
               height: 20px;
            }
            &.nvh-border-solid::after{
               border: 1px solid black;
            }
            &.nvh-border-thick::after{
               border: 2px solid black;
            }
            &.nvh-border-dotted::after{
               border: 1px dotted black;
            }
         }
      }
      .dropdown-content{
         min-width: 200px;
      }
   </style>
</element-style-options>
