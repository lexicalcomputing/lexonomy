<dict-config-structure>
   <loading-overlay if={state.isLoading || state.isBusy}/>
   <h1 class="pageTitle">Entry structure</h1>
   <dict-configuration-issues config-id="structure"/>

   <div if={state.mode == "dmlex" && state.brokenConfig}
         class="message messageError">
      Structure is broken. Empty structure is used instead.
      <a href="javascript:void(0);"
            onclick={onShowBrokenStructureClick}>show broken structure</a>
   </div>

   <template if={!state.isLoading}>
      <div class="modeWrapper displayFlex pt-4 pb-4">
         <div class="settingsRadio">
            <label>
              <input name="structure"
                  value="dmlex"
                  onclick={onModeRadioMouseDown}
                  type="radio"
                  checked={state.mode == "dmlex"}
                  onchange={onModeChange}/>
              <span>Standard components</span>
            </label>
            <label>
              <input name="structure"
                  value="custom"
                  onclick={onModeRadioMouseDown}
                  type="radio"
                  checked={state.mode == "custom"}
                  onchange={onModeChange}/>
              <span>Custom structure</span>
            </label>
         </div>
      </div>

      <div class="mainColumnsWrapper">
         <div class="structureWrapper pt-4 pb-4">
            <div class="modeContent">
               <ui if={state.mode == "custom"}
                     class="tabs mb-0">
                  <li class="tab {state.tab == "visual" ? "active" : ""}">
                     <a onclick={onTabClick.bind(this, "visual")}>Visual editor</a>
                  </li>
                  <li class="tab {state.tab == "code" ? "active" : ""}">
                     <a onclick={onTabClick.bind(this, "code")}>Code editor</a>
                  </li>
               </ui>
               <div class="tabContent p-6">
                  <div if={state.mode == "dmlex"}>
                     <nvh-schema {...state.DMLexSettings}
                           {...structureStore.data.structure}
                           on-change={onNvhSchemaChange}/>
                  </div>
                  <template if={state.mode == "custom"}>
                     <div if={state.tab == "visual"}>
                        <structure-editor/>
                     </div>
                     <div if={state.tab == "code"}>
                        <div class="modeCustomForm">
                           <p class="mt-0 mb-12">To specify your custom Lexonomy schema use <i>NVH schema</i>.
                              Learn more about NVH schema at <a href="https://www.namevaluehierarchy.org/schema.html" target="_blank">namevaluehierarchy.org</a>.
                           </p>
                           <div class="mb-16">
                              <div class="input-field">
                                 <nvh-schema-textarea riot-value={state.schemaNvh}
                                       on-valid-change={onNvhSchemaValidChange}
                                       on-input={onNvhSchemaInput}/>
                                 <label>Your NVH schema</label>
                              </div>
                              <div class="buttons">
                                 <button class="btn btn-secondary"
                                       onclick={onLoadSampleNvhSchemaClick}>Load sample NVH schema</button>
                              </div>
                           </div>
                        </div>
                     </div>
                  </template>
               </div>
            </div>
         </div>
         <div class="pt-4">
            <div class="switch">
               <label>
                  <input name="new_entry_template"
                     type="checkbox"
                     checked={state.hasNewEntryTemplate}
                     onchange={onHasNewEntryTemplateChange} >
                  <span class="lever"></span>
                  Set new entry template
               </label>
            </div>
            <div if={state.hasNewEntryTemplate}
                  class="newEntryTemplateSettings">
               <div class="grey-text mb-4">
                  Select elements to be automatically added when creating a new entry.
                  <br>
                  You can also set a default values for newly added elements.
               </div>
               <new-entry-template elements={structureStore.data.structure.elements}
                     root={structureStore.data.structure.root}
                     new-entry-template={structureStore.data.newEntryTemplate}
                     on-change={structureStore.setNewEntryTemplate.bind(structureStore)}/>
            </div>
         </div>
      </div>

      <div class="mt-16">
         <dict-config-buttons save-data={save}/>
      </div>
   </template>


   <script>
      export default {
         bindings: [["structureStore",  "elementChanged", "onStructureEditorElemenChange"]],

         state: {
            isLoading: true,
            isBusy: false,
            mode: "dmlex",
            tab: "visual",
            data: null,
            brokenConfig: null,
            isCustomNvhSchemaValid: null,
            DMLexStructure: null,
            changed: false
         },

         onBeforeMount(){
            this.structureStore = window.structureEditorStore
         },

         onMounted() {
            this.store.loadDictionaryConfig("structure")
                  .done(response => {
                     if(response.success){
                        this.state.mode = response.content.mode || "dmlex"
                        this.state.tab = ["visual", "code"].includes(response.content.tab) ? response.content.tab : "visual"
                        this.state.DMLexSettings = response.content.DMLexSettings
                              || {
                                    modules: [],
                                    xlingual_langs: [],
                                    etymology_langs: [],
                                    showMoreSettings: false,
                                    selectedElements: []
                                 }
                        this.structureStore.setConfigStructure({
                           elements: response.content.elements || {},
                           root: response.content.root
                        })
                        this.structureStore.setNewEntryTemplate(response.content.newEntryTemplate)
                        this.state.hasNewEntryTemplate = response.content.hasNewEntryTemplate
                        this.state.originalStructure = window.deepCopy(this.structureStore.data.structure)
                        this.state.originalDmlexSettings = window.deepCopy(this.state.DMLexSettings)
                        if(this.state.mode == "custom" && this.state.tab == "code"){
                           this.state.schemaNvh = this.structureStore.getNvh()
                        }
                        if(this.state.mode == "dmlex"){
                           if(!this.store.isStructureValid()){
                              this.state.brokenConfig = this.state.data
                              this.state.data = {
                                 elements: {
                                    entry: {
                                       children: [],
                                       type: "txt"
                                    }
                                 },
                                 root: "entry"
                              }
                           }
                        }
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     if(this.state.mode == "custom" && this.state.tab == "code"){
                        this.refreshCustomTextFields()
                     }
                     this.refreshBtnSaveDisabled()
                  })
         },

         onTabClick(tab){
            if(tab == "code"){
               this.state.schemaNvh = this.structureStore.getNvh()
            } else {
               this.structureStore.setConfigStructure(this.structureStore.nvhToStructure(this.state.schemaNvh))
            }
            this.update({tab: tab})
         },

         onModeChange(evt){
            this.changeMode(evt.target.value)
         },

         changeMode(newMode, updateStructure=true){
            if(updateStructure){
               if(this.state.mode == "dmlex"){
                  this.structureStore.setConfigStructure(this.state.DMLexStructure)
               } else {
                  if(this.state.tab == "code"){
                     this.structureStore.setConfigStructure(this.structureStore.nvhToStructure(this.state.schemaNvh))
                  }
               }
            }
            if(newMode == "custom" && this.state.tab == "code"){
               this.state.schemaNvh = this.structureStore.getNvh()
            }
            this.update({
               mode: newMode,
               changed: false,
            })
            this.refreshBtnSaveDisabled()
            if(newMode == "custom" && this.state.tab == "code"){
               this.refreshCustomTextFields()
            }
         },

         onModeRadioMouseDown(evt){
            let mode = evt.target.value
            if(mode != this.state.mode){
               if(this.state.changed){
                  if(this.isSchemaValid()){
                     window.modal.open({
                        title: "Save changes?",
                        tag: "raw-html",
                        props: {
                           content: "Before changing the structure setting mode you need to save changes first or discard the changes."
                        },
                        small: true,
                        showCloseButton: false,
                        buttons: [{
                           label: "Cancel",
                           onClick: (dialog, modal) => {
                              modal.close()
                           }
                        }, {
                           label: "discard changes",
                           onClick: this.discardChanges.bind(this, mode)
                        }, {
                           label: "save changes",
                           onClick: function(mode, dialog, modal){
                              this.save()
                                    .done(function(mode){
                                       this.changeMode(mode)
                                       modal.close()
                                    }.bind(this, mode))
                           }.bind(this, mode)
                        }]
                     })
                  } else {
                     window.modal.open({
                        title: "Discard changes?",
                        tag: "raw-html",
                        props: {
                           content: "There is an error in the structure. Before changing the structure setting mode you need to fix the structure first or discard the changes."
                        },
                        small: true,
                        showCloseButton: false,
                        buttons: [{
                           label: "Cancel",
                           onClick: (dialog, modal) => {
                              modal.close()
                           }
                        }, {
                           label: "discard changes",
                           onClick: this.discardChanges.bind(this, mode)
                        }]
                     })
                  }
                  evt.stopPropagation()
                  evt.preventDefault()
               }
            }
         },

         onHasNewEntryTemplateChange(){
            if(!this.state.hasNewEntryTemplate){ // now hasNewEntryTemplat=false, so it will be changed to true in this function
               if(this.state.mode == "dmlex"){
                  this.structureStore.setConfigStructure(this.state.DMLexStructure)
               } else {
                  if(this.state.tab == "code"){
                     this.updateStructureFromNvhSchema()
                  }
               }
               if(!this.structureStore.data.newEntryTemplate){
                  this.structureStore.setNewEntryTemplate({
                     defaultElements: {},
                     defaultValues: {}
                  })
               }
            }
            this.update({hasNewEntryTemplate: !this.state.hasNewEntryTemplate})
         },

         onNvhSchemaChange(DMLexStructure, DMLexSettings){
            this.state.DMLexStructure = DMLexStructure
            this.state.DMLexSettings = DMLexSettings
            this.state.changed = !window.objectEquals(DMLexSettings, this.state.originalDmlexSettings)
            if(this.state.hasNewEntryTemplate){
               this.structureStore.setConfigStructure(DMLexStructure)
            }
            this.update()
            this.refreshBtnSaveDisabled()
         },

         onStructureEditorElemenChange(){
            this.state.changed = true
            this.refreshBtnSaveDisabled()
         },

         onNvhSchemaInput(schema){
            this.state.schemaNvh = schema
            if(this.state.hasNewEntryTemplate){
               this.updateStructureFromNvhSchema()
            }
            this.state.changed = true
            this.refreshBtnSaveDisabled()
         },

         onNvhSchemaValidChange(isValid){
            this.state.isCustomNvhSchemaValid = isValid
            this.refreshBtnSaveDisabled()
         },

         onLoadSampleNvhSchemaClick() {
            this.state.schemaNvh = `entry:\n  headword:\n  partOfSpeech: ?\n  sense: +\n    definition: ?\n    example: *\n  `
            this.update()
            this.state.isCustomNvhSchemaValid = true
            this.refreshCustomTextFields()
            this.refreshBtnSaveDisabled()
         },

         onShowBrokenStructureClick(){
            window.modal.open({
               title: "Broken structure",
               tag: "raw-html",
               props: {
                  content: JSON.stringify(this.state.brokenConfig)
               }
            })
         },

         discardChanges(mode, dialog, modal){
            if(this.state.mode == "dmlex"){
               this.state.DMLexSettings =  window.deepCopy(this.state.originalDmlexSettings)
               this.state.DMLexStructure =  window.deepCopy(this.state.DMLexStructure)
            }
            this.structureStore.setConfigStructure(this.state.originalStructure)
            this.changeMode(mode, false)
            modal.close()
         },

         updateStructureFromNvhSchema(){
            try{
               let structure = this.structureStore.nvhToStructure(this.state.schemaNvh)
               this.structureStore.setConfigStructure(structure)
               this.update()
            } catch(e){}
         },

         save() {
            this.update({isBusy: true})
            let structure
            if(this.state.mode == "dmlex"){
               structure = this.state.DMLexStructure
            } else {
               if(this.state.tab == "visual"){
                  structure = this.structureStore.data.structure
               } else {
                  structure = this.structureStore.nvhToStructure(this.state.schemaNvh)
               }
            }
            let data = {
               jsonSchema: Object.assign({
                  mode: this.state.mode,
                  tab: this.state.tab,
                  DMLexSettings: this.state.DMLexSettings,
                  hasNewEntryTemplate: this.state.hasNewEntryTemplate,
                  newEntryTemplate: this.deleteInvalidElementsInNewEntryTemplate(structure)
               }, structure)
            }
            return this.store.updateDictionaryConfig("structure", data)
                  .done(response => {
                     this.state.brokenConfig = null
                     this.state.changed = false
                     this.state.originalStructure = window.deepCopy(response.content.jsonSchema)
                     this.state.originalDmlexSettings = window.deepCopy(this.state.DMLexSettings)
                  })
                  .always(() => this.update({isBusy: false}))
         },

         deleteInvalidElementsInNewEntryTemplate(structure){
            if(this.state.hasNewEntryTemplate){
               let newEntryTemplate = this.structureStore.data.newEntryTemplate
               Object.keys(newEntryTemplate.defaultElements).forEach(elementPath => {
                  if(!structure.elements[elementPath]){
                     delete newEntryTemplate.defaultElements[elementPath]
                  }
               })
               Object.keys(newEntryTemplate.defaultValues).forEach(elementPath => {
                  if(!structure.elements[elementPath]){
                     delete newEntryTemplate.defaultValues[elementPath]
                  }
               })
               return newEntryTemplate
            } else {
               return null
            }
         },

         isSchemaValid(){
            if(this.state.mode == "dmlex"){
               return true
            } else {
               if(this.state.tab == "visual"){
                  return !!this.structureStore.data.structure.root
                              && !this.structureStore.data.editedElement
                              && this.structureStore.data.isValid
               } else {
                  return !!this.state.schemaNvh
                        && this.state.isCustomNvhSchemaValid
               }
            }
         },

         refreshBtnSaveDisabled(){
            $("primary-button .submitButton", this.root).toggleClass("disabled", !this.isSchemaValid())
         },

         refreshCustomTextFields(){
            M.updateTextFields()
         }
      }
   </script>

   <style type="scss">
      .modeWrapper{
         gap: 40px;
         @media screen and (max-width: 900px) {
            flex-wrap: wrap;
         }
      }
      .settingsRadio{
         display: flex;
         gap: 40px;
         width: 250px;
         span{
            white-space: nowrap;
         }
      }
      .mainColumnsWrapper{
         gap: 40px;
         @media screen and (max-width: 1100px){
            flex-direction: column;
         }
      }
      .modeContent{
         width: 100%;
      }
      textarea{
         min-height: 89px;
      }
      .tabs {
         border-bottom: none;
         a.active{
            background-color: #fafafa;
         }
      }
      .modeCustom{
         .modeCustomForm{
            max-width: 760px;
            flex: 1
         }
      }
      nvh-schema{
         h3{
            margin-top: 0;
         }
      }
      .newEntryTemplateSettings{
         padding: 10px 0 0 36px;
      }
   </style>
</dict-config-structure>
