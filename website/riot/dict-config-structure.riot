<dict-config-structure>
   <loading-overlay if={state.isLoading || state.isBusy}/>
   <h1 class="pageTitle">Entry structure</h1>
   <dict-configuration-issues config-id="structure"/>

   <div if={state.tab == "dmlex" && state.brokenConfig}
         class="message messageError">
      Structure is broken. Empty structure is used instead.
      <a href="javascript:void(0);"
            onclick={onShowBrokenStructureClick}>show broken structure</a>
   </div>

   <template if={!state.isLoading}>
      <div class="tabsWrapper displayFlex">
         <div class="settingsRadio borderRight pr-4">
            <label >
              <input name="structure"
                  value="dmlex"
                  onclick={onTabRadioMouseDown}
                  type="radio"
                  checked={state.tab == "dmlex"}
                  onchange={onTabChange}/>
              <span>Simple settings</span>
            </label>
            <label>
              <input name="structure"
                  value="advanced"
                  onclick={onTabRadioMouseDown}
                  type="radio"
                  checked={state.tab == "advanced"}
                  onchange={onTabChange}/>
              <span>Custom structure</span>
            </label>
            <label >
              <input name="structure"
                  value="custom"
                  onclick={onTabRadioMouseDown}
                  type="radio"
                  checked={state.tab == "custom"}
                  onchange={onTabChange}/>
              <span>Expert settings</span>
            </label>
         </div>

         <div class="tabsContent">
            <div if={state.tab == "dmlex"}>
               <nvh-schema {...state.DMLexSettings}
                     {...structureStore.data.structure}
                     on-change={onNvhSchemaChange}/>
            </div>

            <div if={state.tab == "advanced"} class="mb-8">
               <structure-editor/>
            </div>

            <div if={state.tab == "custom"}
                  class="tabCustom mb-8">
               <div class="tabCustomForm">
                  <p class="mt-0 mb-12">To specify your custom Lexonomy schema use <i>NVH schema</i>.
                     Learn more about NVH schema at <a href="https://www.namevaluehierarchy.org/schema.html" target="_blank">namevaluehierarchy.org</a>.
                  </p>
                  <div class="mb-16">
                     <div class="input-field">
                        <nvh-schema-textarea riot-value={state.schemaNvh}
                              on-valid-change={onNvhSchemaValidChange}
                              on-input={onNvhSchemaInput}/>
                        <label>Your NVH schema</label>
                     </div>
                     <div class="buttons">
                        <button class="btn btn-secondary"
                              onclick={onLoadSampleNvhSchemaClick}>Load sample NVH schema</button>
                     </div>
                  </div>
               </div>
            </div>

         </div>
      </div>
      <div class="borderTop pt-4">
         <div class="switch">
            <label>
               <input name="new_entry_template"
                  type="checkbox"
                  checked={state.hasNewEntryTemplate}
                  onchange={onHasNewEntryTemplateChange} >
               <span class="lever"></span>
               Set new entry template
            </label>
         </div>
         <div if={state.hasNewEntryTemplate}
               class="newEntryTemplateSettings">
            <div class="grey-text mb-4">
               Select elements to be automatically added when creating a new entry.
               <br>
               You can also set a default values for newly added elements.
            </div>
            <new-entry-template elements={structureStore.data.structure.elements}
                  root={structureStore.data.structure.root}
                  new-entry-template={structureStore.data.newEntryTemplate}
                  on-change={structureStore.setNewEntryTemplate.bind(structureStore)}/>
         </div>
      </div>
      <div class="mt-16">
         <dict-config-buttons save-data={save}/>
      </div>
   </template>


   <script>
      export default {
         bindings: [["structureStore",  "elementChanged", "onStructureEditorElemenChange"]],

         state: {
            isLoading: true,
            isBusy: false,
            tab: "dmlex",
            data: null,
            brokenConfig: null,
            isCustomNvhSchemaValid: null,
            DMLexStructure: null,
            changed: false
         },

         onBeforeMount(){
            this.structureStore = window.structureEditorStore
         },

         onMounted() {
            this.store.loadDictionaryConfig("structure")
                  .done(response => {
                     if(response.success){
                        this.state.tab = response.content.tab || "dmlex"
                        this.state.DMLexSettings = response.content.DMLexSettings
                              || {
                                    modules: [],
                                    xlingual_langs: [],
                                    etymology_langs: [],
                                    showMoreSettings: false,
                                    selectedElements: []
                                 }
                        this.structureStore.setConfigStructure({
                           elements: response.content.elements || {},
                           root: response.content.root
                        })
                        this.structureStore.setNewEntryTemplate(response.content.newEntryTemplate)
                        this.state.hasNewEntryTemplate = response.content.hasNewEntryTemplate
                        this.state.originalStructure = {...this.structureStore.data.structure}
                        this.state.originalDmlexSettings = window.deepCopy(this.state.DMLexSettings)
                        if(this.state.tab == "custom"){
                           this.state.schemaNvh = this.structureStore.getNvh()
                        }
                        if(this.state.tab == "dmlex"){
                           if(!this.store.isStructureValid()){
                              this.state.brokenConfig = this.state.data
                              this.state.data = {
                                 elements: {
                                    entry: {
                                       children: [],
                                       type: "txt"
                                    }
                                 },
                                 root: "entry"
                              }
                           }
                        }
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     if(this.state.tab == "custom"){
                        this.refreshCustomTextFields()
                     }
                     this.refreshBtnSaveDisabled()
                  })
         },

         onTabChange(evt){
            this.changeTab(evt.target.value)
         },

         changeTab(newTab, updateStructure=true){
            if(updateStructure){
               if(this.state.tab == "dmlex"){
                  this.structureStore.setConfigStructure(this.state.DMLexStructure)
               } else if(this.state.tab == "custom"){
                  this.structureStore.setConfigStructure(this.structureStore.nvhToStructure(this.state.schemaNvh))
               }
            }
            if(newTab == "custom"){
               this.state.schemaNvh = this.structureStore.getNvh()
            }
            this.update({
               tab: newTab,
               changed: false,
            })
            this.refreshBtnSaveDisabled()
            if(newTab == "custom"){
               this.refreshCustomTextFields()
            }
         },

         onTabRadioMouseDown(evt){
            let tab = evt.target.value
            if(tab != this.state.tab){
               if(this.state.changed){
                  if(this.isSchemaValid()){
                     window.modal.open({
                        title: "Save changes?",
                        tag: "raw-html",
                        props: {
                           content: "Before changing the structure setting mode you need to save changes first or discard the changes."
                        },
                        small: true,
                        showCloseButton: false,
                        buttons: [{
                           label: "Cancel",
                           onClick: (dialog, modal) => {
                              modal.close()
                           }
                        }, {
                           label: "discard changes",
                           onClick: this.discardChanges.bind(this, tab)
                        }, {
                           label: "save changes",
                           onClick: function(tab, dialog, modal){
                              this.save()
                                    .done(function(tab){
                                       this.changeTab(tab)
                                       modal.close()
                                    }.bind(this, tab))
                           }.bind(this, tab)
                        }]
                     })
                  } else {
                     window.modal.open({
                        title: "Discard changes?",
                        tag: "raw-html",
                        props: {
                           content: "There is an error in the structure. Before changing the structure setting mode you need to fix the structure first or discard the changes."
                        },
                        small: true,
                        showCloseButton: false,
                        buttons: [{
                           label: "Cancel",
                           onClick: window.modal.close
                        }, {
                           label: "discard changes",
                           onClick: this.discardChanges.bind(this, tab)
                        }]
                     })
                  }
                  evt.stopPropagation()
                  evt.preventDefault()
               }
            }
         },

         onHasNewEntryTemplateChange(){
            if(!this.state.hasNewEntryTemplate){ // now hasNewEntryTemplat=false, so it will be changed to true in this function
               if(this.state.tab == "dmlex"){
                  this.structureStore.setConfigStructure(this.state.DMLexStructure)
               } else if(this.state.tab == "custom"){
                  this.updateStructureFromNvhSchema()
               }
               if(!this.structureStore.data.newEntryTemplate){
                  this.structureStore.setNewEntryTemplate({
                     defaultElements: {},
                     defaultValues: {}
                  })
               }
            }
            this.update({hasNewEntryTemplate: !this.state.hasNewEntryTemplate})
         },

         onNvhSchemaChange(DMLexStructure, DMLexSettings){
            this.state.DMLexStructure = DMLexStructure
            this.state.DMLexSettings = DMLexSettings
            this.state.changed = !window.objectEquals(DMLexSettings, this.state.originalDmlexSettings)
            if(this.state.hasNewEntryTemplate){
               this.structureStore.setConfigStructure(DMLexStructure)
            }
            this.update()
            this.refreshBtnSaveDisabled()
         },

         onStructureEditorElemenChange(){
            this.state.changed = true
            this.refreshBtnSaveDisabled()
         },

         onNvhSchemaInput(schema){
            this.state.schemaNvh = schema
            if(this.state.hasNewEntryTemplate){
               this.updateStructureFromNvhSchema()
            }
            this.state.changed = true
            this.refreshBtnSaveDisabled()
         },

         onNvhSchemaValidChange(isValid){
            this.state.isCustomNvhSchemaValid = isValid
            this.refreshBtnSaveDisabled()
         },

         onLoadSampleNvhSchemaClick() {
            this.state.schemaNvh = `entry:\n  headword:\n  partOfSpeech: ?\n  sense: +\n    definition: ?\n    example: *\n  `
            this.update()
            this.state.isCustomNvhSchemaValid = true
            this.refreshCustomTextFields()
            this.refreshBtnSaveDisabled()
         },

         onShowBrokenStructureClick(){
            window.modal.open({
               title: "Broken structure",
               tag: "raw-html",
               props: {
                  content: JSON.stringify(this.state.brokenConfig)
               }
            })
         },

         discardChanges(tab, dialog, modal){
            if(this.state.tab == "dmlex"){
               this.state.DMLexSettings =  window.deepCopy(this.state.originalDmlexSettings)
               this.state.DMLexStructure =  window.deepCopy(this.state.DMLexStructure)
            }
            this.structureStore.setConfigStructure(this.state.originalStructure)
            this.changeTab(tab, false)
            modal.close()
         },

         updateStructureFromNvhSchema(){
            try{
               let structure = this.structureStore.nvhToStructure(this.state.schemaNvh)
               this.structureStore.setConfigStructure(structure)
               this.update()
            } catch(e){}
         },

         save() {
            this.update({isBusy: true})
            let structure
            if(this.state.tab == "dmlex"){
               structure = this.state.DMLexStructure
            } else if(this.state.tab == "advanced"){
               structure = this.structureStore.data.structure
            } else if(this.state.tab == "custom"){
               structure = this.structureStore.nvhToStructure(this.state.schemaNvh)
            }
            let data = {
               jsonSchema: Object.assign({
                  tab: this.state.tab,
                  DMLexSettings: this.state.DMLexSettings,
                  hasNewEntryTemplate: this.state.hasNewEntryTemplate,
                  newEntryTemplate: this.deleteInvalidElementsInNewEntryTemplate(structure)
               }, structure)
            }
            return this.store.updateDictionaryConfig("structure", data)
                  .done(response => {
                     this.state.brokenConfig = null
                     this.state.changed = false
                     this.state.originalStructure = {...response.content.jsonSchema}
                     this.state.originalDmlexSettings = window.deepCopy(this.state.DMLexSettings)
                  })
                  .always(() => this.update({isBusy: false}))
         },

         deleteInvalidElementsInNewEntryTemplate(structure){
            if(this.state.hasNewEntryTemplate){
               let newEntryTemplate = this.structureStore.data.newEntryTemplate
               Object.keys(newEntryTemplate.defaultElements).forEach(elementPath => {
                  if(!structure.elements[elementPath]){
                     delete newEntryTemplate.defaultElements[elementPath]
                  }
               })
               Object.keys(newEntryTemplate.defaultValues).forEach(elementPath => {
                  if(!structure.elements[elementPath]){
                     delete newEntryTemplate.defaultValues[elementPath]
                  }
               })
               return newEntryTemplate
            } else {
               return null
            }
         },

         isSchemaValid(){
            if(this.state.tab == "dmlex"){
               return true
            } else if(this.state.tab == "advanced"){
               return !!this.structureStore.data.structure.root
                           && !this.structureStore.data.editedElement
            } else if(this.state.tab == "custom"){
               return !!this.state.schemaNvh
                     && this.state.isCustomNvhSchemaValid
            }
         },

         refreshBtnSaveDisabled(){
            $("#submit_button", this.root).toggleClass("disabled", !this.isSchemaValid())
         },

         refreshCustomTextFields(){
            M.updateTextFields()
         }
      }
   </script>

   <style type="scss">
      .tabsWrapper{
         gap: 40px;
         @media screen and (max-width: 900px) {
            flex-wrap: wrap;
         }
      }
      .settingsRadio{
         width: 250px;
         span{
            white-space: nowrap;
         }
      }
      .tabsContent{
         width: 100%;
      }
      textarea{
         min-height: 89px;
      }
      .tabs {
         border-bottom: none;
         a.active{
            background-color: #fafafa;
         }
      }
      .tabCustom{
         .tabCustomForm{
            max-width: 760px;
            flex: 1
         }
      }
      nvh-schema{
         h3{
            margin-top: 0;
         }
      }
      .newEntryTemplateSettings{
         padding: 10px 0 0 36px;
      }
   </style>
</dict-config-structure>
