<dict-config-structure>
   <loading-overlay if={state.isLoading || state.isBusy}/>
   <h1 class="pageTitle">Entry structure</h1>

   <div if={state.tab == "simple" && state.brokenConfig}
         class="message messageError">
      Structure is broken. Empty structure is used instead.
      <a href="javascript:void(0);"
            onclick={onShowBrokenStructureClick}>show broken structure</a>
   </div>

   <div if={!state.isLoading}
         class="contentWrapper displayFlex">
      <div class="settingsRadio borderRight pr-4">
         <div>
            <label>
              <input name="structure"
                  type="radio"
                  checked={state.tab == "simple"}
                  onchange={onTabChange.bind(this, "simple")}/>
              <span>DMLex Standard</span>
            </label>
         </div>
         <div>
            <label>
              <input name="structure"
                  type="radio"
                  checked={state.tab == "advanced"}
                  onchange={onTabChange.bind(this, "advanced")}/>
              <span>Custom structure</span>
            </label>
         </div>
         <div>
            <label>
              <input name="structure"
                  type="radio"
                  checked={state.tab == "custom"}
                  onchange={onTabChange.bind(this, "custom")}/>
              <span>Custom NVH schema</span>
            </label>
         </div>
      </div>

      <div class="tabsContent">
         <div if={state.tab == "simple"}>
            <nvh-schema selected-modules={[...structureStore.data.basic_modules]}
                  on-modules-change={onBasicSchemaModulesChange}
                  on-schema-change={onBasicSchemaChange}
                  on-schema-loaded={onBasicSchemaLoaded}/>
         </div>

         <div if={state.tab == "advanced"}>
            <structure-editor/>
         </div>

         <div if={state.tab == "custom"}
               class="tabCustom">
            <div class="tabCustomForm">
               <p class="mt-0 mb-12">To specify your custom Lexonomy schema use <i>NVH schema</i>.
                  Learn more about NVH schema at <a href="https://www.namevaluehierarchy.org/schema.html" target="_blank">namevaluehierarchy.org</a>.
               </p>
               <div class="mb-16">
                  <div class="input-field">
                     <nvh-schema-textarea riot-value={structureStore.data.custom_NVHSchema}
                           on-valid-change={onNVHSchemaValidChange}
                           on-change={onNVHSchemaChange}/>
                     <label for="custom_NVHSchema">Your NVH schema</label>
                  </div>
                  <div class="buttons">
                     <button id="custom_importFromSimple"
                           class="btn btn-secondary {!structureStore.data.basic_modules || !structureStore.data.basic_modules.length ? 'disabled' : ''}"
                           onclick={onCustomImportFromSimpleClick}>Import from Simple settings</button>
                     <!--button id="custom_importFromSimple"
                           class="btn btn-secondary {!structureStore.data.advanced_structure.root ? 'disabled' : ''}"
                           onclick={onCustomImportFromAdvancedClick}>Import from Advanced settings</button-->
                     <button id="custom_importFromSimple"
                           class="btn btn-secondary "
                           onclick={onLoadSampleNVHSchemaClick}>Load sample NVH schema</button>
                  </div>
               </div>
               <div class="input-field">
                  <textarea id="custom_newEntryTemplate"
                        class="materialize-textarea {state.custom_newEntryTemplateError ? 'invalid' : ''}"
                        oninput={onNewEntryTemplateInput}>{structureStore.data.custom_newEntryTemplate}</textarea>
                  <label for="custom_newEntryTemplate">NVH template for new entries</label>
                  <div class="textareaErrorMessage red-text">
                     <small>
                        {state.custom_newEntryTemplateError}
                     </small>
                  </div>
                  <div class="buttons">
                     <button id="custom_generateNewNVHBtn"
                           class="btn btn-secondary {structureStore.data.custom_NVHSchema ? '' : 'disabled'}"
                           onclick={onNewEntryFromNVHSchemaClick}>Generate from NVH schema</button>
                  </div>
               </div>
            </div>
         </div>

         <div class="mt-16">
            <dict-config-buttons save-data={save}/>
         </div>
      </div>
   </div>

   <script>
      export default {
         bindings: [["structureStore",  "elementChanged", "refreshBtnSaveDisabled"]],

         state: {
            isLoading: true,
            isBusy: false,
            tab: "simple",
            data: null,
            brokenConfig: null,
            isCustomNVHSchemaValid: null,
            custom_newEntryTemplateError: ""
         },

         onBeforeMount(){
            this.structureStore = window.structureEditorStore
         },

         onMounted() {
            this.store.loadDictionaryConfig("structure")
                  .done(response => {
                     if(response.success){
                        if(response.content.tab){
                           // new data format (NVH lexonomy)
                           this.state.tab = response.content.tab
                           Object.assign(this.structureStore.data, {
                              basic_modules: response.content.basic_modules || [],
                              advanced_structure: response.content.advanced_structure || {elements: {}, root: null},
                              custom_NVHSchema: response.content.custom_NVHSchema || "",
                              custom_newEntryTemplate: response.content.custom_newEntryTemplate || ""
                           })
                           if(response.content.advanced_structure){
                              this.structureStore.setConfigStructure(response.content.advanced_structure)
                           }
                        } else {
                           // old data format (XML lexonomy)
                           this.state.tab = (response.content._nvh || response.content._nvhSchema) ? "custom" : "advanced"
                           Object.assign(this.structureStore.data, {
                              custom_NVHSchema: response.content._nvhSchema || "",
                              custom_newEntryTemplate: response.content._nvh || "",
                           })
                           this.structureStore.setConfigStructure(response.content)
                        }
                        if(this.state.tab == "simple"){
                           if(!this.store.isStructureValid()){
                              this.state.brokenConfig = this.state.data
                              this.state.data = {
                                 elements: {
                                    entry: {
                                       children: [],
                                       type: "txt"
                                    }
                                 },
                                 root: "entry"
                              }
                           }
                        }
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     if(this.state.tab == "custom"){
                        $("#custom_generateNewNVHBtn").toggleClass("disabled", !this.structureStore.data.custom_NVHSchema || !this.state.isCustomNVHSchemaValid)
                        this.refreshCustomTextFields()
                     }
                     this.refreshBtnSaveDisabled()
                  })
         },

         onNVHSchemaChange(schema){
            this.structureStore.data.custom_NVHSchema = schema
            this.refreshBtnSaveDisabled()
         },

         onNVHSchemaValidChange(isValid){
            this.state.isCustomNVHSchemaValid = isValid
            this.refreshBtnSaveDisabled()
            $("#custom_generateNewNVHBtn").toggleClass("disabled", !isValid)
         },

         onNewEntryTemplateInput(evt){
            this.structureStore.data.custom_newEntryTemplate = evt.target.value
            let error = ""
            try{
               let entry = window.nvhStore.nvhToJson(evt.target.value)
            } catch(e){
               error = e
            }
            if(error != this.state.custom_newEntryTemplateError){
               this.update({custom_newEntryTemplateError: error})
            }
            this.refreshBtnSaveDisabled()
         },

         onNewEntryFromNVHSchemaClick(){
            let newEntryTemplate = window.nvhStore.nvhSchemaToNewEntryTemplate(this.structureStore.data.custom_NVHSchema)
            this.structureStore.data.custom_newEntryTemplate = newEntryTemplate
            $("#custom_newEntryTemplate").val(newEntryTemplate)
            this.refreshCustomTextFields()
            this.refreshBtnSaveDisabled()
         },

         onTabChange(tab){
            this.update({tab: tab})
            this.refreshBtnSaveDisabled()
            if(tab == "custom"){
               this.refreshCustomTextFields()
            }
         },

         onBasicSchemaLoaded(schemas){
            if(!this.structureStore.data.basic_modules.length){
               this.structureStore.data.basic_modules = schemas.filter(schema => schema.checked || schema.required)
                     .map(schema => schema.key.split(".").pop())
               this.update()
            }
         },

         onBasicSchemaModulesChange(modules){
            this.structureStore.data.basic_modules = modules
            this.update()
         },

         onBasicSchemaChange(schema, finalSchema){
            this.structureStore.data.basic_finalSchema = finalSchema
            this.refreshBtnSaveDisabled()
         },

         onCustomImportFromSimpleClick(){
            this.update({isBusy: true})
            this.store.loadFinalSchema(this.structureStore.data.basic_modules)
                  .always(response => {
                     this.update({isBusy: false})
                     response.schemafinal && this.setCustomNVHSchema(response.schemafinal)
                  })
         },

         /*onCustomImportFromAdvancedClick(){
            this.setCustomNVHSchema(this.structureStore.getNvh())
         },*/

         onLoadSampleNVHSchemaClick() {
            this.setCustomNVHSchema(`entry:\n  headword:\n  partOfSpeech: ?\n  sense: +\n    definition: ?\n    example: *\n  `)
         },

         onShowBrokenStructureClick(){
            window.modal.open({
               title: "Broken structure",
               tag: "raw-html",
               props: {
                  content: JSON.stringify(this.state.brokenConfig)
               }
            })
         },

         save() {
            this.update({isBusy: true})
            if (this.state.tab == "advanced"){
               this.saveData(this.structureStore.getStructureToSave())
            } else {
               let schema = ""
               if(this.state.tab == "simple"){
                  schema =this.structureStore.data.basic_finalSchema
               } else{
                  schema = this.structureStore.data.custom_NVHSchema
               }
               this.store.schemaToJSON(schema)
                     .done(response => {
                        this.saveData({
                           elements: JSON.parse(response.schemajson),
                           root: response.schemajson.split(":", 1)[0].replace(/["{]/g, "")
                        })
                     })
                     .fail(payload => {
                        this.update({isBusy: false})
                     })
            }
         },

         saveData(data){
            Object.assign(data, {
               tab: this.state.tab,
               basic_modules: this.structureStore.data.basic_modules,
               advanced_structure: this.structureStore.getStructureToSave(),
               custom_NVHSchema: this.structureStore.data.custom_NVHSchema,
               custom_newEntryTemplate: this.structureStore.data.custom_newEntryTemplate
            })
            data.tab = this.state.tab
            this.store.updateDictionaryConfig("structure", data)
                  .done(response => {
                     this.state.brokenConfig = null
                  })
                  .always(() => this.update({isBusy: false}))
         },

         setCustomNVHSchema(nvhSchema){
            this.structureStore.data.custom_NVHSchema = nvhSchema
            this.update()
            $("#custom_generateNewNVHBtn").removeClass("disabled")
            this.state.isCustomNVHSchemaValid = true
            this.refreshCustomTextFields()
            this.refreshBtnSaveDisabled()
         },

         refreshBtnSaveDisabled(){
            let disabled = false
            if(this.state.tab == "simple"){
               disabled = !this.structureStore.data.basic_finalSchema
            } else if(this.state.tab == "advanced"){
               disabled = !this.structureStore.data.structure.root
            } else if(this.state.tab == "custom"){
               disabled = !this.structureStore.data.custom_NVHSchema
                     || !this.state.isCustomNVHSchemaValid
                     || !!this.state.custom_newEntryTemplateError
            }
            $("#submit_button", this.root).toggleClass("disabled", disabled)
         },

         refreshCustomTextFields(){
            M.updateTextFields()
            M.textareaAutoResize($("#custom_newEntryTemplate"))
         }
      }
   </script>

   <style type="scss">
      .contentWrapper{
         gap: 40px;
         @media screen and (max-width: 900px) {
            flex-wrap: wrap;
         }
      }
      .settingsRadio{
         width: 250px;
         span{
            white-space: nowrap;
         }
      }
      .tabsContent{
         width: 100%;
      }
      .customFieldWithButtons{
         display: flex;
         gap: 20px;
      }
      textarea{
         min-height: 89px;
      }
      .textareaErrorMessage{
         min-height: 24px;
         position: relative;
         top: -15px;
      }
      .tabs {
         border-bottom: none;
         a.active{
            background-color: #fafafa;
         }
      }
      .tabCustom{
         .tabCustomForm{
            max-width: 760px;
            flex: 1
         }
      }
   </style>
</dict-config-structure>
