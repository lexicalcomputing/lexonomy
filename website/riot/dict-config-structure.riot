<dict-config-structure>
   <loading-overlay if={state.isLoading || state.isBusy}/>
   <h1>Entry structure</h1>

   <div if={state.tab == "simple" && state.brokenConfig}
         class="message messageError">
      Structure is broken. Empty structure is used instead.
      <a href="javascript:void(0);"
            onclick={onShowBrokenStructureClick}>show broken structure</a>
   </div>

   <div if={!state.isLoading}
         class="contentWrapper displayFlex">
      <div class="settingsRadio borderRight">
         <div>
            <label>
              <input name="structure"
                  type="radio"
                  checked={state.tab == "simple"}
                  onchange={onTabChange.bind(this, "simple")}/>
              <span>Simple settings</span>
            </label>
         </div>
         <div>
            <label>
              <input name="structure"
                  type="radio"
                  checked={state.tab == "advanced"}
                  onchange={onTabChange.bind(this, "advanced")}/>
              <span>Advanced settings</span>
            </label>
         </div>
         <div>
            <label>
              <input name="structure"
                  type="radio"
                  checked={state.tab == "custom"}
                  onchange={onTabChange.bind(this, "custom")}/>
              <span>Custom structure</span>
            </label>
         </div>
      </div>

      <div class="tabsContent">
         <div if={state.tab == "simple"}>
            <nvh-schema selected-modules={[...structureStore.data.basic_modules]}
                  on-modules-change={onBasicSchemaModulesChange}
                  on-schema-change={onBasicSchemaChange}
                  on-schema-loaded={onBasicSchemaLoaded}/>
         </div>

         <div if={state.tab == "advanced"}>
            <structure-editor/>
         </div>

         <div if={state.tab == "custom"}
               class="tabCustom">
            <div class="tabCustomForm">
               <p class="mt-0 mb-12">To specify your custom Lexonomy schema use <i>NVH schema</i>.
                  Learn more about NVH schema at <a href="https://www.namevaluehierarchy.org/schema.html" target="_blank">namevaluehierarchy.org</a>.
               </p>
               <div class="mb-16">
                  <div class="input-field">
                     <span class="schemaSyntaxToggleBtn">
                        <i class="material-icons tiny mr-2">help</i>
                        <a href="javascript:void(0)"
                              onclick={onToggleSchemaSyntaxClick}>
                           Schema syntax
                        </a>
                     </span>
                     <textarea id="custom_NVHSchema"
                           class="materialize-textarea {state.custom_NVHSchemaError ? 'invalid' : ''}"
                           oninput={onSchemaInput}>{structureStore.data.custom_NVHSchema}</textarea>
                     <label for="custom_NVHSchema">Your NVH schema</label>
                     <div class="textareaErrorMessage red-text">
                        <small>
                           {state.custom_NVHSchemaError}
                        </small>
                     </div>
                     <div class="buttons">
                        <button id="custom_importFromSimple"
                              class="btn btn-secondary {!structureStore.data.basic_modules || !structureStore.data.basic_modules.length ? 'disabled' : ''}"
                              onclick={onCustomImportFromSimpleClick}>Import from Simple settings</button>
                        <!--button id="custom_importFromSimple"
                              class="btn btn-secondary {!structureStore.data.advanced_structure.root ? 'disabled' : ''}"
                              onclick={onCustomImportFromAdvancedClick}>Import from Advanced settings</button-->
                        <button id="custom_importFromSimple"
                              class="btn btn-secondary "
                              onclick={onLoadSampleNVHSchemaClick}>Load sample NVH schema</button>
                     </div>
                  </div>
               </div>
               <div class="input-field">
                  <textarea id="custom_newEntryTemplate"
                        class="materialize-textarea {state.custom_newEntryTemplateError ? 'invalid' : ''}"
                        oninput={onNewEntryInput}>{structureStore.data.custom_newEntryTemplate}</textarea>
                  <label for="custom_newEntryTemplate">NVH template for new entries</label>
                  <div class="textareaErrorMessage red-text">
                     <small>
                        {state.custom_newEntryTemplateError}
                     </small>
                  </div>
                  <div class="buttons">
                     <button id="custom_generateNewNVHBtn"
                           class="btn btn-secondary {structureStore.data.custom_NVHSchema ? '' : 'disabled'}"
                           onclick={onGenerateNewNVHClick}>Generate from NVH schema</button>
                     <button id="custom_loadSampleNVHTemplateBtn"
                           class="btn btn-secondary"
                           onclick={onExampleNewEntryTemplateClick}>Load sample NVH template</button>
                  </div>
               </div>
            </div>
            <div id="schemaSyntax"
                  class="tabCustomLegend p-6 z-depth-2 grey lighten-5" style="display: none; top: min(4vh, 80px); right: 50px;">
               <button class="btn btn-flat btn-floating right"
                     onclick={onToggleSchemaSyntaxClick}>
                  <i class="material-icons grey-text">close</i>
               </button>
               <h3 class="mt-0">NVH schema syntax</h3>
               <div>
                  Each row in NVH schema must be in the following form:
               </div>
               <div class="center-align grey lighten-4 monospace mt-2" style="font-size: 1.3em;">
                  <span class="teal-text">INDENT </span>
                  <span class="blue-text">NAME: </span>
                  <span class="red-text">COUNT </span>
                  <span class="green-text">TYPE </span>
                  <span class="orange-text">[VALUES]</span>
                  <span class="purple-text">~REGEX </span>
               </div>
               <ul class="syntaxElementPartList">
                  <li>
                     <span class="teal-text">INDENT</span>
                     <div class="ml-4">
                        Each child element must be two spaces more indented than its parent element. Root element has no indentation.
                     </div>
                  </li>
                  <li>
                     <span class="blue-text">NAME</span>
                     <small class="ml-2 grey-text">required</small>
                     <div class="ml-4">
                        Unique element name followed by a colon. Allowed characters are <span class="monospace">a-Z</span>, <span class="monospace">A-Z</span>, <span class="monospace">0-9</span>, <span class="monospace">-</span> and <span class="monospace">_</span>.
                     </div>
                  </li>
                  <li class="syntaxCount">
                     <span class="red-text">COUNT</span>
                     <small class="ml-2 grey-text">optional</small>
                     <div class="ml-4">
                        Specifies the number of elements (with this name) in parent element.
                        <ul class="ml-4">
                           <li>
                              <span class="syntaxValue monospace">?</span>
                              <span class="grey-text ml-2">zero or one</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">*</span>
                              <span class="grey-text ml-2">zero or more</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">+</span>
                              <span class="grey-text ml-2">one or more</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">1</span>
                              <span class="grey-text ml-2">exactly one</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">-5</span>
                              <span class="grey-text ml-2">zero to five</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">2-</span>
                              <span class="grey-text ml-2">two or more</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">3-4</span>
                              <span class="grey-text ml-2">three to four</span>
                           </li>
                        </ul>
                     </div>
                  </li>
                  <li class="syntaxType">
                     <span class="green-text">TYPE</span>
                     <small class="ml-2 grey-text">optional</small>
                     <div class="ml-4">
                        Specifies the element value type. If ommited, "string" is used.
                        <ul class="ml-4">
                           <li>
                              <span class="syntaxValue monospace">string</span>
                              <span class="grey-text ml-2">text value</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">int</span>
                              <span class="grey-text ml-2">numeric value</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">image</span>
                              <span class="grey-text ml-2">image URL</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">audio</span>
                              <span class="grey-text ml-2">audio URL</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">url</span>
                              <span class="grey-text ml-2">general URL</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">empty</span>
                              <span class="grey-text ml-2">element without value, it may have child elements</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">bool</span>
                              <span class="grey-text ml-2">Yes or No</span>
                           </li>
                           <li>
                              <span class="syntaxValue monospace">list</span>
                              <span class="grey-text ml-2">list of values</span>
                           </li>
                        </ul>
                     </div>
                  </li>
                  <li>
                     <span class="orange-text">VALUES</span>
                     <small class="ml-2 grey-text">optional</small>
                     <div class="ml-4">
                        List of allowed values in double quotes, separated with comma, enclosed in square brackets (e.g. <span class="monospace">["red","blue","green"]</span>). Element with specified "values" will be displayed as dropdown select.
                     </div>
                  </li>
                  <li>
                     <span class="purple-text">REGEX</span>
                     <small class="ml-2 grey-text">optional</small>
                     <div class="ml-4">
                        You can use a regular expression to restrict the value of an element. Regular expression must be preceded by <span class="monospace">~</span>.
                     </div>
                  </li>
               </ul>
            </div>
         </div>

         <div class="mt-16">
            <dict-config-buttons save-data={save}></dict-config-buttons>
         </div>
      </div>
   </div>

   <script>
      export default {
         bindings: [["structureStore",  "elementChanged", "refreshBtnSaveDisabled"]],

         state: {
            isLoading: true,
            isBusy: false,
            tab: "simple",
            data: null,
            brokenConfig: null,
            custom_NVHSchemaError: "",
            custom_newEntryTemplateError: ""
         },

         onBeforeMount(){
            this.structureStore = window.structureEditorStore
         },

         onMounted() {
            this.store.loadDictionaryConfig("structure")
                  .done(response => {
                     if(response.content.tab){
                        // new data format (NVH lexonomy)
                        this.state.tab = response.content.tab
                        Object.assign(this.structureStore.data, {
                           basic_modules: response.content.basic_modules || [],
                           advanced_structure: response.content.advanced_structure || {elements: {}, root: null},
                           custom_NVHSchema: response.content.custom_NVHSchema || "",
                           custom_newEntryTemplate: response.content.custom_newEntryTemplate || ""
                        })
                        if(response.content.advanced_structure){
                           this.structureStore.setConfigStructure(response.content.advanced_structure)
                        }
                     } else {
                        // old data format (XML lexonomy)
                        this.state.tab = (response.content._nvh || response.content._nvhSchema) ? "custom" : "advanced"
                        Object.assign(this.structureStore.data, {
                           custom_NVHSchema: response.content._nvhSchema || "",
                           custom_newEntryTemplate: response.content._nvh || "",
                        })
                        this.structureStore.setConfigStructure(response.content)
                     }
                     if(this.state.tab == "simple"){
                        if(!this.store.isStructureValid()){
                           this.state.brokenConfig = this.state.data
                           this.state.data = {
                              elements: {
                                 entry: {
                                    children: [],
                                    type: "txt"
                                 }
                              },
                              root: "entry"
                           }
                        }
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     if(this.state.tab == "custom"){
                        $("#custom_generateNewNVHBtn").toggleClass("disabled", !this.structureStore.data.custom_NVHSchema || !!this.state.custom_NVHSchemaError)
                        this.refreshCustomTextFields()
                     }
                     this.refreshBtnSaveDisabled()
                  })
         },

         onUpdated(){
            if(this.state.tab == "custom"){
               window.makeElementDraggable("#schemaSyntax", "#schemaSyntax h3")
            }
         },

         onSchemaInput(evt){
            this.structureStore.data.custom_NVHSchema = evt.target.value
            this.validateNVHSyntax("custom_NVHSchema")
            this.refreshBtnSaveDisabled()
            $("#custom_generateNewNVHBtn").toggleClass("disabled", !evt.target.value || !!this.state.custom_NVHSchemaError)
         },

         onNewEntryInput(evt){
            this.structureStore.data.custom_newEntryTemplate = evt.target.value
            this.validateNVHSyntax("custom_newEntryTemplate")
            this.refreshBtnSaveDisabled()
         },

         onGenerateNewNVHClick(){
            this.setCustomNewEntryTemplate(window.nvhStore.nvhSchemaToNvh($("#custom_NVHSchema").val()))
         },

         onTabChange(tab){
            this.update({tab: tab})
            this.refreshBtnSaveDisabled()
            if(tab == "custom"){
               this.refreshCustomTextFields()
            }
         },

         onBasicSchemaLoaded(schemas){
            if(!this.structureStore.data.basic_modules.length){
               this.structureStore.data.basic_modules = schemas.filter(schema => schema.checked || schema.required)
                     .map(schema => schema.key.split(".").pop())
               this.update()
            }
         },

         onBasicSchemaModulesChange(modules){
            this.structureStore.data.basic_modules = modules
            this.update()
         },

         onBasicSchemaChange(schema, finalSchema){
            this.structureStore.data.basic_finalSchema = finalSchema
            this.refreshBtnSaveDisabled()
         },

         onCustomImportFromSimpleClick(){
            this.update({isBusy: true})
            this.store.loadFinalSchema(this.structureStore.data.basic_modules)
                  .always(response => {
                     this.update({isBusy: false})
                     response.schemafinal && this.setCustomNVHSchema(response.schemafinal)
                  })
         },

         /*onCustomImportFromAdvancedClick(){
            this.setCustomNVHSchema(this.structureStore.getNvh())
         },*/

         onExampleNewEntryTemplateClick() {
            this.structureStore.data.custom_newEntryTemplate = `entry:  \n  headword:`
            $("#custom_newEntryTemplate").val(this.structureStore.data.custom_newEntryTemplate)
            this.refreshBtnSaveDisabled()
            this.refreshCustomTextFields()
         },

         onLoadSampleNVHSchemaClick() {
            this.setCustomNVHSchema(`entry:\n  headword:\n  partOfSpeech: ?\n  sense: +\n    definition: ?\n    example: *\n  `)
         },

         onShowBrokenStructureClick(){
            window.modal.open({
               title: "Broken structure",
               tag: "raw-html",
               props: {
                  content: JSON.stringify(this.state.brokenConfig)
               }
            })
         },

         onToggleSchemaSyntaxClick(){
            $("#schemaSyntax").toggle()
         },

         save() {
            this.update({isBusy: true})
            if (this.state.tab == "advanced"){
               this.saveData(this.structureStore.getStructureToSave())
            } else {
               let schema = ""
               if(this.state.tab == "simple"){
                  schema =this.structureStore.data.basic_finalSchema
               } else{
                  schema = this.structureStore.data.custom_NVHSchema
               }
               this.store.schemaToJSON(schema)
                     .done(response => {
                        this.saveData({
                           elements: JSON.parse(response.schemajson),
                           root: response.schemajson.split(":", 1)[0].replace(/["{]/g, "")
                        })
                     })
                     .fail(payload => {
                        this.update({isBusy: false})
                     })
            }
         },

         saveData(data){
            Object.assign(data, {
               tab: this.state.tab,
               basic_modules: this.structureStore.data.basic_modules,
               advanced_structure: this.structureStore.getStructureToSave(),
               custom_NVHSchema: this.structureStore.data.custom_NVHSchema,
               custom_newEntryTemplate: this.structureStore.data.custom_newEntryTemplate
            })
            data.tab = this.state.tab
            this.store.updateDictionaryConfig("structure", data)
                  .done(response => {
                     this.state.brokenConfig = null
                  })
                  .always(() => this.update({isBusy: false}))
         },

         setCustomNVHSchema(nvhSchema){
            this.structureStore.data.custom_NVHSchema = nvhSchema
            $("#custom_NVHSchema").val(nvhSchema)
            $("#custom_generateNewNVHBtn").removeClass("disabled")
            this.validateNVHSyntax("custom_NVHSchema")
            this.refreshCustomTextFields()
            this.refreshBtnSaveDisabled()
         },

         setCustomNewEntryTemplate(newEntryTemplate){
            this.structureStore.data.custom_newEntryTemplate = newEntryTemplate
            $("#custom_newEntryTemplate").val(newEntryTemplate)
            this.validateNVHSyntax("custom_newEntryTemplate")
            this.refreshCustomTextFields()
            this.refreshBtnSaveDisabled()
         },

         validateNVHSyntax(key){
            let error = ""
            if(!this.structureStore.data[key].trim()){
               if(key == "custom_NVHSchema"){
                  error = "Please, enter valid schema."
               }
            } else {
               try{
                  let entry = window.nvhStore.nvhToJson(this.structureStore.data[key])
                  let elementList = window.nvhStore.getElementList(entry)
                  elementList.forEach(element => {
                     this.structureStore.validateElementName(element.name)
                     if(elementList.filter(element2 => element.name == element2.name).length > 1){
                        throw `Duplicate element ${element.name}. Element name must be unique.`
                     }
                  })
               } catch (e){
                  error = e
               }
            }
            if(error != this.state[key + "Error"]){
               this.update({[key + "Error"]: error})
            }
         },

         refreshBtnSaveDisabled(){
            let disabled = false
            if(this.state.tab == "simple"){
               disabled = !this.structureStore.data.basic_finalSchema
            } else if(this.state.tab == "advanced"){
               disabled = !this.structureStore.data.structure.root
            } else if(this.state.tab == "custom"){
               disabled = !$("#custom_NVHSchema", this.root).val()
                     || !!this.state.custom_NVHSchemaError
                     || !!this.state.custom_newEntryTemplateError
            }
            $("#submit_button", this.root).toggleClass("disabled", disabled)
         },

         refreshCustomTextFields(){
            M.updateTextFields()
            M.textareaAutoResize($("#custom_NVHSchema"))
            M.textareaAutoResize($("#custom_newEntryTemplate"))
         }
      }
   </script>

   <style type="scss">
      .contentWrapper{
         gap: 40px;
         @media screen and (max-width: 900px) {
            flex-wrap: wrap;
         }
      }
      .settingsRadio{
         width: 250px;
      }
      .tabsContent{
         width: 100%;
      }
      .customFieldWithButtons{
         display: flex;
         gap: 20px;
      }
      textarea{
         min-height: 89px;
      }
      .textareaErrorMessage{
         min-height: 24px;
         position: relative;
         top: -15px;
      }
      .tabs {
         border-bottom: none;
         a.active{
            background-color: #fafafa;
         }
      }
      .tabCustom{
         .schemaSyntaxToggleBtn{
            position: absolute;
            right: 0;
            top: -22px;
            display: flex;
            align-items: center;
         }
         .tabCustomForm{
            max-width: 760px;
            flex: 1
         }
         .tabCustomLegend{
            max-width: 580px;
            min-width: 580px;
            max-height: 95vh;
            overflow: auto;
            .syntaxElementPartList{
               & > li{
                  margin-top: 0.2rem;
               }
               ul li{
                  line-height: 1.2rem;
               }
            }
            .syntaxValue{
               display: inline-block;
            }
            .syntaxType{
               .syntaxValue{
                  min-width: 60px;
               }
            }
            .syntaxCount{
               .syntaxValue{
                  min-width: 30px;
               }
            }
         }
      }
   </style>
</dict-config-structure>
