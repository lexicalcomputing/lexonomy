<dict-config-structure>
   <loading-overlay if={state.isLoading || state.isBusy}/>
   <h1 class="pageTitle">Entry structure</h1>
   <dict-configuration-issues config-id="structure"/>

   <template if={!state.isLoading}>
      <div if={(structureStore.data.mode != "custom" || structureStore.data.tab != "code") && structureStore.data.brokenConfig}
            class="message messageError">
         The structure is broken. You can fix the structure in the source code editor mode.
         <br>
         <button class="btn mt-4"
               onclick={onOpenSourceCodeClick}>
            edit structure
         </button>
      </div>
      <structure-editor save={save}/>

      <div if={!structureStore.data.brokenConfig}
            class="pt-4">
         <div class="switch">
            <label>
               <input name="new_entry_template"
                     type="checkbox"
                     checked={state.hasNewEntryTemplate}
                     onchange={onHasNewEntryTemplateChange} >
               <span class="lever"></span>
               Set new entry template
            </label>
         </div>
         <div if={state.hasNewEntryTemplate}
               class="newEntryTemplateSettings">
            <div class="grey-text mb-4">
               Select elements to be automatically added when creating a new entry.
               <br>
               You can also set a default values for newly added elements.
            </div>
            <new-entry-template schema={schema}
                  new-entry-template={state.newEntryTemplate}
                  on-change={onNewEntryTemplateChange}/>
         </div>
      </div>

      <div class="mt-16">
         <dict-config-buttons save-data={save}/>
      </div>
   </template>


   <script>
      export default {
         state: {
            isLoading: true,
            isBusy: false,
         },

         onBeforeMount(){
            this.schema = new window.NvhSchemaClass()
            this.structureStore = window.structureEditorStore
            this.structureStore.reset()
            this.structureStore.setSchema(this.schema)
            this.bindings = [["structureStore",  "brokenConfigChanged", "update"],
                             ["structureStore", "elementChanged", "refreshBtnSaveDisabled"],
                             ["schema", "schemaChanged", "refreshBtnSaveDisabled"],
                             ["schema", "isValidChanged", "refreshBtnSaveDisabled"]]
         },

         onMounted() {
            this.store.loadDictionaryConfig("structure")
                  .done(response => {
                     if(response.success){
                        this.structureStore.data.mode = response.content.mode || "dmlex"
                        this.structureStore.data.tab = ["visual", "code"].includes(response.content.tab) ? response.content.tab : "visual"
                        this.structureStore.data.DMLexSettings = response.content.DMLexSettings
                              || {
                                    modules: [],
                                    xlingual_langs: [],
                                    etymology_langs: [],
                                    showMoreSettings: false,
                                    selectedElements: []
                                 }
                        let nvh = response.content.nvhSchema
                        this.schema.update(nvh)
                        this.state.newEntryTemplate = response.content.newEntryTemplate
                        this.state.hasNewEntryTemplate = response.content.hasNewEntryTemplate
                        this.structureStore.data.originalSchema = nvh
                        this.structureStore.data.originalDmlexSettings = window.deepCopy(this.structureStore.data.DMLexSettings)
                        if(this.structureStore.data.mode != "custom"
                                 && this.structureStore.data.tab != "code"
                                 && !this.schema.isValid
                                 && this.schema.parseError){
                              this.structureStore.data.brokenConfig = true
                        }
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                  })
         },

         onOpenSourceCodeClick(){
            this.structureStore.data.mode = "custom"
            this.structureStore.data.tab = "code"
            this.update()
         },

         onHasNewEntryTemplateChange(){
            if(!this.state.hasNewEntryTemplate && !this.state.newEntryTemplate){
               this.state.newEntryTemplate = {
                  defaultElements: {},
                  defaultValues: {}
               }
            }
            this.update({hasNewEntryTemplate: !this.state.hasNewEntryTemplate})
         },

         onNewEntryTemplateChange(newEntryTemplate){
            this.state.newEntryTemplate = newEntryTemplate
         },

         save() {
            this.update({isBusy: true})
            let data = {
               nvhSchema: this.schema.getNvh(),
               mode: this.structureStore.data.mode,
               tab: this.structureStore.data.tab,
               DMLexSettings: this.structureStore.data.DMLexSettings,
               hasNewEntryTemplate: this.state.hasNewEntryTemplate,
               newEntryTemplate: this.deleteInvalidElementsInNewEntryTemplate()
            }
            return this.store.updateDictionaryConfig("structure", data)
                  .done(response => {
                     this.structureStore.data.brokenConfig = null
                     this.structureStore.data.originalSchema = this.schema.getNvh()
                     this.structureStore.data.originalDmlexSettings = window.deepCopy(this.structureStore.data.DMLexSettings)
                  })
                  .always(() => this.update({isBusy: false}))
         },

         deleteInvalidElementsInNewEntryTemplate(nvh){
            if(this.state.hasNewEntryTemplate){
               let newEntryTemplate = this.state.newEntryTemplate
               let elementsInStructure = this.schema.getElementList()
                     .map(element => element.path)
               const deleteInvalid = elements => {
                  Object.keys(elements).forEach(elementPath => {
                     if(!elementsInStructure.includes(elementPath)){
                        delete elements[elementPath]
                     }
                  })
               }
               deleteInvalid(newEntryTemplate.defaultElements)
               deleteInvalid(newEntryTemplate.defaultValues)
               return newEntryTemplate
            }
            return null
         },

         refreshBtnSaveDisabled(){
            let disabled = !!this.structureStore.data.editedElement
                  || !this.schema.isValid
                  || this.schema.isEmpty()
            $("dict-config-buttons .submitButton", this.root).toggleClass("disabled", disabled)
         }
      }
   </script>

   <style type="scss">
      .newEntryTemplateSettings{
         padding: 10px 0 0 36px;
      }
   </style>
</dict-config-structure>
