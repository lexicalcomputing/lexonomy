<dict-config-structure>
   <loading-overlay if={state.isLoading || state.isBusy}/>
   <h1 class="pageTitle">Entry structure</h1>
   <dict-configuration-issues config-id="structure"/>

   <div if={state.tab == "dmlex" && state.brokenConfig}
         class="message messageError">
      Structure is broken. Empty structure is used instead.
      <a href="javascript:void(0);"
            onclick={onShowBrokenStructureClick}>show broken structure</a>
   </div>

   <div if={!state.isLoading}
         class="contentWrapper displayFlex">
      <div class="settingsRadio borderRight pr-4">
         <label >
           <input name="structure"
               value="dmlex"
               onclick={onTabRadioMouseDown}
               type="radio"
               checked={state.tab == "dmlex"}
               onchange={onTabChange}/>
           <span>DMLex Standard</span>
         </label>
         <label>
           <input name="structure"
               value="advanced"
               onclick={onTabRadioMouseDown}
               type="radio"
               checked={state.tab == "advanced"}
               onchange={onTabChange}/>
           <span>Custom structure</span>
         </label>
         <label >
           <input name="structure"
               value="custom"
               onclick={onTabRadioMouseDown}
               type="radio"
               checked={state.tab == "custom"}
               onchange={onTabChange}/>
           <span>Custom NVH schema</span>
         </label>
      </div>

      <div class="tabsContent">
         <div if={state.tab == "dmlex"}>
            <nvh-schema modules={state.dmlex_modules}
                  xlingual_langs={state.xlingual_langs}
                  etymology_langs={state.etymology_langs}
                  on-change={onDMLexChange}
                  on-schema-change={onDMLexSchemaChange}/>
         </div>

         <div if={state.tab == "advanced"}>
            <structure-editor/>
         </div>

         <div if={state.tab == "custom"}
               class="tabCustom">
            <div class="tabCustomForm">
               <p class="mt-0 mb-12">To specify your custom Lexonomy schema use <i>NVH schema</i>.
                  Learn more about NVH schema at <a href="https://www.namevaluehierarchy.org/schema.html" target="_blank">namevaluehierarchy.org</a>.
               </p>
               <div class="mb-16">
                  <div class="input-field">
                     <nvh-schema-textarea riot-value={state.schemaNvh}
                           on-valid-change={onNVHSchemaValidChange}
                           on-input={onNVHSchemaInput}/>
                     <label for="custom_NVHSchema">Your NVH schema</label>
                  </div>
                  <div class="buttons">
                     <button id="custom_loadSampleNVHSchema"
                           class="btn btn-secondary "
                           onclick={onLoadSampleNVHSchemaClick}>Load sample NVH schema</button>
                  </div>
               </div>
               <div class="input-field">
                  <textarea id="custom_newEntryTemplate"
                        class="materialize-textarea {state.custom_newEntryTemplateError ? 'invalid' : ''}"
                        oninput={onNewEntryTemplateInput}>{state.custom_newEntryTemplate}</textarea>
                  <label for="custom_newEntryTemplate">NVH template for new entries</label>
                  <div class="textareaErrorMessage red-text">
                     <small>
                        {state.custom_newEntryTemplateError}
                     </small>
                  </div>
                  <div class="buttons">
                     <button id="custom_generateNewNVHBtn"
                           class="btn btn-secondary {state.schemaNvh ? '' : 'disabled'}"
                           onclick={onNewEntryFromNVHSchemaClick}>Generate from NVH schema</button>
                  </div>
               </div>
            </div>
         </div>

         <div class="mt-16">
            <dict-config-buttons save-data={save}/>
         </div>
      </div>
   </div>

   <script>
      export default {
         bindings: [["structureStore",  "elementChanged", "onStructureEditorElemenChange"]],

         state: {
            isLoading: true,
            isBusy: false,
            tab: "dmlex",
            data: null,
            brokenConfig: null,
            isCustomNVHSchemaValid: null,
            custom_newEntryTemplate: "",
            custom_newEntryTemplateError: "",
            DMLexSchema: null,
            changed: false
         },

         onBeforeMount(){
            this.structureStore = window.structureEditorStore
         },

         onMounted() {
            this.store.loadDictionaryConfig("structure")
                  .done(response => {
                     if(response.success){
                        this.state.tab = response.content.tab
                        this.state.dmlex_modules = response.content.dmlex_modules || []
                        this.state.xlingual_langs = response.content.xlingual_langs || []
                        this.state.etymology_langs = response.content.etymology_langs || []
                        this.state.custom_newEntryTemplate = response.content.custom_newEntryTemplate || ""
                        this.structureStore.setConfigStructure(response.content)
                        this.state.originalStructure = {...this.structureStore.data.structure}
                        this.state.originalDmlex_modules = [...this.state.dmlex_modules]
                        this.state.originalXlingual_langs = [...this.state.xlingual_langs]
                        this.state.originalEtymology_langs = [...this.state.etymology_langs]
                        if(this.state.tab == "custom"){
                           this.state.schemaNvh = this.structureStore.getNvh()
                        }
                        if(this.state.tab == "dmlex"){
                           if(!this.store.isStructureValid()){
                              this.state.brokenConfig = this.state.data
                              this.state.data = {
                                 elements: {
                                    entry: {
                                       children: [],
                                       type: "txt"
                                    }
                                 },
                                 root: "entry"
                              }
                           }
                        }
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     if(this.state.tab == "custom"){
                        $("#custom_generateNewNVHBtn").toggleClass("disabled", !this.state.schemaNvh || !this.state.isCustomNVHSchemaValid)
                        this.refreshCustomTextFields()
                     }
                     this.refreshBtnSaveDisabled()
                  })
         },

         onNVHSchemaInput(schema){
            this.state.schemaNvh = schema
            this.state.changed = true
            this.refreshBtnSaveDisabled()
         },

         onNVHSchemaValidChange(isValid){
            this.state.isCustomNVHSchemaValid = isValid
            this.refreshBtnSaveDisabled()
            $("#custom_generateNewNVHBtn").toggleClass("disabled", !isValid)
         },

         onNewEntryTemplateInput(evt){
            this.state.custom_newEntryTemplate = evt.target.value
            let error = ""
            try{
               let entry = window.nvhStore.nvhToJson(evt.target.value)
            } catch(e){
               error = e
            }
            if(error != this.state.custom_newEntryTemplateError){
               this.update({custom_newEntryTemplateError: error})
            }
            this.refreshBtnSaveDisabled()
         },

         onNewEntryFromNVHSchemaClick(){
            let newEntryTemplate = window.nvhStore.nvhSchemaToNewEntryTemplate(this.state.schemaNvh)
            this.state.custom_newEntryTemplate = newEntryTemplate
            $("#custom_newEntryTemplate").val(newEntryTemplate)
            this.refreshCustomTextFields()
            this.refreshBtnSaveDisabled()
         },

         onTabChange(evt){
            this.changeTab(evt.target.value)
         },

         changeTab(newTab, updateStructure=true){
            if(updateStructure){
               if(this.state.tab == "dmlex"){
                  this.structureStore.setConfigStructure(this.state.DMLexSchema)
               } else if(this.state.tab == "custom"){
                  this.structureStore.setConfigStructure(this.structureStore.nvhToStructure(this.state.schemaNvh))
               }
            }
            if(newTab == "custom"){
               this.state.schemaNvh = this.structureStore.getNvh()
            }
            this.update({
               tab: newTab,
               changed: false,
            })
            this.refreshBtnSaveDisabled()
            if(newTab == "custom"){
               this.refreshCustomTextFields()
            }
         },

         onTabRadioMouseDown(evt){
            let tab = evt.target.value
            if(tab != this.state.tab){
               if(this.state.changed){
                  if(this.isSchemaValid()){
                     window.modal.open({
                        title: "Save changes?",
                        tag: "raw-html",
                        props: {
                           content: "Before changing the structure setting mode you need to save changes first or discard the changes."
                        },
                        small: true,
                        showCloseButton: false,
                        buttons: [{
                           label: "Cancel",
                           onClick: window.modal.close
                        }, {
                           label: "discard",
                           onClick: function(tab, dialog, modal){
                              this.structureStore.setConfigStructure(this.state.originalStructure)
                              this.changeTab(tab, false)
                              modal.close()
                           }.bind(this, tab)
                        }, {
                           label: "save",
                           onClick: function(tab, dialog, modal){
                              this.save()
                                    .done(function(tab){
                                       this.changeTab(tab)
                                       modal.close()
                                    }.bind(this, tab))
                           }.bind(this, tab)
                        }]
                     })
                  } else {
                     window.modal.open({
                        title: "Discard changes?",
                        tag: "raw-html",
                        props: {
                           content: "There is an error in the structure. Before changingthe  structure setting mode you need to fix the structure first or discard the changes."
                        },
                        small: true,
                        showCloseButton: false,
                        buttons: [{
                           label: "Cancel",
                           onClick: window.modal.close
                        }, {
                           label: "discard",
                           onClick: function(tab, dialog, modal){
                              this.structureStore.setConfigStructure(this.state.originalStructure)
                              this.changeTab(tab, false)
                              modal.close()
                           }.bind(this, tab)
                        }]
                     })
                  }
                  evt.stopPropagation()
                  evt.preventDefault()
               }
            }
         },

         onDMLexChange(dmlex_modules, xlingual_langs, etymology_langs){
            this.state.dmlex_modules = dmlex_modules
            this.state.xlingual_langs = xlingual_langs
            this.state.etymology_langs = etymology_langs
            this.state.changed = !window.objectEquals(dmlex_modules, this.state.originalDmlex_modules)
                  || !window.objectEquals(xlingual_langs, this.state.originalXlingual_langs)
                  || !window.objectEquals(etymology_langs, this.state.originalEtymology_langs)
            this.refreshBtnSaveDisabled()
         },

         onDMLexSchemaChange(DMLexSchema){
            this.state.DMLexSchema = DMLexSchema
            this.refreshBtnSaveDisabled()
         },

         onStructureEditorElemenChange(){
            this.state.changed = true
            this.refreshBtnSaveDisabled()
         },

         onLoadSampleNVHSchemaClick() {
            this.structureStore.data.custom_NVHSchema = `entry:\n  headword:\n  partOfSpeech: ?\n  sense: +\n    definition: ?\n    example: *\n  `
            this.update()
            $("#custom_generateNewNVHBtn").removeClass("disabled")
            this.state.isCustomNVHSchemaValid = true
            this.refreshCustomTextFields()
            this.refreshBtnSaveDisabled()
         },

         onShowBrokenStructureClick(){
            window.modal.open({
               title: "Broken structure",
               tag: "raw-html",
               props: {
                  content: JSON.stringify(this.state.brokenConfig)
               }
            })
         },

         save() {
            this.update({isBusy: true})
            let structure
            if(this.state.tab == "dmlex"){
               structure = {
                  elements: this.state.DMLexSchema.elements,
                  root: this.state.DMLexSchema.root
               }
            } else if(this.state.tab == "advanced"){
               structure = this.structureStore.data.structure
            } else if(this.state.tab == "custom"){
               structure = this.structureStore.nvhToStructure(this.state.schemaNvh)
            }
            let data = {
               jsonSchema: Object.assign({
                  tab: this.state.tab,
                  dmlex_modules: this.state.dmlex_modules,
                  xlingual_langs: this.state.xlingual_langs,
                  etymology_langs: this.state.etymology_langs
               }, structure)
            }

            return this.store.updateDictionaryConfig("structure", data)
                  .done(response => {
                     this.state.brokenConfig = null
                     this.state.changed = false
                     this.state.originalStructure = {...response.content.jsonSchema}
                     this.state.originalDmlex_modules = [...this.state.dmlex_modules]
                     this.state.originalXlingual_langs = [...this.state.xlingual_langs]
                     this.state.originalEtymology_langs = [...this.state.etymology_langs]
                  })
                  .always(() => this.update({isBusy: false}))
         },

         isSchemaValid(){
            if(this.state.tab == "dmlex"){
               return !!this.state.DMLexSchema
            } else if(this.state.tab == "advanced"){
               return !!this.structureStore.data.structure.root
                           && !this.structureStore.data.editedElement
            } else if(this.state.tab == "custom"){
               return !!this.state.schemaNvh
                     && this.state.isCustomNVHSchemaValid
                     && !this.state.custom_newEntryTemplateError
            }
         },

         refreshBtnSaveDisabled(){
            $("#submit_button", this.root).toggleClass("disabled", !this.isSchemaValid())
         },

         refreshCustomTextFields(){
            M.updateTextFields()
            M.textareaAutoResize($("#custom_newEntryTemplate"))
         }
      }
   </script>

   <style type="scss">
      .contentWrapper{
         gap: 40px;
         @media screen and (max-width: 900px) {
            flex-wrap: wrap;
         }
      }
      .settingsRadio{
         width: 250px;
         span{
            white-space: nowrap;
         }
      }
      .tabsContent{
         width: 100%;
      }
      .customFieldWithButtons{
         display: flex;
         gap: 20px;
      }
      textarea{
         min-height: 89px;
      }
      .textareaErrorMessage{
         min-height: 24px;
         position: relative;
         top: -15px;
      }
      .tabs {
         border-bottom: none;
         a.active{
            background-color: #fafafa;
         }
      }
      .tabCustom{
         .tabCustomForm{
            max-width: 760px;
            flex: 1
         }
      }
   </style>
</dict-config-structure>
