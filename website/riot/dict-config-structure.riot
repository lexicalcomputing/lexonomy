<dict-config-structure>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <h1>Entry structure</h1>
   <div if={(!state.data._nvhSchema || state.data._nvhSchema == "") && !state.override }
         class="mb-8">
      <div id="editor"></div>

      <button class="btn waves-effect waves-light"
            onclick={ startOverride } >
         Use your own schema
         <i class="material-icons right">edit</i>
      </button>
   </div>

   <div if={(state.data._nvhSchema && state.data._nvhSchema != "") || state.override }
         class="mb-8">
      <div>
         <p>To specify your custom Lexonomy schema use <i>NVH schema</i>.
            Learn more about NVH schema at <a href="https://www.namevaluehierarchy.org/schema.html" target="_blank">namevaluehierarchy.org</a>.
         </p>
      </div>
      <div class="mb-4">
         <div class="input-field">
            <textarea id="editor_nvh_schema"
                  class="materialize-textarea"
                  oninput={onSchemaInput}>{ state.data._nvhSchema }</textarea>
            <label for="editor_nvh_schema">Your NVH schema</label>
            <span class="helper-text">
               If you would like to see an example,
               <a onclick={ exampleNVHSchema } class="pointer">click here to load a sample NVH schema</a>.
            </span>
         </div>
      </div>
      <div class="input-field" style="flex: 1">
         <div style="display: flex; gap: 20px;">
            <textarea id="editor_newEntryNvh"
                  class="materialize-textarea">{ state.data._newEntryNvh }</textarea>
            <button id="generateNewNVHBtn"
                  class="btn {state.data._newEntryNvh ? '' : 'disabled'}"
                  onclick={onGenerateNewNVHClick}>Generate from NVH schema</button>
         </div>
         <label for="editor_newEntryNvh">NVH template for new entries</label>
         <span class="helper-text">If you would like to see an example,
            <a onclick={ exampleNVH } class="pointer">click here to load a sample NVH template</a>.
         </span>
      </div>

      <div>
         <button class="btn waves-effect waves-light"
               onclick={ stopOverride } >
            Stop using your own schema
            <i class="material-icons left">arrow_back</i>
         </button>
      </div>
   </div>
   <dict-config-buttons save-data={saveData}></dict-config-buttons>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            override: false,
            data: {}
         },

         startOverride() {
            this.update({override: true})
         },

         stopOverride() {
            delete this.state.data._nvhSchema
            delete this.state.data._newEntryNvh
            this.update({override: false})
            this.structureDesigner.start(this.state.data)
         },

         onSchemaInput(evt){
            $("#generateNewNVHBtn").toggleClass("disabled", !evt.target.value)
         },

         onGenerateNewNVHClick(){
            $('#editor_newEntryNvh').val(window.nvhStore.nvhSchemaToNvh($('#editor_nvh_schema').val()))
            M.textareaAutoResize($('#editor_newEntryNvh'))
            M.updateTextFields()
         },

         exampleNVH() {
            $('#editor_newEntryNvh').val(`entry:  \n  headword:`)
            M.textareaAutoResize($('#editor_newEntryNvh'))
            M.updateTextFields()
         },

         exampleNVHSchema() {
            $('#editor_nvh_schema').val(`entry:\n  headword:\n  partOfSpeach: ?\n  sense: +\n    definition: ?\n    example: *\n  `)
            $("#generateNewNVHBtn").removeClass("disabled")
            M.textareaAutoResize($('#editor_nvh_schema'))
            M.updateTextFields()
         },

         onMounted() {
            this.structureDesigner = new StructureDesignerClass()
            this.store.loadDictionaryConfig("structure")
                  .done(response => {
                     this.state.data = response.content
                     this.state.override = this.state.data._nvh || this.state.data._nvhSchema
                  })
                  .always(() => {
                     this.update({isLoading: false})
                     if(this.state.override){
                        $("#generateNewNVHBtn").toggleClass("disabled", !this.state.data._nvhSchema)
                        M.updateTextFields()
                        M.textareaAutoResize($('#editor_newEntryNvh'))
                        M.textareaAutoResize($('#editor_nvh_schema'))
                     } else {
                        this.structureDesigner.start(this.state.data)
                     }
                  })
         },

         getConfigData() {
            var newData = {}
            if (this.structureDesigner.structure && this.structureDesigner.structure.elements) {
               for(var el in this.structureDesigner.structure.elements){
                  for(var prop in this.structureDesigner.structure.elements[el]){
                     if(prop.indexOf("_")==0) delete this.structureDesigner.structure.elements[el][prop]
                  }
               }
               newData = this.structureDesigner.structure
            }
            if (this.state.override) {
               if ($('#editor_newEntryNvh').val() != ""){
                  newData._newEntryNvh = $('#editor_newEntryNvh').val()
               }
               if ($('#editor_nvh_schema').val() != "") {
                  newData._nvhSchema = $('#editor_nvh_schema').val().trim()
                  try {
                     newData.elements = window.nvhStore.nvhSchemaToJSON(newData._nvhSchema)
                     newData.root = newData._nvhSchema.slplit(":", 1)[0]
                  } catch(e) {}
               }
            }
            return newData
         },

         saveData() {
            this.update({isSaving: true})
            this.store.updateDictionaryConfig("structure", this.getConfigData())
                  .always(() => this.update({isSaving: false}))
         }
      }
   </script>

   <style>
      #editor {
         position: relative !important;
         min-height: 750px;
      }
      #editor .list {
         width: 25% !important;
      }
      #editor .details {
         left: 25% !important;
      }
      #editor.designer input.textbox.cap {
         width: 15em !important;
      }
      #editor.designer input[type=radio] {
         opacity: 1 !important;
      }
   </style>
</dict-config-structure>
