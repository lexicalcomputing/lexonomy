<admin-dicts>
   <h1 class="pageTitle">All dictionaries</h1>
   <div class="topBar">
      <span class="searchBox input-field inputWithRightIcon">
         <i class="material-icons prefix grey-text">search</i>
         <input id="searchBox"
               value={state.query}
               oninput={onSearchInput}
               style="width: 150px;">
         <i onclick={onSearchCancelClick}
            class="material-icons rightIcon grey-text clickable">close</i>
      </span>

      <span class="newDictionaryButton">
         <a href="#/make"
               class="btn waves-effect waves-light">
            <i class="material-icons left">add</i>
            create new dictionary
         </a>
      </span>
   </div>
   <div class="tableWrapper positionRelative">
      <loading-overlay if={state.isLoading}/>
      <table if={state.dictionaries.length}
            class="highlight">
         <thead>
            <tr>
               <th each={column in state.columnList}
                     class="{column.id}Column noWrap">
                  <a if={column.allowSorting}
                        onclick={onSortClick.bind(this, column.id)}
                        class="sortArrow {state.orderBy == column.id ? 'active' : ''} ">
                     {column.label}
                     <i class="material-icons {state.desc ? 'sortDesc' : 'sortAsc'}">arrow_downwards</i>
                  </a>
                  <template if={!column.allowSorting}>
                     {column.label}
                  </template>
               </th>
            </tr>
         </thead>
         <tbody>
            <tr each={(dict, idx) in state.dictionaries}>
               <td class="dict">
                  <a href="#/{dict.id}"
                        id="t_{idx}">{dict.title}</a>
               </td>
               <td>
                  {dict.id}
               </td>
               <td class="dict-lang">
                  {dict.language}
               </td>
               <td class="dict-lang">
                  {dict.creator}
               </td>
               <td if={state.hasProgressColumn}>
                  <dict-progress if={dict.stats}
                        stats={dict.stats}/>
               </td>
               <td>
                  <dict-last-edited last-edit={dict.last_edit}/>
               </td>
               <td class="dictActions">
                  <a href="#/{dict.id}/edit"
                        class="clickable"
                        data-dict-id={dict.id}
                        title="edit dictionary">
                     <i class="material-icons">edit</i>
                  </a>
                  <a href="#/{dict.id}/config"
                        class="clickable"
                        title="config dictionary">
                     <i class="material-icons">settings</i>
                  </a>
                  <a class="clickable"
                        title="clone dictionary"
                        onclick={doCloneDict.bind(this, dict.id)}>
                     <i class="material-icons">content_copy</i>
                  </a>
                  <a class="clickable"
                        title="delete dictionary"
                        onclick={doDeleteDict.bind(this, dict.id)}>
                     <i class="material-icons">delete</i>
                  </a>
               </td>
            </tr>
         </tbody>
      </table>

      <template if={!state.isLoading}>
         <div if={state.hasMore}
               class="center-align">
            <button class="btn showMoreBtn"
                  onclick={onShowMoreClick}>Show more</button>
         </div>
         <div if={!state.isLoading && !state.dictionaries.length}
               class="center"
               style="margin: 10vh auto;">
            <h1 class="grey-text lighten-2">Nothing found</h1>
         </div>
      </template>
   </div>

   <script>
      export default{
         bindings: [["dispatcher", "userCameBack", "reload"]],

         state: {
            isLoading: true,
            dictionaries: [],
            query: "",
            howmany: 500,
            hasMore: false,
            searchDebounceTimer: null,
            searchRequest: null,
            hasProgressColumn: true,
            orderBy: "id",
            desc: true,
            columnList: [
               {
                  id: "title",
                  label: "Title",
                  allowSorting: true
               }, {
                  id: "id",
                  label: "ID",
                  allowSorting: true
               }, {
                  id: "language",
                  label: "Language",
                  allowSorting: true
               }, {
                  id: "creator",
                  label: "Author",
                  allowSorting: true
               }, {
                  id: "progress",
                  label: "Progress",
                  allowSorting: true
               }, {
                  id: "lastEdit",
                  label: "Last edit",
                  allowSorting: true
               }, {
                  id: "dictActions",
                  label: ""
               }
            ]
         },

         onMounted(){
            this.reload()
         },

         onBeforeUnmount(){
            this.state.searchRequest && this.state.searchRequest.abort()
         },

         reload(){
            this.state.searchRequest = this.store.loadAdminDictionaryList(this.state.query, this.state.howmany + 1)  // + 1 to find, if there are more than "howmany" items
                  .done(payload => {
                     this.state.hasMore = false
                     if(payload.entries.length == this.state.howmany + 1){
                        payload.entries.pop()
                        this.state.hasMore = true
                     }
                     this.state.dictionaries = payload.entries
                     this.state.hasProgressColumn = this.state.dictionaries.find(d => !!d.stats)
                     this.state.dictionaries.forEach(dictionary => {
                        dictionary.progress = String(dictionary.stats?.completed_per || "")
                        dictionary.lastEdit = dictionary.last_edit?.when || ""
                     })

                     this.sort()
                  })
                  .always(() => {
                     this.update({isLoading: false})
                  })
         },

         doCloneDict(dictId) {
            this.store.cloneDictionary(dictId)
         },

         doDeleteDict(dictId) {
            var dictTitle = this.state.dictionaries.find(dictionary => dictionary.id == dictId).title
            window.openConfirmDialog({
               title: "Delete dictionary?",
               content: `Are you sure you want to delete dictionary "${dictTitle}"? You will not be able to undo this.`,
               confirmLabel: "Delete",
               onConfirm: () => {
                  this.update({isLoading: true})
                  this.store.deleteDictionary(dictId)
                        .always(payload => {
                           if(!payload.error){
                              this.state.dictionaries = this.state.dictionaries.filter(dictionary => dictionary.id != dictId)
                           }
                           this.update({isLoading: false})
                        })
               }
            })
         },

         onSortClick(orderBy){
            if(this.state.orderBy == orderBy){
               this.state.desc = !this.state.desc
            }
            this.state.orderBy = orderBy
            this.sort()
            this.update()
         },

         onSearchInput(evt){
            this.state.query = evt.target.value
            this.searchDebounceTimer && clearTimeout(this.searchDebounceTimer)
            this.searchDebounceTimer = setTimeout(() => {
               this.state.searchRequest && this.state.searchRequest.abort()
               clearTimeout(this.searchDebounceTimer)
               this.update({
                  howmany: 500,
                  isLoading: true
               })
               this.reload()
            }, 300)
         },

         onSearchCancelClick(){
            this.update({
               query: "",
               howmany: 500,
               isLoading: true
            })
            this.reload()
         },

         onShowMoreClick(){
            this.update({
               howmany: this.state.howmany + 500,
               isLoading: true
            })
            this.reload()
         },

         sort(){
            let direction = this.state.desc ? -1 : 1
            this.state.dictionaries.sort((a, b) => {
               if(a[this.state.orderBy] === b[this.state.orderBy]){
                  if(a.title === b.title){
                     return a.id.localeCompare(b.id) * direction
                  } else {
                     return a.title.localeCompare(b.title) * direction
                  }
               } else{
                  if(a[this.state.orderBy] && b[this.state.orderBy]){
                     if(this.state.orderBy == "lastEdit"){
                        return (a.lastEdit > b.lastEdit ? -1 : 1) * direction
                     } else {
                        return a[this.state.orderBy].localeCompare(b[this.state.orderBy], undefined,  {numeric: true}) * direction
                     }
                  } else {
                      return a[this.state.orderBy] ? -1 : 1
                  }
               }
            })
         }
      }
   </script>

   <style type="scss">
      .topBar{
         display: flex;
         align-items: center;
         flex-wrap: wrap;
      }
      .newDictionaryButton{
         margin-left: auto;
      }
      .searchBox{
         max-width: 200px;
         display: inline-block;
         margin: 0 15px 0 0;
      }
      .tableWrapper{
         min-height: 50vh;
      }
      table td{
         padding: 10px 10px;
      }
      .dictActions{
         white-space: nowrap;
      }
      .showMoreBtn{
         margin: 30px 0;
      }
      .progressColumn{
         min-width: 100px;
         text-align: center;
      }
      .sortArrow{
         text-decoration: none;
         display: flex;
         gap: 5px;
         cursor: pointer;
         &:hover i{
            opacity: 1;
         }
         i{
            opacity: 0;
            width: 24px;
            &.sortAsc{
               transform: rotate(180deg);
            }
         }
         &.active{
            i{
               opacity: 1;
            }
         }
      }
   </style>

</admin-dicts>
