<new-dictionary>
   <loading-overlay if={state.isLoading || dictData.isDictionaryListLoading}/>
   <div class="contentWrapper pl-8 pr-8">
      <div class="positionRelative mb-12">
         <span if={props.step != "start"}
               class="clickable positionAbsolute"
               onclick={onBackClick}
               style="left: -30px; top: 10px;">
            <i class="material-icons grey-text">arrow_back</i>
         </span>
         <h1 class="pageTitle borderBottom">
            {getPageTitle()}
         </h1>
      </div>

      <div if={props.step == "start"}>
         <div class="cardOptions">
            <div class="cardOption"
                  onclick={onChangeStepClick.bind(this, "template")}>
               <i class="material-icons">dvr</i>
               <div class="cardOptionTitle">
                  From a template
               </div>
               <div class="description grey-text">
                  Start with one of the ready-made templates for the most frequent types of dictionaries. You can customize, add or remove elements as required.
               </div>
            </div>
            <div class="cardOption"
                  onclick={onChangeStepClick.bind(this, "upload")}>
               <i class="material-icons">upload</i>
               <div class="cardOptionTitle">
                  Upload entries
               </div>
               <div class="cardOptionDescription grey-text">
                  Upload an existing dictionary in the NVH or XML formats.
               </div>
            </div>
            <div class="cardOption"
                  onclick={onChangeStepClick.bind(this, "empty")}>
               <i class="material-icons">add</i>
               <div class="cardOptionTitle">
                  Custom dictionary
               </div>
               <div class="cardOptionDescription grey-text">
                  For expert users. Start from scratch by creating your own entry structure.
               </div>
            </div>
         </div>

         <div class="mt-12">
            <a href="#/"
                  class="btn btn-secondary">
               back
            </a>
         </div>
      </div>

      <div if={props.step == "template"}>
         <div class="templateWrapper">
            <div class="templateGroupLabel">
               <h2 class="grey-text">Monolingual</h2>
            </div>
            <div class="cardOptions">
               <div class="cardOption"
                     onclick={onCreateDictionaryFromTemplateClick.bind(this, "monolingual_basic")}>
                  <i class="material-icons">format_align_justify</i>
                  <div class="cardOptionTitle">
                     Monolingual basic
                  </div>
                  <div class="cardOptionDescription grey-text">
                     A simple monolingual dictionary. Entries contain pronunciation, word senses, definition and example sentences.
                  </div>
               </div>
               <!--div class="cardOption"
                     onclick={onCreateDictionaryFromTemplateClick.bind(this, "simple_bilingual")}>
                  <span class="positionRelative">
                     <i class="material-icons">format_align_justify</i>
                     <i class="material-icons iconExtended">add_circle</i>
                  </span>
                  <div class="cardOptionTitle">
                     Monolingual extended
                  </div>
                  <div class="cardOptionDescription grey-text">
                     A monolingual dictionary with rich entries: pronunciation, pronunciation recording, word senses with disambiguating gloss, definitions, collocations, thesaurus, example sentences, usage labels and image.
                  </div>
               </div-->
            </div>
         </div>

         <div class="templateWrapper">
            <div class="templateGroupLabel">
               <h2 class="grey-text">Bilingual</h2>
            </div>
            <div class="cardOptions">
               <div class="cardOption"
                     onclick={onCreateDictionaryFromTemplateClick.bind(this, "bilingual_basic")}>
                  <i class="material-icons">format_align_justify</i>
                  <i class="material-icons">format_align_justify</i>
                  <div class="cardOptionTitle">
                     Bilingual basic
                  </div>
                  <div class="cardOptionDescription grey-text">
                     A simple bilingual dictionary. Entries contain pronunciation, translation and example sentences.
                  </div>
               </div>
               <!--div class="cardOption"
                     onclick={onCreateDictionaryFromTemplateClick.bind(this, "other")}>
                  <i class="material-icons">format_align_justify</i>
                  <span class="positionRelative">
                     <i class="material-icons">format_align_justify</i>
                     <i class="material-icons iconExtended">add_circle</i>
                  </span>
                  <div class="cardOptionTitle">
                     Bilingual extended
                  </div>
                  <div class="cardOptionDescription grey-text">
                     A bilingual dictionary with additional information such as example sentences, collocations, thesaurus, usage labels.

                  </div>
               </div-->
            </div>
         </div>

         <div class="templateWrapper">
            <div class="templateGroupLabel">
               <h2 class="grey-text">Glossary</h2>
            </div>
            <div class="cardOptions">
               <div class="cardOption"
                     onclick={onCreateDictionaryFromTemplateClick.bind(this, "glossary_monolingual_simple")}>
                  <span class="glossaryIcon">A-Z</span>
                  <i class="material-icons">format_align_justify</i>
                  <div class="cardOptionTitle">
                     Glossary monolingual simple
                  </div>
                  <div class="cardOptionDescription grey-text">
                     A template for a simple list of words and phrases with explanations.
                  </div>
               </div>
               <!--div class="cardOption"
                     onclick={onCreateDictionaryFromTemplateClick.bind(this, "other")}>
                  <span class="glossaryIcon">A-Z</span>
                  <span class="positionRelative">
                     <i class="material-icons">format_align_justify</i>
                     <i class="material-icons iconExtended">add_circle</i>
                  </span>
                  <div class="cardOptionTitle">
                     Glossary monolingual extended
                  </div>
                  <div class="cardOptionDescription grey-text">
                     A template for a glossary of terms with additional information such as example sentences or pronunciation.
                  </div>
               </div-->
               <div class="cardOption"
                     onclick={onCreateDictionaryFromTemplateClick.bind(this, "glossary_bilingual_simple")}>
                  <span class="glossaryIcon">A-Z</span>
                  <i class="material-icons">format_align_justify</i>
                  <i class="material-icons">format_align_justify</i>
                  <div class="cardOptionTitle">
                     Glossary bilingual simple
                  </div>
                  <div class="cardOptionDescription grey-text">
                     A template for a simple list of words and phrases with translations.
                  </div>
               </div>
               <!--div class="cardOption"
                     onclick={onCreateDictionaryFromTemplateClick.bind(this, "other")}>
                  <span class="glossaryIcon">A-Z</span>
                  <i class="material-icons">format_align_justify</i>
                  <span class="positionRelative">
                     <i class="material-icons">format_align_justify</i>
                     <i class="material-icons iconExtended">add_circle</i>
                  </span>
                  <div class="cardOptionTitle">
                     Glossary bilingual extended
                  </div>
                  <div class="cardOptionDescription grey-text">
                     A template for a bilingual glossary of terms with translations and example sentences.

                  </div>
               </div>
               <div class="cardOption"
                     onclick={onCreateDictionaryFromTemplateClick.bind(this, "other")}>
                  <span class="glossaryIcon">A-Z</span>
                  <i class="material-icons">format_align_justify</i>
                  <i class="material-icons">format_align_justify</i>
                  <i class="material-icons">format_align_justify</i>
                  <div class="cardOptionTitle">
                     Glossary multilingual
                  </div>
                  <div class="cardOptionDescription grey-text">
                     A simple bilingual dictionary. Entries contain pronunciation, translation and example sentences.
                  </div>
               </div-->
            </div>
         </div>

         <div class="templateWrapper">
            <div class="templateGroupLabel">
               <h2 class="grey-text">Dictionary<br>express</h2>
            </div>
            <div class="cardOptions">
               <div class="cardOption"
                     onclick={onCreateDictionaryFromTemplateClick.bind(this, "dictionary_express")}>
                  <?xml version="1.0" encoding="UTF-8"?>
                     <svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 192 192">
                        <g>
                           <path d="M0 0 C63.36 0 126.72 0 192 0 C192 11.88 192 23.76 192 36 C142.17 36 92.34 36 41 36 C41 75.6 41 115.2 41 156 C90.83 156 140.66 156 192 156 C192 167.88 192 179.76 192 192 C128.64 192 65.28 192 0 192 C0 128.64 0 65.28 0 0 Z" fill="#aeaeae"/>
                           <path d="M0 0 C43.89 0 87.78 0 133 0 C133 9.9 133 19.8 133 30 C89.11 30 45.22 30 0 30 C0 20.1 0 10.2 0 0 Z" fill="#aeaeae" transform="translate(59,106)"/>
                           <path d="M0 0 C43.89 0 87.78 0 133 0 C133 9.9 133 19.8 133 30 C89.11 30 45.22 30 0 30 C0 20.1 0 10.2 0 0 Z" fill="#aeaeae" transform="translate(59,57)"/>
                        </g>
                     </svg>
                  <div class="cardOptionTitle">
                     Dictionary Express demo
                  </div>
                  <div class="cardOptionDescription grey-text">
                     Demo dictionary for the Lexonomy Projects workflow. Use this dictionary in new Project form.
                  </div>
               </div>
            </div>
         </div>


         <div class="mt-12">
            <button class="btn btn-secondary"
                  onclick={onBackClick}>
               back
            </button>
         </div>
      </div>

      <div if={props.step == "upload"}>
         <div class="row">
            <div class="input-field titleInputField">
               <input id="title"
                     type="text"
                     class="validate inlineBlock"
                     required
                     oninput={onTitleInput}
                     value={state.title}/>
               <label for="title">Dictionary name</label>
               <span class="helper-text">You will be able to change this later.</span>
            </div>
         </div>

         <div class="uploadWrapper">
            <div class="row">
               <div class="file-field input-field uploadFileInputField">
                  <div class="btn">
                     <span>Choose file</span>
                     <input type="file"
                           onchange={onUploadFileChange}
                           id="file">
                  </div>
                  <label for="title">File with entries in NVH
                     <span class="hint tooltipped"
                           data-tooltip="Name-Value Hierarchy (NVH) is a simple markup language for writing dictionaries (<a href='https://guide.lexonomy.eu/structure/understand-nvh/' target='_blank'>more</a>).">
                        <i class="material-icons">help</i>
                     </span>
                     or XML format</label>
                  <div class="file-path-wrapper">
                     <input class="file-path validate"
                           type="text">
                  </div>
               </div>
            </div>
            <div class="row">
               <div class="input-field entryElementInputField">
                  <input id="entryElement"
                        type="text"
                        class="validate"
                        value={state.entryElement}
                        disabled={!state.file}
                        required
                        oninput={onEntryElementInput}/>
                  <label for="title">Entry element *</label>
                  <i if={state.fileReader.readyState == 1}
                        class="entryElementSpinner material-icons grey-text spin">donut_large</i>
               </div>
               <div class="input-field eadwordElementInputField">
                  <input if={!state.headwordOptions.length}
                        id="headwordElement"
                        type="text"
                        class="validate"
                        disabled={!state.file}
                        required
                        oninput={onHeadwordElementInput}/>
                  <div if={state.headwordOptions.length}>
                     <select
                           id="headwordElement"
                           disabled={!state.file}
                           onchange={onHeadwordElementSelectChange}>
                        <option value="">-select element-</option>
                        <option each={option in state.headwordOptions}
                              value={option.value}>
                           <span style="color: {option.color}; margin-left: {option.indent * 15}px">
                              {option.label}
                           </span>
                        </option>
                     </select>
                  </div>
                  <label for="title">Headword element *</label>
               </div>
            </div>
            <div class="row">
               <div class="input-field mb-0">
                  <label class="checkbox">
                     <input id="deduplicate"
                           type="checkbox">
                     <span>
                        Deduplicate
                          <span class="hint tooltipped"
                              data-tooltip="Remove duplicities from the data. This may slow down the import.">
                           <i class="material-icons">help_outline</i>
                       </span>
                     </span>
                  </label>
               </div>
            </div>
         </div>

         <div class="mt-12">
            <div if={state.errorMessage != ""}
                  class="section">
               <div class="message messageError">
                  { state.errorMessage }
               </div>
            </div>
            <div class="buttons">
               <button class="btn btn-secondary"
                     onclick={onBackClick}>
                  back
               </button>
               <primary-button id="makeDictButton"
                     on-click={onCreateDictionaryFromFileClick}
                     label="Create dictionary"
                     icon="add"/>
            </div>
            <div class="borderTop mt-12">
               <small class="grey-text">
                  Maximum dictionary size is 5,000 entries. To remove the limit, email <a href="mailto:inquiries@sketchengine.eu">inquiries@sketchengine.eu</a> and give details of your dictionary project.
               </small>
            </div>
         </div>
      </div>


      <div if={props.step == "empty"}>
         <div class="row">
            <div class="input-field titleInputField">
               <input id="title"
                     type="text"
                     class="validate inlineBlock"
                     required
                     oninput={onTitleInput}
                     value={state.title}/>
               <label for="title">Dictionary name</label>
               <span class="helper-text">You will be able to change this later.</span>
            </div>
         </div>
         <div class="row mb-4">
            <h2>
               Entry structure
            </h2>
            <div class="grey-text mb-4">Choose entry structure from predefined modules or use your own schema. You can change this later.<i class="tooltipped material-icons tiny" data-tooltip="The entry structure can be edited in Configuration - Entry settings - Structure.">help_outline</i></div>

            <structure-editor on-mode-change={onStructureEditorModeChange}/>

            <div if={structureStore.data.mode == "dmlex"}
                  class="row pt-4 mt-8 borderTop">
               <div class="input-field mb-0">
                  <label class="checkbox">
                     <input id="addExamples"
                           type="checkbox"
                           checked="checked">
                     <span>
                        Add example entries
                     </span>
                  </label>
               </div>
            </div>
         </div>
         <div class="mt-12">
            <div if={state.errorMessage != ""}
                  class="section">
               <div class="message messageError">
                  { state.errorMessage }
               </div>
            </div>
            <div class="buttons">
               <button class="btn btn-secondary"
                     onclick={onBackClick}>
                  back
               </button>
               <primary-button id="makeDictButton"
                     on-click={onCreateEmptyDictionaryClick}
                     label="Create dictionary"
                     icon="add"/>
            </div>
         </div>
         <div class="borderTop mt-12">
            <small class="grey-text">
               Maximum dictionary size is 5,000 entries. To remove the limit, email <a href="mailto:inquiries@sketchengine.eu">inquiries@sketchengine.eu</a> and give details of your dictionary project.
            </small>
         </div>
      </div>
   </div>


   <script>
      export default {
         bindings: [["store", "dictionaryListLoadingChanged", "onDictionaryListChanged"],
                    ["schema", "schemaChanged", "onSchemaChanged"],
                    ["schema", "isValidChanged", "update"]],

         state: {
            step: "start",
            title: "",
            url: "",
            isLoading: false,
            errorMessage: "",
            file: null,
            headwordElement: null,
            entryElement: null,
            headwordOptions: [],
            language: {
               value: "",
               label: ""
            },
            fileReader: null
         },

         onBeforeMount(){
            this.schema = new window.NvhSchemaClass()
            this.structureStore = window.structureEditorStore
            this.structureStore.reset()
            this.structureStore.setSchema(this.schema)
            this.structureStore.data.mode = "dmlex"
            this.structureStore.data.tab = "visual"
            this.state.fileReader = new FileReader
            this.state.fileReader.onload = this.onFileLoaded.bind(this)
            this.refreshDictionaryTitle()
            this.store.suggestUrl()
                  .done(response => {
                     this.state.url = response.suggested
                  })
         },

         onMounted() {
            $("#title").focus()
         },

         onUpdated(){
            this.refreshMakeDictButtonDisabled()
         },

         onBeforeUnmount(){
            this.state.timeoutHandle && clearTimeout(this.state.timeoutHandle)
         },

         onSchemaChanged(){
            this.refreshMakeDictButtonDisabled()
         },

         onDictionaryListChanged(){
            this.refreshDictionaryTitle()
            this.update()
         },

         onBackClick(){
            window.history.back()
         },

         onChangeStepClick(step){
            route("make" + (step != "start" ? `\/${step}` : ""))
            $("#title").focus()
         },

         onTitleInput(evt){
            this.state.title = evt.target.value
            this.refreshMakeDictButtonDisabled()
         },

         onUploadFileChange(evt){
            this.state.file = evt.target.files[0]
            this.state.file && this.state.fileReader.readAsText(this.state.file, 'UTF-8')
            this.update()
         },

         onFileLoaded(){
            let trimmed = this.state.fileReader.result.trim()
            let headwordOptions = []
            let isEmpty = !trimmed.length
            let entryElement = ""
            if(!isEmpty){
               entryElement = this.store.guessEntryElementFromFile(this.state.fileReader.result)
               let fileIsNvh = trimmed.split("\n")[0].trim().match(new RegExp(`^(\s*)([a-zA-Z0-9-_.]+):(.*)$`))
               if(fileIsNvh){
                  try{
                     headwordOptions = this.getUniquePathsFromNvh(this.state.fileReader.result).map((path, idx) => {
                        let parts = path.split(".")
                        return {
                           value: path,
                           indent: parts.length - 1,
                           label: parts.pop(),
                           color: window.getColorByIndex(idx)
                        }
                     })
                  } catch(e){}
               }
            }
            this.update({
               isEmpty: isEmpty,
               entryElement: entryElement,
               headwordOptions: headwordOptions
            })
            window.initFormSelects(this.root)
         },

         onHeadwordElementInput(evt){
            this.state.headwordElement = evt.target.value
            this.refreshMakeDictButtonDisabled()
         },

         onHeadwordElementSelectChange(evt){
            this.state.headwordElement = evt.target.value
            this.refreshMakeDictButtonDisabled()
         },

         onEntryElementInput(evt){
            this.state.entryElement = evt.target.value
            this.refreshMakeDictButtonDisabled()
         },

         onStructureEditorModeChange(){
            if(this.structureStore.data.brokenConfig){
               this.schema.update("")
            }
            this.update()
         },

         onCreateDictionaryFromTemplateClick(template_id){
            this.update({isLoading: true})
            let data = {
               url: this.state.url,
               hwNode: 'Entry',
               title: this.state.title,
               addExamples: false,
               deduplicate: false,
               language: this.state.language.value,
               clean: 'on',
               template_id: template_id
            }
            this.store.createDictionaryFromTemplate(data)
                  .done(response => {
                     if (response.success) {
                        this.state.newDictId = response.url
                        setTimeout(() => {
                           this.checkImportProgress(response.upload_file_path)
                        }, 200) // small wait is enough in most cases so the first checkImport request succeed
                     }
                  })
                  .always(response => {
                     if(!response || !response.success){
                        this.state.errorMessage = response.error || response.upload_error || "Unknown error"
                        this.update({isLoading: false})
                     }
                  })
         },

         onCreateEmptyDictionaryClick(event) {
            this.update({isLoading: true})
            let data = {
               title: this.state.title,
               url: this.state.url,
               language: this.state.language.value,
               addExamples: $("#addExamples").is(":checked"),
               dmlex: this.structureStore.data.mode == "dmlex",
               structure: JSON.stringify({
                  mode: this.structureStore.data.mode,
                  tab: this.structureStore.data.tab,
                  nvhSchema: this.schema.getNvh(),
                  DMLexSettings: this.structureStore.data.DMLexSettings
               })
            }
            this.store.createDictionary(data)
                  .done(response => {
                     if (response.success) {
                        route("/" + response.url)
                     }
                  })
                  .always(response => {
                     if(!response || !response.success){
                        this.state.errorMessage = response.error || "Unknown error"
                        this.update({isLoading: false})
                     }
                  })
         },

         onCreateDictionaryFromFileClick(event) {
            if(this.state.title){
               this.update({isLoading: true})
               var fd = new FormData()
               fd.append("deduplicate", $("#deduplicate").is(":checked"))
               fd.append("title", this.state.title)
               fd.append("url", this.state.url)
               fd.append("hwNode", this.state.entryElement)
               fd.append("titling_node", this.state.headwordElement)
               fd.append("addExamples", false)
               fd.append("entries", this.state.file)
               this.store.createDictionary(fd, {
                  processData: false,
                  contentType: false
               })
                     .always(response => {
                        if (response && response.success) {
                           window.showToast("Import started.")
                           this.state.newDictId = response.url
                           this.checkImportProgress(response.upload_file_path)
                        } else {
                           this.state.errorMessage = response.error || "Unknown error"
                           this.update({isLoading: false})
                        }
                     })
            }
         },

         checkImportProgress(upload_file_path){
            this.store.checkImportProgress(this.state.newDictId, upload_file_path)
                  .done(response => {
                     clearTimeout(this.state.timeoutHandle)
                     if(response.error.length){
                        this.state.errorMessage = response.error.join(", ")
                        this.update({isLoading: false})
                     } else {
                        if(response.finished){
                           route("/" + this.state.newDictId)
                        } else {
                           this.state.timeoutHandle = setTimeout(this.checkImportProgress.bind(this, response.upload_file_path), 2000)
                        }
                     }
                  })
         },

         getUniquePathsFromNvh(nvh) {
            let lines = nvh.split("\n")
            let stack = []
            let paths = new Set()
            let indentSize = window.nvhStore.guessNvhIndentSize(nvh)

            for (let line of lines) {
               if (line.trim()){
                  let leadingSpaces = line.match(/^(\s*)/)[0].length
                  let level = leadingSpaces / indentSize
                  let keyMatch = line.match(/^\s*([^:]+)\s*:/)
                  if (keyMatch){
                     let key = keyMatch[1].trim()
                     if(!key.startsWith("__lexonomy__")){
                        stack[level] = key
                        // Remove keys from any deeper levels that are no longer applicable.
                        stack.length = level + 1
                        paths.add(stack.join("."))
                     }
                  }
               }
            }
            return [...paths]
         },

         getPageTitle(){
            return {
               start: "Add dictionary",
               template: "From Template",
               new: "New dictionary",
               empty: "Custom dictionary",
               upload: "Upload own data"
            }[this.props.step] || "Add dictionary"
         },

         refreshDictionaryTitle(){
            let lastNum = this.dictData.dictionaryList.filter(dictionary => dictionary.title.startsWith("New dictionary"))
                  .map(dictionary => parseInt(dictionary.title.split("New dictionary")[1] || "1", 10))
                  .sort((a,b) => a - b)
                  .pop()
            let title = `New dictionary${lastNum ? ' ' + (lastNum + 1) : ''}`
            this.state.title = title
         },

         refreshMakeDictButtonDisabled(){
            if(["upload", "empty"].includes(this.props.step)){
               let disabled = !this.state.title
               if(!disabled){
                  if(this.props.step == "upload"){
                     disabled = !this.state.file
                           || this.state.fileReader.readyState == 1
                           || !this.state.headwordElement
                           || !this.state.entryElement
                  } else if(this.props.step == "empty"){
                     disabled = this.schema.isEmpty()
                           || !this.schema.isValid
                  }
               }
               $("#makeDictButton .submitButton", this.root).toggleClass("disabled", disabled)
            }
         }
      }
   </script>

   <style type="scss">
      .file-field{
         .file-path-wrapper,
         .file-path{
            display: block;
            width: 100%;
         }
      }
      .titleInputField,
      .uploadFileInputField,
      .entryElementInputField,
      .eadwordElementInputField{
         max-width: 450px;
      }
      .templateWrapper{
         margin-bottom: 40px;
         display: flex;
         gap: 20px;
         @media (max-width: 1260px) {
            flex-direction: column;
         }
         .templateGroupLabel{
            min-width: 180px;
            h2{
               margin-bottom: 0;
            }
         }
      }
      .cardOption{
         min-height: 210px;
      }
      .entryElementSpinner{
         position: absolute;
         right: 8px;
         top: 8px;
      }
      .cardOptions .cardOption {
         &:hover{
            i.iconExtended{
               background: #e6e6e6
            }
         }
         i.iconExtended{
            position: absolute;
            right: -10px;
            top: -38px;
            font-size: 24px;
            z-index: 99;
            opacity: 1;
            color: #b5b5b5;
            background: #f5f5f5;
            border-radius: 50%;
         }
      }
      .glossaryIcon{
         opacity: 0.3;
         vertical-align: top;
         font-size: 2.5rem;
         line-height: 3.3rem;
      }
   </style>
</new-dictionary>
