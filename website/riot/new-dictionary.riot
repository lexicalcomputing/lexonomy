<new-dictionary>
   <loading-overlay if={state.isLoading}/>
   <h1>
      New dictionary
   </h1>
   <div class="row">
      <div class="input-field">
         <input id="title"
               type="text"
               class="validate inlineBlock"
               required
               oninput={onTitleInput}
               style="max-width: 300px;"/>
         <label for="title">Title</label>
         <span class="helper-text">Enter a human-readable title such as "My Esperanto Dictionary". You will be able to change this later.</span>
      </div>
   </div>
   <div>
      <label for="url">URL</label>
   </div>

   <div class="row mb-8">
      <div style="display: inline-flex; align-items: baseline; border: 1px solid black; position: relative; padding-left: 10px; height: 48px;"
            onclick={onUrlWrapperClick}>
         <span class="grey-text">{state.baseUrl}</span>
         <span class="input-field"
               style="margin-top: 0; margin-bottom: 0;">
            <input id="url"
                  type="text"
                  class="validate inlineBlock"
                  value={state.url}
                  required
                  minlength="5"
                  pattern="[a-zA-Z0-9\-_]*"
                  oninput={onUrlInput}
                  style="max-width: 300px;border: none;outline: none; padding-left: 5px;background-color: unset;"/>
         </span>
      </div>
      <div style="color: rgba(0,0,0,0.54);font-size: 0.7rem;">This will be your dictionary's address on the web. You will be able to change this later. Allowed:  letters, numbers, - and _</div>
   </div>

   <div class="row mb-4">
      <h4>Entry structure</h4>
      <p class="grey-text">Chose modules you want to use in your dictionary. You can change this later.</p>
      <nvh-schema selected-modules={state.selectedModules}
            on-schema-loaded={onSchemaLoaded}
            on-schema-change={onSchemaChange}
            on-modules-change={onModulesChange}/>

      <div class="row">
         <div class="input-field">
            <label class="checkbox">
               <input id="addExamples"
                     type="checkbox"
                     checked="checked">
               <span>
                  Add example entries
               </span>
            </label>
         </div>
      </div>
   </div>

   <div if={ state.errorMessage != ""}
         class="section">
      <div class="message messageError">
         { state.errorMessage }
      </div>
   </div>
   <div class="buttons">
      <button class="btn waves-effect waves-light"
            name="makeDict"
            id="makeButton"
            onclick={onCreateDictionaryClick}>Create dictionary
         <i class="material-icons left">add</i>
      </button>
      <a href="#"
            class="btn btn-flat">cancel</a>
   </div>
   <br><br>
   <div>
      <label>Size limitation</label>
      <div style="color: rgba(0,0,0,0.54)">
         Maximum dictionary size is 5,000 entries. To remove the limit, email <a href="mailto:inquiries@sketchengine.eu">inquiries@sketchengine.eu</a> and give details of your dictionary project.
      </div>
   </div>

   <script>
      export default {
         state: {
            title: "",
            url: "",
            isLoading: true,
            errorMessage: "",
            baseUrl: "https://www.lexonomy.eu/",
            finalSchema: null,
            selectedModules: []
         },

         onMounted() {
            this.store.suggestUrl()
                  .done(response => {
                     this.state.url = response.suggested
                     this.state.baseUrl = response.baseUrl
                  })
                  .always(results => {
                     this.update({isLoading: false})
                     M.updateTextFields()
                  })

            this.refreshMakeButtonDisabled()
         },

         onModulesChange(modules){
            this.state.selectedModules = modules
            this.update()
            this.refreshMakeButtonDisabled()
         },

         onSchemaLoaded(schemas){
            if(!this.state.selectedModules.length){
               this.state.selectedModules = schemas.filter(schema => schema.checked || schema.required)
                     .map(schema => schema.key.split(".").pop())
               this.update()
               this.refreshMakeButtonDisabled()
            }
         },

         onSchemaChange(schema){
            this.state.selectedModules = schema.filter(s => s.checked).map(s => s.key)
            this.update()
            this.refreshMakeButtonDisabled()
         },

         onTitleInput(evt){
            this.state.title = evt.target.value
            this.refreshMakeButtonDisabled()
         },

         onUrlInput(evt){
            this.state.url = evt.target.value
            this.refreshMakeButtonDisabled()
         },

         onUrlWrapperClick(){
            $("#id").focus()
         },

         onCreateDictionaryClick(event) {
            let title = $("#title").val()
            if(title){
               this.update({isLoading: true})
               this.store.createDictionary({
                  url: $("#url").val(),
                  schemaKeys: JSON.stringify(this.state.selectedModules),
                  addExamples: $("#addExamples").is(":checked"),
                  title: title
               })
                     .done(response => {
                        if (response.success) {
                           route("/" + response.url)
                        } else {
                           this.state.errorMessage = "Selected URL is already taken."
                        }
                     })
                     //.always(this.update.bind(this, {isLoading: false}))
            }
         },

         refreshMakeButtonDisabled(){
            $("#makeButton", this.root).toggleClass("disabled", this.state.title == ""
                  || this.state.url == ""
                  || !this.state.selectedModules.length)
         }
      }
   </script>

   <style>
      nvh-schema{
         background-color: whitesmoke;
      }
   </style>
</new-dictionary>
