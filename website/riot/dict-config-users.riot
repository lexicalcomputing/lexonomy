<dict-config-users>
   <dict-config-nav dictId={ dictId } dictTitle={ props.dictDetails.title } configId={ configId } configTitle={ configTitle }/>
   <h3>Users</h3>
   <div if={isLoading} class="center-align grey-text">
      <h3>Loading users...</h3>
   </div>
   <template if={!isLoading}>
      <div if={!configData.users.length} class="grey-text center-align">
         <h4>No users</h4>
         <br>
         <button class="btn btn-primary" onclick={doAddUser}>
            <i class="material-icons right">add</i>
            Add new user
         </button>
         <br><br><br><br>
         <div class="buttons" style="justify-content: center;">
            <dict-config-buttons save-data={saveData} dict-id={dictId}></dict-config-buttons>
         </div>
      </div>
      <div>

      <div if={configData.users.length}>
         <table>
            <thead>
               <tr style="border-bottom: none;">
                  <th>
                  </th>
                  <th colspan="5">Privileges</th>
               </tr>
               <tr>
                  <th>User email</th>
                  <th>Edit</th>
                  <th>Configure</th>
                  <th>Download</th>
                  <th>Upload</th>
                  <th></th>
               </tr>
            </thead>
            <tbody>
               <tr each={ (user, idx) in configData.users } no-reorder key={user.id}>
                  <td>
                     <span if={user.isEditable}>
                        <input id="new-email" type="email" class="validate" oninput={onEmailInput.bind(this, idx)} style="max-width: 300px;">
                     </span>
                     <span if={!user.isEditable}>
                        { user.email }
                     </span>
                  </td>
                  <td>
                     <label>
                        <input type="checkbox" name="canEdit" checked={ user.canEdit } onchange={onPermissionChange.bind(this, idx)}/>
                        <span></span>
                     </label>
                  </td>
                  <td>
                     <label>
                        <input type="checkbox" name="canConfig" checked={ user.canConfig } onchange={onPermissionChange.bind(this, idx)}/>
                        <span></span>
                     </label>
                  </td>
                  <td>
                     <label>
                        <input type="checkbox" name="canDownload" checked={ user.canDownload } onchange={onPermissionChange.bind(this, idx)}/>
                        <span></span>
                     </label>
                  </td>
                  <td>
                     <label>
                        <input type="checkbox" name="canEdit" checked={ user.canUpload } onchange={onPermissionChange.bind(this, idx)}/>
                        <span></span>
                     </label>
                  </td>
                  <td>
                     <a class="btn btn-floating delete-user" onclick={ doDeleteUser.bind(this, idx) }>
                        <i class="material-icons">delete</i>
                     </a>
                  </td>
               </tr>
            </tbody>
         </table>
         <br>
         <div>
            <button class="btn" onclick={doAddUser}>
               <i class="material-icons right">add</i>
               Add new user
            </button>
         </div>
         <br><br>
         <dict-config-buttons save-data={saveData} dict-id={dictId}></dict-config-buttons>
         <div id="userConfigError"></div>
      </div>
   </template>

   <style>
      .user-checkbox {
         padding-right: 2em;
      }
      .delete-user, .add-user {
         float: right;
      }
      #userConfigError {
         margin-left: 1em;
         color: red;
      }
   </style>
   <script>
      export default {
         isLoading: true,
         dictId: '',
         configId: '',
         configTitle: 'Users',
         configData: {users:[]},

         onEmailInput(idx, evt){
            this.configData.users[idx].email = evt.target.value
         },

         onPermissionChange(idx, evt){
            this.configData.users[idx][evt.target.name] = evt.target.checked
         },

         doDeleteUser(idx) {
            this.configData.users.splice(idx, 1);
            this.update()
         },

         doAddUser(event) {
            this.configData.users.push({
               id: this.configData.users.length,
               email: "",
               canEdit: false,
               canConfig: false,
               canDownload: false,
               canUpload: false,
               isEditable: true
            });
            this.update();
            $('table input[type="email"]', this.root).last().focus()
         },

         onMounted() {
            this.dictId = this.props.dictId;
            this.configId = this.props.configId;
            console.log('config dict '+ this.dictId + '-' + this.configId)
            this.props.loadDictDetail();
            this.fillConfigForm();
            console.log(this.props);
         },

         async fillConfigForm() {
            this.props.loadConfigData(this.configId).then((response)=>{
               this.isLoading = false;
               this.configData = {users:[]}
               let id = 0
               for (var key in response) {
                  var info = response[key];
                  info.email = key;
                  info.id = id
                  id++
                  this.configData.users.push(info);
               }
               this.update();
            });
         },

         saveData() {
            if (Object.values(this.configData.users).find(row => row.canConfig) == undefined) {
               $('#userConfigError').html('At least one user must have <i>Configure</i> permission.');
            } else {
               $('#userConfigError').html('');
               $('#submit_button').html('Saving...');
               let data = {}
               this.configData.users.forEach(u => {
                  data[u.email] = {
                     canEdit: u.canEdit,
                     canConfig: u.canConfig,
                     canDownload: u.canDownload,
                     canUpload: u.canUpload
                  }
               })
               this.props.saveConfigData(this.configId, data);
            }
         }
      }
   </script>

</dict-config-users>
