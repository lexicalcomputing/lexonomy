<dict-config-users>
   <loading-overlay if={state.isLoading || state.isSaving}/>
   <h1>Users</h1>
   <template if={!state.isLoading}>
      <div if={!state.data.users.length}
            class="grey-text center-align">
         <h2>No users</h2>
         <br>
         <button class="btn btn-primary"
               onclick={doAddUser}>
            <i class="material-icons right">add</i>
            Add new user
         </button>
         <br><br><br><br>
         <div class="buttons"
               style="justify-content: center;">
            <dict-config-buttons save-data={saveData}></dict-config-buttons>
         </div>
      </div>
      <div>

      <div if={state.data.users.length}>
         <table>
            <thead>
               <tr style="border-bottom: none;">
                  <th>
                  </th>
                  <th colspan="6">Privileges</th>
               </tr>
               <tr>
                  <th>User email</th>
                  <th>View</th>
                  <th>Edit</th>
                  <th>Configure</th>
                  <th>Download</th>
                  <th>Upload</th>
                  <th></th>
               </tr>
            </thead>
            <tbody>
               <tr each={ (user, idx) in state.data.users }
                     no-reorder
                     key={user.id}>
                  <td>
                     <span if={user.isEditable}>
                        <input id="new-email"
                              type="email"
                              class="validate"
                              oninput={onEmailInput.bind(this, idx)}
                              style="max-width: 300px;">
                     </span>
                     <span if={!user.isEditable}>
                        { user.email }
                     </span>
                  </td>
                  <td>
                     <label>
                        <input type="checkbox"
                              name="canView"
                              checked={ !!user.canView }
                              onchange={onPermissionChange.bind(this, idx)}/>
                        <span></span>
                     </label>
                  </td>
                  <td>
                     <label>
                        <input type="checkbox"
                              name="canEdit"
                              checked={ !!user.canEdit }
                              onchange={onPermissionChange.bind(this, idx)}/>
                        <span></span>
                     </label>
                  </td>
                  <td>
                     <label>
                        <input type="checkbox"
                              name="canConfig"
                              checked={ !!user.canConfig }
                              onchange={onPermissionChange.bind(this, idx)}/>
                        <span></span>
                     </label>
                  </td>
                  <td>
                     <label>
                        <input type="checkbox"
                              name="canDownload"
                              checked={ !!user.canDownload }
                              onchange={onPermissionChange.bind(this, idx)}/>
                        <span></span>
                     </label>
                  </td>
                  <td>
                     <label>
                        <input type="checkbox"
                              name="canUpload"
                              checked={ !!user.canUpload }
                              onchange={onPermissionChange.bind(this, idx)}/>
                        <span></span>
                     </label>
                  </td>
                  <td>
                     <a class="btn btn-floating btn-flat right"
                           onclick={ doDeleteUser.bind(this, idx) }>
                        <i class="material-icons">delete</i>
                     </a>
                  </td>
               </tr>
            </tbody>
         </table>
         <br>
         <div>
            <button class="btn"
                  onclick={doAddUser}>
               <i class="material-icons right">add</i>
               Add new user
            </button>
         </div>
         <br><br>
         <dict-config-buttons save-data={saveData}></dict-config-buttons>
         <div if={state.errorMessage} class="message messageError mt-4">
            <raw-html content={state.errorMessage}></raw-html>
         </div>
      </div>
   </template>

   <script>
      export default {
         state: {
            isLoading: true,
            isSaving: false,
            errorMessage: '',
            data: {users: []}
         },

         onEmailInput(idx, evt){
            this.state.data.users[idx].email = evt.target.value
         },

         onPermissionChange(idx, evt){
            this.state.data.users[idx][evt.target.name] = evt.target.checked
         },

         doDeleteUser(idx) {
            this.state.data.users.splice(idx, 1)
            this.update()
         },

         doAddUser(event) {
            this.state.data.users.push({
               id: this.state.data.users.length,
               email: "",
               canView: false,
               canEdit: false,
               canConfig: false,
               canDownload: false,
               canUpload: false,
               isEditable: true
            })
            this.update()
            $('table input[type="email"]', this.root).last().focus()
         },

         onMounted() {
            this.store.loadDictionaryConfig("users")
                  .done(response => {
                     this.state.data = {users:[]}
                     let id = 0
                     for (var key in response.content) {
                        var user = response.content[key]
                        user.email = key
                        user.id = id
                        id++
                        this.state.data.users.push(user)
                     }
                  })
                  .always(() => {
                     this.update({isLoading: false})
                  })
         },

         saveData() {
            if (!this.state.data.users.length) {
               this.update({errorMessage: 'Please, add at least one user.'})
            } else if (this.state.data.users.find(row => row.canConfig) == undefined) {
               this.update({errorMessage: 'At least one user must have <i>Configure</i> permission.'})
            } else if(this.state.data.users.find(row => row.email == "")) {
               this.update({errorMessage: 'Email must not be empty.'})
            } else if (this.state.data.users.find(row => !row.canView && !row.canEdit && !row.canConfig && !row.canDownload && !row.canUpload)){
               this.update({errorMessage: 'User should have assigned at least one privilege.'})
            } else {
               let data = {}
               this.state.data.users.forEach(u => {
                  data[u.email] = {
                     canView: u.canView,
                     canEdit: u.canEdit,
                     canConfig: u.canConfig,
                     canDownload: u.canDownload,
                     canUpload: u.canUpload
                  }
               })
               this.update({
                  isSaving: true,
                  errorMessage: ''
               })
               this.store.updateDictionaryAccess(data)
                     .done(response => {
                        if(!response.error){
                           this.state.data.users.forEach(u => u.isEditable = false)
                        }
                     })
                     .always(() => this.update({isSaving: false}))
            }
         }
      }
   </script>

</dict-config-users>
