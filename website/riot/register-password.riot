<register-password>
   <div class="row">
      <div class="col l8 m7 s12">
         <welcome/>
      </div>
      <div class="col l4 m5 s12 mt-12">
         <h2>Set a password for your account</h2   >
         <loading-overlay if={state.isRegisteringPassword}/>
         <div if={ !state.messageSent && state.tokenValid}>
            <div class="displayFlex gap20">
               <div class="input-field inlineBlock">
                  <input id="password1"
                        type="password"
                        autocomplete="new-password"
                        onkeyup={onKeyUp}/>
                  <label for="password">Your password</label>
                  <span class="helper-text">Set your password to access Lexonomy.</span>
               </div>
               <div class="input-field inlineBlock">
                  <input id="password2"
                        type="password"
                        autocomplete="new-password"
                        onkeyup={onKeyUp}/>
                  <label for="password">Confirm password</label>
                  <span id="passwordsNotEqual"
                        class="helper-text red-text"
                        style="visibility: hidden">Passwords do not match</span>
               </div>
            </div>
            <div>
               <button id="setPasswordButton"
                     class="btn btn-primary waves-effect waves-light disabled"
                     name="login"
                     onclick={registerPassword}>Set password
                  <i class="material-icons right">send</i>
               </button>
            </div>
         </div>
         <div if={ !state.tokenValid && !state.isCheckingToken }>
            <div class="card red darken-2">
               <div class="card-content white-text">
                  <p>This signup link is invalid. It may have expired or has been used before.</p>
               </div>
            </div>
         </div>
         <div if={ state.isCheckingToken }>
            <p>Validating signup token...</p>
         </div>
         <div if={ state.messageSent }>
            <div class="message messageInfo">
               We have created your account. You can now log in with your e-mail address and password.
               <div class="mt-8">
                  <a href="#/"
                        class="btn btn-primary">log in</a>
               </div>
            </div>
         </div>
         <div if={ state.errorMessage != ''}>
            <div class="card red darken-2">
               <div class="card-content white-text">
                  <p>{ state.errorMessage }</p>
               </div>
            </div>
         </div>
      </div>
   </div>

   <script>
      export default {
         state:{
            messageSent: false,
            tokenValid: false,
            errorMessage: '',
            isCheckingToken: true,
            isRegisteringPassword: false
         },

         onMounted() {
            this.auth.verifyToken(this.props.token, "register")
                  .done(response => {
                     if (response.success) {
                        this.state.tokenValid = true
                     }
                  })
                  .always(() => {
                     this.update({isCheckingToken: false})
                     $("#password1").focus()
                  })
         },

         onKeyUp(evt){
            let password1 = $("#password1").val()
            let password2 = $("#password2").val()
            let bothFilled = password1 && password2
            let passwordsEqual = password1 == password2
            $("#setPasswordButton").toggleClass("disabled", !bothFilled || !passwordsEqual)
            $("#passwordsNotEqual").css("visibility", !bothFilled || passwordsEqual ? "hidden" : "")
            bothFilled && passwordsEqual && evt.keyCode == 13 && this.registerPassword()
         },

         registerPassword(event) {
            let password = $("#password1").val()
            if(password){
               this.update({isRegisteringPassword: true})
               this.auth.registerPassword(this.props.token, password)
                     .always(result => {
                        this.update({
                           messageSent: result.success,
                           errorMessage: result.success ? "" : result.errorMessage || "Unknown error",
                           isRegisteringPassword: false
                        })
                     })
            }
         }
      }
   </script>
</register-password>
