<dict-config-formatting>
   <loading-overlay if={state.isBusy || state.isLoadingEditor}/>
   <h1 class="pageTitle">Entry formatting</h1>
   <dict-configuration-issues config-id="formatting"/>
   <div if={state.elementPath}
         class="displayFlex mb-12">
      <div class="elementListColumn pb-6">
         <h2>Element</h2>
         <div class="elementWrapper">
            <div each={element in elementOptionList}
                  class="element pointer {element.path == state.path ? 'selectedElement' : ''}"
                  onclick={onElementClick.bind(this, element.path)}
                  onmouseenter={onElementMouseEnter.bind(this, element.path)}
                  onmouseleave={onElementMouseLeave.bind(this, element.path)}
                  style="{element.style}">
               {store.getElementDisplayedName(element.path)}
               <i if={element.path == state.elementPath}
                     class="selectedElementArrow grey-text material-icons">chevron_right</i>
            </div>
         </div>
      </div>
      <div class="elementStyleColumn borderLeft borderRight pl-6 pr-6 pb-6">
         <h2>Style</h2>
         <element-style-options element-path={state.elementPath}/>
      </div>
      <div class="exampleColumn pl-6">
         <h2>Example</h2>
         <div if={!dictData.isEntryListLoaded || dictData.entryList.length}
               class="exampleBar grey lighten-4 displayFlex mb-2">
            <entry-dropdown on-change={onExampleEntryChanged}/>
            <i class="material-icons grey-text">search</i>
            <!-- randomone.json does not work, temporarily hidden -->
            <!--button class="btn btn-flat  tooltipped ml-auto"
                  onclick={onReloadRandomEntryClick}
                  data-tooltip="Load random entry.">
               <i class="material-icons">autorenew</i>
            </button-->
         </div>
         <div class="exampleWrapper positionRelative">
            <loading-overlay if={dictData.isEntryListLoading || dictData.isEntryLoading}/>
            <nvh-editor-view-item if={nvhStore.data.entry}
                  onclick={onExampleClick}
                  element={nvhStore.data.entry}
                  read-only={true}/>
            <div if={dictData.isEntryListLoaded && !dictData.entryList.length}
                  class="center-align mt-16">
               <h2 class="grey-text">
                  Your dictionary is empty
               </h2>
               You can create new entry <a href="#/{dictData.dictId}/edit/entry/new/edit">here</a>.
            </div>
         </div>
      </div>
   </div>
   <div class="mb-12">
      <label class="checkbox">
         <input type="checkbox"
               id="custom_css"
               checked={state.useCustomCss}
               onchange={onUseCustomCssClick}/>
         <span>Add custom style</span>
      </label>
      <div id="csEditorWrapper"
            class="cssCode input-field ml-8"
            style="display: none;">
         <label for="editor_css">CSS</label>
         <div id="editorCSS"></div>
      </div>
   </div>

   <dict-config-buttons save-data={save}/>

   <script>
      export default{
         bindings: [["store", "entryListChanged", "update"],
                    ["store", "isEntryListLoadingChanged", "update"],
                    ["store", "isEntryLoadingChanged", "update"],
                    ["nvhStore", "updateElements", "update"]],

         state: {
            isBusy: false,
            elementPath: null,
            exampleElement: "",
            editorInitialized: false
         },

         onBeforeMount(){
            this.nvhStore = window.nvhStore
            let formatting = this.nvhStore.data.formatting
            this.state.savedConfig = JSON.stringify(formatting.elements)
            this.state.useCustomCss = formatting.useCustomCss
            this.state.customCss = formatting.customCss
            this.elementOptionList = window.nvhStore.getElementTreeList().map(element => {
               return {
                  path: element.path,
                  style: `color: ${element.color}; padding-left: ${element.indent * 15 + 25}px`
               }
            })
            this.state.elementPath = this.elementOptionList[0]?.path
            const changeEntryId = () => {
               if(this.dictData.entryList.length){
                  // TODO: change to randomone.json once fixed
                  let entryId = this.dictData.entryList[Math.floor(Math.random() * this.dictData.entryList.length)].id
                  this.store.changeEntryId(entryId)
               }
            }
            if(this.dictData.isEntryListLoaded){
               changeEntryId()
            } else {
               this.store.one("entryListChanged", changeEntryId.bind(this))
            }
         },

         onMounted(){
            if(this.state.customCss){
               this.loadAndInitEditor()
               this.refreshCustomStyles()
            }
         },

         onBeforeUnmount(){
            this.nvhStore.data.formatting.elements = JSON.parse(this.state.savedConfig)
            window.CustomStyles.remove("nvhEditorCustomStyles")
         },

         onElementClick(elementPath){
            this.update({elementPath: elementPath})
         },

         onExampleClick(evt){
            let nvhEditorViewItem = $(evt.target).closest("nvh-editor-view-item")
            if(nvhEditorViewItem.length){
               let elementPath = this.nvhStore.getElementById(nvhEditorViewItem.attr("id").split("-")[2]).path
               this.update({elementPath: elementPath})
            }
         },

         onExampleEntryChanged(entry){
            this.store.changeEntryId(entry.id)
         },

         onElementMouseEnter(elementPath){
            if(this.nvhStore.data.entry){
               $(".highlighted", this.root).removeClass("highlighted")
               let selector = this.nvhStore.findElements(e => e.path == elementPath).map(e => `#nvh-item-${e.id}`).join(",")
               $(selector, this.root).addClass("highlighted")
            }
         },

         onElementMouseLeave(){
            $(".highlighted", this.root).removeClass("highlighted")
         },

         onReloadRandomEntryClick(){
            this.store.loadRandomEntry()
         },

         onUseCustomCssClick(){
            this.state.useCustomCss = !this.state.useCustomCss
            if(this.state.useCustomCss){
               if(this.state.editorInitialized){
                  $("#csEditorWrapper").show()
                  this.editorCSS.focus()
               } else {
                  this.loadAndInitEditor()
               }
            } else {
               $("#csEditorWrapper").hide()
               window.CustomStyles.remove("nvhEditorCustomStyles")
            }
         },

         onCustomCssUpdate(){
            this.state.customCss = this.editorCSS.state.doc.toString()
            this.customCssInputDebounceTimer && clearTimeout(this.customCssInputDebounceTimer)
            this.customCssInputDebounceTimer = setTimeout(() => {
               clearTimeout(this.customCssInputDebounceTimer)
               this.refreshCustomStyles()
            }, 200)
         },

         refreshCustomStyles(){
            window.CustomStyles.add("nvhEditorCustomStyles", this.state.customCss, ".exampleWrapper")
         },

         loadAndInitEditor(){
            if(this.state.isLoadingEditor){
               return
            }
            this.update({isLoadingEditor: true})
            window.loadScript("bundle.codemirror.js", () => {
               this.update({
                  isLoadingEditor: false,
                  editorInitialized: true,
               })
               this.editorCSS = new window.CodeMirror.EditorView({
                  extensions: [window.CodeMirror.basicSetup,
                        window.CodeMirror.css(),
                        window.CodeMirror.EditorView.updateListener.of(v => {
                           v.viewportChanged && this.onCustomCssUpdate()
                        })],
                  parent: document.getElementById("editorCSS")
               })
               $("#csEditorWrapper").show()
               this.editorCSS.dispatch({
                  changes: {
                     from: 0,
                     insert: this.state.customCss
                  }
               })
               this.editorCSS.focus()
            })
         },

         save(){
            this.update({isBusy: true})
            this.state.savedConfig = JSON.stringify(this.nvhStore.data.formatting.elements)
            this.store.updateDictionaryConfig("formatting", {
               elements: this.nvhStore.data.formatting.elements,
               useCustomCss: this.state.useCustomCss,
               customCss: this.state.useCustomCss ? this.state.customCss : ""
            })
                  .always(response => {
                     this.update({isBusy: false})
                  })
         }
      }
   </script>

   <style type="scss">
      .elementWrapper{
         max-height: calc(100vh - 215px);
         overflow: auto;
      }
      .element{
         padding: 0px 15px;
         position: relative;
         .selectedElementArrow{
            position: absolute;
            left: 0px;
            top: 0px;
         }
         &:hover{
            background-color: whitesmoke;
         }
      }
      .selectedElement{
         background-color: whitesmoke;
      }
      .elementStyleColumn{
         min-width: 360px
         element-style-options{
            display: block;
         }
      }
      .elementListColumn{
         min-width: 250px;
      }
      .exampleColumn{
         flex: 1;
         position: sticky;
         min-width: 250px;
         .exampleWrapper{
            min-height: 350px;
         }
      }
      .nvh-readonly-value-wrapper,
      .nvh-readonly-value{
         cursor: pointer!important
      }
      .highlighted{
         box-shadow: 0 4px 5px 0 rgb(0 0 0 / 14%), 0 1px 10px 0 rgb(0 0 0 / 12%), 0 2px 4px -1px rgb(0 0 0 / 30%);
      }
      .exampleBar{
         align-items: center;
         gap: 15px;
         padding: 4px 5px 4px 15px;
         .input-field,
         input{
            margin: 0!important
         }
         input{
            height: 2rem;
         }
      }
   </style>
</dict-config-formatting>
