<dict-config-formatting>
   <loading-overlay if={state.isBusy}/>
   <h1>Entry formatting</h1>
   <div class="displayFlex mb-12">
      <div class="leftSideWrapper displayFlex borderRight mr-6" style="flex-direction: column;">
         <div class="displayFlex borderBottom mb-6">
            <div class="elementListColumn pb-6">
               <h2>Element</h2>
               <div each={element in elementOptionList}
                     class="element pointer {element.elementName == state.elementName ? 'selectedElement' : ''}"
                     onclick={onElementClick.bind(this, element.elementName)}
                     onmouseenter={onElementMouseEnter.bind(this, element.elementName)}
                     onmouseleave={onElementMouseLeave.bind(this, element.elementName)}
                     style="{element.style}">
                  {store.getElementDisplayedName(element.elementName)}
                  <i if={element.elementName == state.elementName}
                        class="selectedElementArrow grey-text material-icons">chevron_right</i>
               </div>
            </div>
            <div class="elementStyleColumn borderLeft ml-6 mr-6 pl-6 pb-6">
               <h2>Style</h2>
               <element-style-options element-name={state.elementName}/>
            </div>
         </div>
         <div>
            <label class="checkbox">
               <input type="checkbox"
                     id="custom_css"
                     checked={state.useCustomCss}
                     onchange={onUseCustomCssClick}/>
               <span>Add custom style</span>
            </label>
            <div if={state.useCustomCss}
                  class="cssCode input-field ml-8">
               <label for="editor_css">CSS</label>
               <pre id="editor_css"
                     class="codeEditor language-css"></pre>
            </div>
         </div>
      </div>
      <div class="exampleColumn">
         <h2>Example</h2>
         <div class="exampleBar grey lighten-4 displayFlex mb-2">
            <entry-dropdown on-change={onExampleEntryChanged}/>
            <i class="material-icons grey-text">search</i>
            <button class="btn btn-flat  tooltipped ml-auto"
                  onclick={onReloadRandomEntryClick}
                  data-tooltip="Load random entry.">
               <i class="material-icons">autorenew</i>
            </button>
         </div>
         <div class="exampleWrapper positionRelative">
            <loading-overlay if={dictData.isEntryListLoading || dictData.isEntryLoading}/>
            <nvh-editor-view-item if={nvhStore.data.entry}
                  onclick={onExampleClick}
                  element={nvhStore.data.entry}
                  read-only={true}/>
         </div>
      </div>
   </div>

   <dict-config-buttons save-data={save}/>

   <script>
      export default{
         bindings: [["store", "entryListChanged", "update"],
                    ["store", "isEntryListLoadingChanged", "update"],
                    ["store", "isEntryLoadingChanged", "update"],
                    ["nvhStore", "updateElements", "update"]],

         state: {
            isBusy: false,
            elementName: null,
            exampleElement: ""
         },

         onBeforeMount(){
            this.nvhStore = window.nvhStore
            let formatting = this.nvhStore.data.formatting
            this.state.savedConfig = JSON.stringify(formatting.elements)
            this.state.useCustomCss = formatting.useCustomCss
            this.state.customCss = formatting.customCss
            this.elementOptionList = window.nvhStore.getElementTreeList().map(element => {
               return {
                  elementName: element.elementName,
                  style: `color: ${element.color}; padding-left: ${element.indent * 15 + 25}px`
               }
            })
            this.state.elementName = this.elementOptionList[0].elementName
            const changeEntryId = () => {
               let entryId = this.dictData.entryList[Math.floor(Math.random() * this.dictData.entryList.length)].id
               this.store.changeEntryId(entryId)
            }
            if(this.dictData.isEntryListLoaded){
               changeEntryId()
            } else {
               this.store.one("entryListChanged", changeEntryId.bind(this))
            }
         },

         onMounted(){
            this.initCustomCssEditor()
            this.state.customCss && this.refreshCustomStyles()
         },

         onBeforeUnmount(){
            this.nvhStore.data.formatting.elements = JSON.parse(this.state.savedConfig)
            window.CustomStyles.remove("nvhEditorCustomStyles")
         },

         onElementClick(elementName){
            this.update({elementName: elementName})
         },

         onExampleClick(evt){
            let nvhEditorViewItem = $(evt.target).closest("nvh-editor-view-item")
            if(nvhEditorViewItem.length){
               let elementName = this.nvhStore.getElementById(nvhEditorViewItem.attr("id").split("-")[2]).name
               this.update({elementName: elementName})
            }
         },

         onExampleEntryChanged(entry){
            this.store.changeEntryId(entry.id)
         },

         onElementMouseEnter(elementName){
            if(this.nvhStore.data.entry){
               $(".highlighted", this.root).removeClass("highlighted")
               let selector = this.nvhStore.findElements(e => e.name == elementName).map(e => `#nvh-item-${e.id}`).join(",")
               $(selector, this.root).addClass("highlighted")
            }
         },

         onElementMouseLeave(elementName){
            $(".highlighted", this.root).removeClass("highlighted")
         },

         onReloadRandomEntryClick(){
            this.store.loadRandomEntry()
         },

         onUseCustomCssClick(){
            this.update({useCustomCss: !this.state.useCustomCss})
            this.initCustomCssEditor()
            if(this.state.useCustomCss){
               this.refreshCustomStyles()
            } else {
               window.CustomStyles.remove("nvhEditorCustomStyles")
            }
         },

         onCustomCssUpdate(){
            this.state.customCss = this.codeEditorCSS.toString()
            this.customCssInputDebounceTimer && clearTimeout(this.customCssInputDebounceTimer)
            this.customCssInputDebounceTimer = setTimeout(() => {
               clearTimeout(this.customCssInputDebounceTimer)
               this.refreshCustomStyles()
            }, 200)
         },

         refreshCustomStyles(){
            window.CustomStyles.add("nvhEditorCustomStyles", this.state.customCss, ".exampleWrapper")
         },

         initCustomCssEditor(){
            if(this.state.useCustomCss){
               let editorNode = document.getElementById("editor_css")
               let options = {
                 tab: "   ",
                 indentOn: /[{]$/
               }
               this.codeEditorCSS = CodeJar(editorNode, Prism.highlightElement.bind(this, editorNode, false, null), options)
               this.state.customCss && this.codeEditorCSS.updateCode(this.state.customCss)
               this.codeEditorCSS.onUpdate(this.onCustomCssUpdate.bind(this))
            }
         },

         save(){
            this.update({isBusy: true})
            this.state.savedConfig = JSON.stringify(this.nvhStore.data.formatting.elements)
            this.store.updateDictionaryConfig("formatting", {
               elements: this.nvhStore.data.formatting.elements,
               useCustomCss: this.state.useCustomCss,
               customCss: this.state.useCustomCss ? this.state.customCss : ""
            })
                  .always(response => {
                     this.update({isBusy: false})
                  })
         }
      }
   </script>

   <style type="scss">
      .leftSideWrapper{
         flex-direction: column;
      }
      .element{
         padding: 0px 15px;
         position: relative;
         .selectedElementArrow{
            position: absolute;
            left: 0px;
            top: 0px;
         }
         &:hover{
            background-color: whitesmoke;
         }
      }
      .selectedElement{
         background-color: whitesmoke;
      }
      .elementStyleColumn{
         min-width: 360px
         element-style-options{
            display: block;
         }
      }
      .elementListColumn{
         min-width: 250px;
      }
      .exampleColumn{
         flex: 1;
         position: sticky;
         min-width: 250px;
         .exampleWrapper{
            min-height: 350px;
         }
      }
      .nvh-readonly-value-wrapper,
      .nvh-readonly-value{
         cursor: pointer!important
      }
      .highlighted{
         box-shadow: 0 4px 5px 0 rgb(0 0 0 / 14%), 0 1px 10px 0 rgb(0 0 0 / 12%), 0 2px 4px -1px rgb(0 0 0 / 30%);
      }
      .exampleBar{
         align-items: center;
         gap: 15px;
         padding: 4px 5px 4px 15px;
         .input-field,
         input{
            margin: 0!important
         }
         input{
            height: 2rem;
         }
      }
      .cssCode{
         max-width: 500px;
      }
   </style>
</dict-config-formatting>
